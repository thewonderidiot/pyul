* 1800A JOB 55-238-00  YUL SYSTEM
*       YUL
Y  YUL  ADD NEW COMPUTER BLK2
Y  YUL  ASSEMBLY PASS 1 FOR BLK2 IS AVAILABLE
Y  YUL  ASSEMBLY PASS 2 FOR BLK2 IS AVAILABLE
Y  YUL  ASSEMBLY PASS 3 FOR BLK2 IS AVAILABLE
Y  YUL  MANUFACTURING FOR BLK2 IS AVAILABLE
Y  YUL  ASSEMBLE NEW BLK2 PROGRAM AURORA BY DAP GROUP
L      2ASSEMBLY AND OPERATION INFORMATION
R0001  4VERB DEFINITIONS
R0002    REGULAR VERBS
R0003   01  DISPLAY OCTAL COMP 1 (R1)
R0004   02  DISPLAY OCTAL COMP 2 (R1)
R0005   03  DISPLAY OCTAL COMP 3 (R1)
R0006   04  DISPLAY OCTAL COMP 1,2 (R1,R2)
R0007   05  DISPLAY OCTAL COMP 1,2,3 (R1,R2,R3)
R0008   06  DECIMAL DISPLAY
R0009   07  DP DECIMAL DISPLAY (R1,R2)
R0010   10  SPARE
R0011   11  MONITOR OCT COMP 1 (R1)
R0012   12  MONITOR OCT COMP 2 (R1)
R0013   13  MONITOR OCT COMP 3 (R1)
R0014   14  MONITOR OCT COMP 1,2 (R1)
R0015   15  MONITOR OCT COMP 1,2,3 (R1,R2,R3)
R0016   16  MONITOR DECIMAL
R0017   17  MONITOR DP DECIMAL (R1,R2)
R0018   20  SPARE
R0019   21  LOAD COMP 1 (R1)
R0020   22  LOAD COMP 2 (R2)
R0021   23  LOAD COMP 3 (R3)
R0022   24  LOAD COMP 1,2 (R1,R2)
R0023   25  LOAD COMP 1,2,3 (R1,R2,R3)
R0024   26  SPARE
R0025   27  FIXED MEMORY DISPLAY
R0026   30  REQUEST EXECUTIVE
R0027   31  REQUEST WAITLIST
R0028   32  C(R2) INTO R3, C(R1) INTO R2
R0029   33  PROCEED WITHOUT DATA
R0030   34  TERMINATE CURRENT TEST OR LOAD REQUEST
R0031   35  TEST LIGHTS
R0032   36  FRESH START
R0033   37  CHANGE MAJOR MODE
R0034  4END OF REGULAR VERBS
R0035   EXTENDED VERBS
R0036   40  ZERO (USED WITH NOUNS 20, 40, AND 70)
R0037   41  COARSE ALIGN (USED WITH NOUNS 20, 40, AND 70)
R0038   42  FINE ALIGN IMU
R0039   43  LOAD IMU ATTITUDE ERROR METERS
R0040   44  ILLEGAL VERB
R0041   45  COMMAND LR TO POSITION 2
R0042   46  SAMPLE RADAR ONCE PER SECOND
R0043   47  PERFORM LEM FCS TEST
R0044   50  PLEASE PERFORM
R0045   51  PLEASE MARK
R0046   52  PLEASE MARK Y
R0047   53  PLEASE MARK X OR Y
R0048   54  PULSE TORQUE GYROS
R0049   55  ALIGN TIME
R0050   56  PERFORM BANKSUM
R0051   57  PERFORM SYSTEM TEST
R0052   60  ILLEGAL VERB
R0053   61  ILLEGAL VERB
R0054   62  SCAN LEM INBITS
R0055   63  INITIALIZE AGS
R0056   64  ILLEGAL VERB
R0057   65  ILLEGAL VERB
R0058   66  ILLEGAL VERB
R0059   67  ILLEGAL VERB
R0060   70  ILLEGAL VERB
R0061   71  ILLEGAL VERB
R0062   72  ILLEGAL VERB
R0063   73       RHC USED FOR MINIMUM IMPULSE
R0064   74       RHC USED FOR RATE COMMAND
R0065   75       DIGITAL AUTOPILOT WIDE DEADBAND
R0066   76       DIGITAL AUTOPILOT NARROW DEADBAND
R0067   77  ILLEGAL VERB
P0068   NORMAL NOUNS                                       SCALE AND DECIMAL POI
 0069  9NT
R0070   00  NOT IN USE
R0071   01  SPECIFY MACHINE ADDRESS (FRACTIONAL)           (.XXXXX)
R0072   02  SPECIFY MACHINE ADDRESS (WHOLE)                (XXXXX.)
R0073   03  SPECIFY MACHINE ADDRESS (DEGREES)              (XXX.XXDEGREES)
R0074   04  SPECIFY MACHINE ADDRESS (HOURS)                (XXX.XXHOURS)
R0075   05  SPECIFY MACHINE ADDRESS (SECONDS)              (XXX.XXSECONDS)
R0076   06  SPECIFY MACHINE ADDRESS (GYRO DEGREES)         (XX.XXXDEGREES)
R0077   07  SPARE
R0078   10  CHANNEL TO BE SPECIFIED
R0079   11  SPARE
R0080   12  SPARE
R0081   13  SPARE
R0082   14  SPARE
R0083   15  INCREMENT MACHINE ADDRESS                      (OCTAL ONLY)
R0084   16  TIME SECONDS                                   (XXX.XXSECONDS)
R0085   17  TIME HOURS                                     (XXX.XXHOURS)
R0086   20  ICDU                                           (XXX.XXDEGREES)
R0087   21  PIPAS                                          (XXXXX.PULSES)
R0088   22  NEW ANGLES I                                   (XXX.XXDEGREES)
R0089   23  DELTA ANGLES I                                 (XXX.XXDEGREES)
R0090   24  DELTA TIME (SECONDS)                           (XXX.XXSECONDS)
R0091   25  CHECKLIST                                      (XXXXX.)
R0092   26  PRIO/DELAY, ADRES, BBCON                       (OCTAL ONLY)
R0093   27  SELF TEST ON/OFF SWITCH                        (XXXXX.)
R0094   30  STAR NUMBERS                                   (XXXXX.)
R0095   31  FAILREG, SFAIL, ERCOUNT                        (OCTAL ONLY)
R0096   32  DECISION TIME (MIDCOURSE)                      (XXX.XXHOURS (INTERNA
 0097  9L UNITS = WEEKS))
R0098   33  EPHEMERIS TIME (MIDCOURSE)                     (XXX.XXHOURS (INTERNA
 0099  9L UNITS = WEEKS))
R0100   34  MEASURED QUANTITY (MIDCOURSE)                  (XXXX.XKILOMETERS)
R0101   35  INBIT MESSAGE                                  (OCTAL ONLY)
R0102   36  LANDMARK DATA 1                                (OCTAL ONLY)
R0103   37  LANDMARK DATA 2                                (OCTAL ONLY)
R0104   40  RENDEZVOUS RADAR ANGLES (TRUNION,SHAFT)        (XXX.XXDEGREES)
R0105   41  NEW RENDEZVOUS RADAR ANGLES (TRUNION,SHAFT)    (XXX.XXDEGREES)
R0106   42  AOT ROTATION ANGLES                            (XXX.XXDEGREES)
R0107   43  AOT DETENT CODE                                (XXXXX.)
R0108   44  FORWARD VELOCITY, LATERAL VELOCITY             (XXXXX.FEET/SEC)
R0109   45  ROTATIONAL HAND CONTROLLER ANGLE RATES         (XXXXX.DEG/SEC)
R0110   46  SPARE
R0111   47  SPARE
R0112   50  SPARE
R0113   51  SPARE
R0114   52  GYRO BIAS DRIFT                                (.BBXXXXXMILLIRAD/SEC
 0115  9)
R0116   53  GYRO INPUT AXIS ACCELERATION DRIFT             (.BBXXXXX(MILLIRAD/SE
 0117  9C)/(CM/SEC SEC))
R0118   54  GYRO SPIN AXIS ACCELERATION DRIFT              (.BBXXXXX(MILLIRAD/SE
 0119  9C)/(CM/SEC SEC))
R0120  4END OF NORMAL NOUNS
R0121   MIXED NOUNS                                        SCALE AND DECIMAL POI
 0122  9NT
R0123   55  LANDING RADAR ALTITUDE, TIME (SECONDS)         (XXXXX.FEET, XXX.XXSE
 0124  9C)
R0125   56  LANDING RADAR VELX, TIME (SECONDS)             (XXXXX.FEET/SEC, XXX.
 0126  9XXSEC)
R0127   57  LANDING RADAR VELY, TIME (SECONDS)             (XXXXX.FEET/SEC, XXX.
 0128  9XXSEC)
R0129   60  LANDING RADAR VELZ, TIME (SECONDS)             (XXXXX.FEET/SEC, XXX.
 0130  9XXSEC)
R0131   61  TARGET AZIMUTH AND ELEVATION                   (XXX.XXDEG, XX.XXXDEG
 0132  9)
R0133   62  RENDEZVOUS RADAR RANGE, TRUNION, SHAFT         (XXXXXB.FEET, XXX.XXD
 0134  9EG, XXX.XXDEG)
R0135   63  RENDEZVOUS RADAR RANGE RATE, TRUNION, SHAFT    (XXXXX.FEET/SEC, XXX.
 0136  9XXDEG, XXX.XXDEG)
R0137   64  INITIAL ALTITUDE, FINAL ALTITUDE, ALT. RATE    (XXXXX.FEET, XXXXX.FE
 0138  9ET, XXXXX.FEET/SEC)
R0139   65  SAMPLED TIME (HOURS AND SECONDS)               (XXX.XXHOURS, XXX.XXS
 0140  9EC)
R0141           (FETCHED IN INTERRUPT)
R0142   66  SYSTEM TEST RESULTS                            (XXXXX., .XXXXX, XXXX
 0143  9X.)
R0144   67  DELTA GYRO ANGLES                              (XX.XXXDEG  FOR EACH)
R0145   70  OPTICAL TRACKER ANGLES (AZIMUTH, ELEVATION)    (XXX.XXDEG, XXX.XXDEG
 0146  9)
R0147   71  DESIRED OPTICAL TRACKER ANGLES (AZ, ELEV)      (XXX.XXDEG, XXX.XXDEG
 0148  9)
R0149   72  DELTA POSITION                                 (XXXX.XKILOMETERS  FO
 0150  9R EACH)
R0151   73  DELTA VELOCITY                                 (XXXX.XMETERS/SEC  FO
 0152  9R EACH)
R0153   74  MEASUREMENT DATA (MIDCOURSE)                   (XXX.XXHOURS (INTERNA
 0154  9L UNITS=WEEKS), XXXX.XKILOMETERS, XXXXX.
R0155   75  MEASUREMENT DEVIATIONS (MIDCOURSE)             (XXXX.XKILOMETERS, XX
 0156  9XX.XMETERS/SEC, XXXX.XKILOMETERS)
R0157   76  POSITION VECTOR                                (XXXX.XKILOMETERS  FO
 0158  9R EACH)
R0159   77  VELOCITY VECTOR                                (XXXX.XMETERS/SEC  FO
 0160  9R EACH)
P0161  4TABLE OF ERROR CODES
R0162  2OPTICS SUB-SYSTEM
R0163   00105    MARK BUTTONS NOT AVAILABLE
R0164   00111    MARK IS MISSING AFTER ENTER
R0165   00112    MARK NOT BEING ACCEPTED
R0166   00113    NO INBITS
R0167   00114    MARK MADE BUT NOT DESIRED
R0168  200115    X MARK NOT MADE
R0169  2IMU SUB-SYSTEM
R0170   00207    ISS TURN-ON REQUEST NOT PRESENT FOR 90 SEC.
R0171   00210    IMU NOT OPERATING
R0172   00211    COARSE ALIGN ERROR
R0173   00212    PIPA FAIL BUT PIPA IS NOT BEING USED
R0174   00213    IMU NOT OPERATING WITH TURN-ON REQUEST
R0175  200214    PROGRAM USING IMU WHEN TURNED OFF
R0193  2PROCEDURAL DIFFICULTY
R0194   00401    DESIRED GIMBAL ANGLES YIELD GIMBAL LOCK
R0195   00402    STAR OUT OF FIELD OF VIEW
R0196  200403    STAR OUT OF FIELD OF VIEW
R0197  2RADAR ERRORS
R0198   00501    RADAR ANTENNA OUT OF LIMITS
R0199   00502    BAD RADAR GIMBAL ANGLE INPUTS
R0200   00503    RADAR ANTENNA DESIGNATE FAIL
R0201   00510    RADAR AUTO DESCRETE NOT PRESENT
R0202   00514    RADAR GOES OUT OF AUTO MODE WHILE BEING USED
R0203   00520    NO RADAR RUPT EXPECTED
R0204   00521    RADAR DATA COULD NOT BE READ
R0205   00522    WRONG LR POSITION
R0206   00523    LR ANTENNA DID NOT MAKE IT
R0207  200524    BAD RADAR TARGET
R0208  2COMPUTER HARDWARE MALFUNCTIONS
R0209   01102    AGC SELF TEST ERROR
R0210   01103    UNUSED CCS BRANCH EXECUTED . ABORT
R0211   01105    DOWNLINK TOO FAST
R0212  201106    UPLINK TOO FAST
R0213  2LIST OVERFLOWS ( ALL ABORTS )
R0214   01201    EXECUTIVE OVERFLOW-NO VAC AREAS
R0215   01202    EXECUTIVE OVERFLOW-NO CORE SETS
R0216   01203    WAITLIST OVERFLOW-TOO MANY TASKS
R0217   01206    KEYBOARD AND DISPLAY WAITING LINE OVERFLOW
R0218   01207    NO VAC AREA FOR MARKS
R0219  201210    TWO PROGRAMS USING DEVICE AT SAME TIME
R0220  2INTERPRETER ERRORS
R0221   01301    ARCSIN-ARCCOS INPUT ANGLE TOO LARGE. ABORT
R0222  201302    SQRT CALLED WITH NEGATIVE ARGUMENT . ABORT
R0223  2DISPLAY ALARMS
R0224   01400    PITCH AND/OR ROLL TRIM FAIL IS ON (SHOWN WITH V50N25).
R0225   01410    TEMPORARY JET FAIL
R0226  201411    CDU DOES NOT AGREE WITH COMMAND TO 1 DEGREE
R0227  2KEYBOARD AND DISPLAY PROGRAM
R0228   01501    KEYBOARD AND DISPLAY ALARM DURING INTERNAL USE(NVSUB).ABORT
R0229  2SYSTEM TEST ALARMS
R0230   01600    DRIFT TEST OVERFLOW ALARM
R0231   01601    SOME ERROR IN GYRO TORQUING DURING DRIFT TEST OR COMPASSS
L      2ERASABLE ASSIGNMENTS
 0001   A        EQUALS 0
 0002   L        EQUALS 1               L AND Q ARE BOTH CHANNELS AND REGISTERS.
 0003   Q        EQUALS 2
 0004   EBANK    EQUALS 3
 0005   FBANK    EQUALS 4
 0006   Z        EQUALS 5               ADJACENT TO FBANK AND BBANK FOR DXCH Z
 0007   BBANK    EQUALS 6               (DTCB) AND DXCH FBANK (DTCF).
A0008  2                                REGISTER 7 IS A ZERO-SOURCE, USED BY ZL.
 0009   ARUPT    EQUALS 10              INTERRUPT STORAGE.
 0010   LRUPT    EQUALS 11
 0011   QRUPT    EQUALS 12
 0012   SAMPTIME EQUALS 13              SAMPLED TIME 1 & 2.
 0013   ZRUPT    EQUALS 15              (13 AND 14 ARE SPARES.)
 0014   BANKRUPT EQUALS 16              USUALLY HOLDS FBANK OR BBANK.
 0015  2BRUPT    EQUALS 17              RESUME ADDRESS AS WELL.
 0016   CYR      EQUALS 20
 0017   SR       EQUALS 21
 0018   CYL      EQUALS 22
 0019  4EDOP     EQUALS 23              EDITS INTERPRETIVE OPERATION CODE PAIRS.
 0020   TIME2    EQUALS 24
 0021   TIME1    EQUALS 25
 0022   TIME3    EQUALS 26
 0023   TIME4    EQUALS 27
 0024   TIME5    EQUALS 30
 0025   TIME6    EQUALS 31
 0026   CDUX     EQUALS 32
 0027   CDUY     EQUALS 33
 0028   CDUZ     EQUALS 34
 0029   OPTY     EQUALS 35
 0030   OPTX     EQUALS 36
 0031   PIPAX    EQUALS 37
 0032   PIPAY    EQUALS 40
 0033   PIPAZ    EQUALS 41
 0034   BMAGX    EQUALS 42
 0035   RHCP     EQUALS 42
 0036   BMAGY    EQUALS 43
 0037   RHCY     EQUALS 43
 0038   BMAGZ    EQUALS 44
 0039   RHCR     EQUALS 44
 0040   INLINK   EQUALS 45
 0041   RNRAD    EQUALS 46
 0042   GYROCTR  EQUALS 47
 0043   GYROCMD  EQUALS 47
 0044   CDUXCMD  EQUALS 50
 0045   CDUYCMD  EQUALS 51
 0046   CDUZCMD  EQUALS 52
 0047   OPTYCMD  EQUALS 53
 0048   OPTXCMD  EQUALS 54
 0049   EMSD     EQUALS 55
 0050   THRUST   EQUALS 55
 0051   LEMONM   EQUALS 56
 0052   OUTLINK  EQUALS 57
 0053  2ALTM     EQUALS 60
 0054            SETLOC 67              DECODED REGISTER FOR NIGHT-WATCHMAN ALM.
 0055  2NEWJOB   ERASE
 0056   LVSQUARE EQUALS 34D             SQUARE OF VECTOR INPUT TO ABVAL AND UNIT
 0057   LV       EQUALS 36D             LENGTH OF VECTOR INPUT TO UNIT.
 0058   X1       EQUALS 38D             INTERPRETIVE SPECIAL REGISTERS RELATIVE
 0059   X2       EQUALS 39D             TO THE WORK AREA.
 0060   S1       EQUALS 40D
 0061   S2       EQUALS 41D
 0062   QPRET    EQUALS 42D
P0063  2GENERAL ERASABLE ASSIGNMENTS.
 0064  2         SETLOC 61
R0065  2         INTERPRETIVE SWITCH RESERVATIONS.
 0066  2STATE    ERASE  +3              60 SWITCHES PRESENTLY.
R0067  2         INTERPRETIVE SWITCH BIT ASSIGNMENTS:
 0068   WMATFLAG EQUALS 0
 0069   JSWITCH  EQUALS 1
 0070   MIDFLAG  EQUALS 2
 0071   MOONFLAG EQUALS 3
 0072   NBSMBIT  EQUALS 4
 0073   COAROFIN EQUALS 5
 0074   BODYFLAG EQUALS 6
 0075   IMUSE    EQUALS 7
 0076   RRUSE    EQUALS 8D
 0077   RRNBSW   EQUALS 9D
 0078   LOKONSW  EQUALS 10D
R0079  4END OF SWITCH ASSIGNMENTS
R0080  2         THE FOLLOWING SET COMPRISES THE INTERRUPT TEMPORARY STORAGE POO
R0081            ANY OF THESE MAY BE USED AS TEMPORARIES DURING INTERRUPT OR WIT
 0082  9H INTERRUPT INHIBITED. THE ITEMP SERIES
R0083  2IS USED DURING CALLS TO THE EXECUTIVE AND WAITLIST - THE RUPTREGS ARE NO
 0084  9T.
 0085   ITEMP1   ERASE
 0086   WAITEXIT EQUALS ITEMP1
 0087  2EXECTEM1 EQUALS ITEMP1
 0088   ITEMP2   ERASE
 0089   WAITBANK EQUALS ITEMP2
 0090  2EXECTEM2 EQUALS ITEMP2
 0091  2         SETLOC 70
 0092   ITEMP3   ERASE
 0093   RUPTSTOR EQUALS ITEMP3
 0094   WAITADR  EQUALS ITEMP3
 0095  2NEWPRIO  EQUALS ITEMP3
 0096   ITEMP4   ERASE
 0097   LOCCTR   EQUALS ITEMP4
 0098  2WAITTEMP EQUALS ITEMP4
 0099   ITEMP5   ERASE
 0100  2NEWLOC   EQUALS ITEMP5
 0101   ITEMP6   ERASE
A0102  2NEWLOC+1 EQUALS ITEMP6          DP ADDRESS.
 0103   RUPTREG1 ERASE
 0104   RUPTREG2 ERASE
 0105   RUPTREG3 ERASE
 0106   RUPTREG4 ERASE
 0107   KEYTEMP1 EQUALS RUPTREG4
 0108  2DSRUPTEM EQUALS RUPTREG4
R0109  2         THE FOLLOWING ARE EXECUTIVE TEMPORARIES WHICH MAY BE USED BETWE
 0110  9EN CCS NEWJOB INQUIRIES.
 0111   INTB15+  ERASE                  REFLECTS 15TH BIT OF INDEXABLE ADDRESSES
 0112   DSEXIT   =      INTB15+         RETURN FOR DSPIN
 0113   EXITEM   =      INTB15+         RETURN FOR SCALE FACTOR ROUTINE SELECT
 0114  2BLANKRET =      INTB15+         RETURN FOR 2BLANK
 0115   INTBIT15 ERASE                  SIMILAR TO ABOVE.
 0116   WRDRET   =      INTBIT15        RETURN FOR 5BLANK
 0117   WDRET    =      INTBIT15        RETURN FOR DSPWD
 0118   DECRET   =      INTBIT15        RETURN FOR PUTCOM(DEC LOAD)
 0119  221/22REG =      INTBIT15        TEMP FOR CHARIN
R0120  2         THE REGISTERS BETWEEN ADDRWD AND PRIORITY MUST STAY IN THE FOLL
 0121  9OWING ORDER FOR INTERPRETIVE TRACE.
 0122   ADDRWD   ERASE                  12 BIT INTERPRETIVE OPERAND SUB-ADDRESS.
 0123   POLISH   ERASE                  HOLDS CADR MADE FROM POLISH ADDRESS.
 0124   UPDATRET =      POLISH          RETURN FOR UPDATNN, UPDATVB
 0125   CHAR     =      POLISH          TEMP FOR CHARIN
 0126   ERCNT    =      POLISH          COUNTER FOR ERROR LIGHT RESET
 0127  2DECOUNT  =      POLISH          COUNTER FOR SCALING AND DISPLAY (DEC)
 0128  2FIXLOC   ERASE                  WORK AREA ADDRESS.
 0129  2OVFIND   ERASE                  SET NON-ZERO ON OVERFLOW.
 0130   VBUF     ERASE  +5              TEMPORARY STORAGE USED FOR VECTORS.
 0131   SGNON    =      VBUF            TEMP FOR +,- ON
 0132   NOUNTEM  =      VBUF            COUNTER FOR MIXNOUN FETCH
 0133   DISTEM   =      VBUF            COUNTER FOR OCTAL DISPLAY VERBS
 0134  2DECTEM   =      VBUF            COUNTER FOR FETCH (DEC DISPLAY VERBS)
 0135   SGNOFF   =      VBUF    +1      TEMP FOR +,- ON
 0136   NVTEMP   =      VBUF    +1      TEMP FOR NVSUB
 0137  2SFTEMP1  =      VBUF    +1      STORAGE FOR SF CONST HI PART(=SFTEMP2-1)
 0138   CODE     =      VBUF    +2      FOR DSPIN
 0139  2SFTEMP2  =      VBUF    +2      STORAGE FOR SF CONST LO PART(=SFTEMP1+1)
 0140   MIXTEMP  =      VBUF    +3      FOR MIXNOUN DATA
 0141  2SIGNRET  =      VBUF    +3      RETURN FOR +,- ON
R0142  2ALSO MIXTEMP+1 = VBUF+4, MIXTEMP+2 = VBUF+5.
 0143   BUF      ERASE  +2              TEMPORARY SCALAR STORAGE.
 0144   BUF2     ERASE  +1
 0145   INDEXLOC EQUALS BUF             CONTAINS ADDRESS OF SPECIFIED INDEX.
 0146   SWWORD   EQUALS BUF             ADDRESS OF SWITCH WORD.
 0147   SWBIT    EQUALS BUF +1          SWITCH BIT WITHIN SWITCH WORD.
 0148   MPTEMP   ERASE                  TEMPORARY USED IN MULTIPLY AND SHIFT.
 0149   DOTINC   ERASE                  COMPONENT INCREMENT FOR DOT SUBROUTINE.
 0150   DVSIGN   EQUALS DOTINC          DETERMINES SIGN OF DDV RESULT.
 0151   ESCAPE   EQUALS DOTINC          USED IN ARCSIN/ARCCOS.
 0152  2ENTRET   =      DOTINC          EXIT FROM ENTER
 0153   DOTRET   ERASE                  RETURN FROM DOT SUBROUTINE.
 0154   DVNORMCT EQUALS DOTRET          DIVIDEND NORMALIZATION COUNT IN DDV.
 0155   ESCAPE2  EQUALS DOTRET          ALTERNATE ARCSIN/ARCCOS SWITCH.
 0156   WDCNT    =      DOTRET          CHAR COUNTER FOR DSPWD
 0157  2INREL    =      DOTRET          INPUT BUFFER SELECTOR ( X,Y,Z, REG )
 0158   MATINC   ERASE                  VECTOR INCREMENT IN MXV AND VXM.
 0159   MAXDVSW  EQUALS MATINC          +0 IF DP QUOTIENT IS NEAR ONE - ELSE -1.
 0160   POLYCNT  EQUALS MATINC          POLYNOMIAL LOOP COUNTER
 0161   DSPMMTEM =      MATINC          DSPCOUNT SAVE FOR DSPMM
 0162  2MIXBR    =      MATINC          INDICATOR FOR MIXED OR NORMAL NOUN
 0163   TEM1     ERASE                  EXEC TEMP
 0164   POLYRET  =      TEM1
 0165  2DSREL    =      TEM1            REL ADDRESS FOR DSPIN
 0166   TEM2     ERASE                  EXEC TEMP
 0167   DSMAG    =      TEM2            MAGNITUDE STORE FOR DSPIN
 0168  2IDADDTEM =      TEM2            MIXNOUN INDIRECT ADDRESS STORAGE
 0169   TEM3     ERASE                  EXEC TEMP
 0170  2COUNT    =      TEM3            FOR DSPIN
 0171   TEM4     ERASE                  EXEC TEMP
 0172   LSTPTR   =      TEM4            LIST POINTER FOR GRABUSY
 0173   RELRET   =      TEM4            RETURN FOR RELDSP
 0174  2FREERET  =      TEM4            RETURN FOR FREEDSP
 0175   TEM5     ERASE                  EXEC TEMP
 0176  2NOUNADD  =      TEM5            TEMP STORAGE FOR NOUN ADDRESS
 0177   NNADTEM  ERASE                  TEMP FOR NOUN ADDRESS TABLE ENTRY
 0178   NNTYPTEM ERASE                  TEMP FOR NOUN TYPE TABLE ENTRY
 0179   IDAD1TEM ERASE                  TEMP FOR INDIR ADRESS TABLE ENTRY(MIXNN)
A0180                                   MUST = IDAD2TEM-1, = IDAD3TEM-2.
 0181   IDAD2TEM ERASE                  TEMP FOR INDIR ADRESS TABLE ENTRY(MIXNN)
A0182                                   MUST = IDAD1TEM+1, = IDAD3TEM-1.
 0183   IDAD3TEM ERASE                  TEMP FOR INDIR ADRESS TABLE ENTRY(MIXNN)
A0184                                   MUST = IDAD1TEM+2, = IDAD2TEM+1.
 0185  2RUTMXTEM ERASE                  TEMP FOR SF ROUT TABLE ENTRY(MIXNN ONLY)
R0186  2         STORAGE USED BY THE EXECUTIVE.
 0187   MPAC     ERASE  +6              MULTI-PURPOSE ACCUMULATOR.
 0188   MODE     ERASE                  +1 FOR TP, +0 FOR DP, OR -1 FOR VECTOR.
 0189   LOC      ERASE                  LOCATION ASSOCIATED WITH JOB.
 0190   BANKSET  ERASE                  USUALLY CONTAINS BBANK SETTING.
 0191   PUSHLOC  ERASE                  WORD OF PACKED INTERPRETIVE PARAMETERS.
 0192  2PRIORITY ERASE                  PRIORITY OF PRESENT JOB AND WORK AREA.
 0193  2         ERASE  +71D            SEVEN SETS OF 12 REGISTERS EACH.
P0194  4THE FOLLOWING REGISTERS ARE RESERVED FOR PINBALL
R0195  2RESERVED FOR PINBALL EXECUTIVE ACTION
 0196   DSPCOUNT ERASE                  DISPLAY POSITION INDICATOR
 0197   DECBRNCH ERASE                  +DEC, - DEC, OCT INDICATOR
 0198   VERBREG  ERASE                  VERB CODE
 0199   NOUNREG  ERASE                  NOUN CODE
 0200   XREG     ERASE                  R1 INPUT BUFFER
 0201   YREG     ERASE                  R2 INPUT BUFFER
 0202   ZREG     ERASE                  R3 INPUT BUFFER
 0203   XREGLP   ERASE                  LO PART OF XREG (FOR DEC CONV ONLY)
 0204   YREGLP   ERASE                  LO PART OF YREG (FOR DEC CONV ONLY)
 0205   ZREGLP   ERASE                  LO PART OF ZREG (FOR DEC CONV ONLY)
 0206   MODREG   ERASE                  MODE CODE
 0207   DSPLOCK  ERASE                  KEYBOARD/SUBROUTINE CALL INTERLOCK
 0208   REQRET   ERASE                  RETURN REGISTER FOR LOAD
 0209   LOADSTAT ERASE                  STATUS INDICATOR FOR LOADTST
 0210   CLPASS   ERASE                  PASS INDICATOR CLEAR
 0211   NOUT     ERASE                  ACTIVITY COUNTER FOR DSPTAB
 0212   NOUNCADR ERASE                  MACHINE CADR FOR NOUN
 0213   MONSAVE  ERASE                  N/V CODE FOR MONITOR. (= MONSAVE1-1)
 0214   MONSAVE1 ERASE                  NOUNCADR FOR MONITOR(MATBS) =MONSAVE +1
 0215   DSPTAB   ERASE  +11D            0-10D, DISPLAY PANEL BUFF. 11D, C/S LTS.
 0216   CADRSTOR ERASE                  ENDIDLE STORAGE
 0217   GRABLOCK ERASE                  INTERNAL INTERLOCK FOR DISPLAY SYSTEM
 0218   NVQTEM   ERASE                  NVSUB STORAGE FOR CALLING ADDRESS
A0219                                   MUST = NVBNKTEM-1
 0220   NVBNKTEM ERASE                  NVSUB STORAGE FOR CALLING BANK
A0221                                   MUST = NVQTEM+1
 0222   DSPLIST  ERASE          +2      WAITING LIST FOR DSP SYST INTERNAL USE
 0223   EXTVBACT ERASE                  EXTENDED VERB ACTIVITY INTERLOCK
 0224   DSPTEM1  ERASE          +2      BUFFER STORAGE AREA 1 (MOSTLY FOR TIME)
 0225   DSPTEM2  ERASE          +2      BUFFER STORAGE AREA 2 (MOSTLY FOR DEG)
R0226  4END OF ERASABLES RESERVED FOR PINBALL EXECUTIVE ACTION
R0227  2RESERVED FOR PINBALL INTERRUPT ACTION
 0228   DSPCNT   ERASE                  COUNTER FOR DSPOUT
 0229   UPLOCK   ERASE                  BIT1 = UPLINK INTERLOCK (ACTIVATED BY
A0230                                   RECEPTION OF A BAD MESSAGE IN UPLINK)
R0231  4END OF ERASABLES RESERVED FOR PINBALL INTERRUPT ACTION
R0232  2         DAP STORAGE IN NON-SWITCHED ERASABLE.
 0233   T6LOC    ERASE  +1
 0234   T6ADR    EQUALS T6LOC
 0235   T5LOC    ERASE  +1
 0236   T5ADR    EQUALS T5LOC
P0237  2ASSIGNMENTS FOR T4RUPT PROGRAM
 0238   T4LOC    ERASE
 0239   DSRUPTSW ERASE
 0240   DIDFLG   ERASE
 0241   ALT      ERASE  +1
 0242   ALTRATE  ERASE
 0243   FINALT   ERASE  +1              (MAY NOT BE REQUIRED FOR FLIGHTS).
 0244   LGYRO    ERASE
 0245   FORVEL   ERASE
 0246   LATVEL   ERASE
 0247   LASTYCMD ERASE
 0248  2LASTXCMD ERASE
 0249   ALTSAVE  ERASE  +1
 0250  2LMPCMD   ERASE
R0251  4END OF T4RUPT ASSIGNMENTS
 0252   IMODES30 ERASE
 0253   IMODES33 ERASE
 0254   MODECADR ERASE  +2
 0255   IMUCADR  EQUALS MODECADR
 0256   AOTCADR  EQUALS MODECADR +1
 0257   OPTCADR  EQUALS AOTCADR
 0258  2RADCADR  EQUALS MODECADR +2
 0259   MARKSTAT ERASE
 0260   XYMARK   ERASE
 0261            SETLOC 400
P0262  2TEMPORARY PHONY ASSIGNMENTS TO KEEP PINBALL FROM HAVING BAD ASSEMBLIES
 0263   THETAD   ERASE  +2
 0264   DELVX    ERASE  +5
R0265  4END OF PHONY ASSIGNMENTS
R0266            DOWNLINK LIST ADDRESS.
 0267  2DNLSTADR ERASE
R0268   AGS DUMMY ID WORD
 0269   AGSWORD  ERASE
R0270  2RADAR ERASABLE
 0271   RADMODES ERASE
 0272   SAMPLIM  ERASE
 0273   SAMPLSUM ERASE  +1
 0274   SAMPSUM  EQUALS SAMPLSUM
 0275   OPTYHOLD ERASE  +1
 0276   TIMEHOLD ERASE  +1
 0277   RRTARGET EQUALS SAMPLSUM        HALF UNIT VECTOR IN SM OR NB AXES.
 0278   TANG     ERASE  +1              DESIRED TRUNNION AND SHAFT ANGLES.
 0279   MODEA    EQUALS TANG
 0280   MODEB    ERASE  +1              DODES CLOBBERS TANG +2.
 0281   NSAMP    EQUALS MODEB
 0282   DESRET   ERASE
 0283   OLDATAGD EQUALS DESRET          USED IN DATA READING ROUTINES.
 0284   DESCOUNT ERASE
R0285  2END OF RADAR ERASABLE ASSIGNMENTS
 0286   VAC1USE  ERASE
 0287   VAC1     ERASE  +42D
 0288   VAC2USE  ERASE
 0289   VAC2     ERASE  +42D
 0290   VAC3USE  ERASE
 0291   VAC3     ERASE  +42D
 0292   VAC4USE  ERASE
 0293   VAC4     ERASE  +42D
 0294   VAC5USE  ERASE
 0295  2VAC5     ERASE  +42D
R02951 2UNSWITCHED ERASABLE STORAGE ASSIGNMENTS FOR THE DAP
 02952  DAPBOOLS ERASE
 02953  T6NEXT   ERASE  +1
 02954 2T6NEXTJT ERASE  +2
 02955  DELAYCTR ERASE
R02956  THESE ARE WRITTEN INTO FROM SEVERAL PROGRAMS
 02957  CDUXD    ERASE
 02958  CDUYD    ERASE
 02959  CDUZD    ERASE
 0296  2         SETLOC 1000
R0297  2ERASABLE STORAGE FOR AVERAGE G INTEGRATOR
 0298   RN       ERASE  +5
 0299   VN       ERASE  +5
 0300   NSHIFT   ERASE
 0301   XSHIFT   ERASE
 0302   UNITR    ERASE  +5
 0303   UNITW    ERASE  +5
 0304   RMAG     ERASE  +1
 0305   RMAGSQ   ERASE  +1
 0306   GRAVITY  ERASE  +5
 0307   DELV     ERASE  +5
 0308   DELTAT   ERASE  +1
 0309   RN1      ERASE  +5
 0310   VN1      ERASE  +5
R0312  2         WAITLIST REPEAT FLAG:
 0313   RUPTAGN  ERASE
 0314  2KEYTEMP2 =      RUPTAGN         TEMP FOR KEYRUPT, UPRUPT
R0315  2         PHASE TABLE AND RESTART COUNTER.
 0316   -PHASE0  ERASE
 0317   PHASE0   ERASE
 0318   -PHASE1  ERASE
 0319   PHASE1   ERASE
 0320   -PHASE2  ERASE
 0321   PHASE2   ERASE
 0322   -PHASE3  ERASE
 0323   PHASE3   ERASE
 0324   -PHASE4  ERASE
 0325   PHASE4   ERASE
 0326   -PHASE5  ERASE
 0327  2PHASE5   ERASE
R0328  2ERASABLE FOR SINGLE PRECISION SUBROUTINES.
 0329   HALFY    ERASE
 0330   ROOTRET  ERASE
 0331   SQRARG   ERASE
 0332   TEMK     EQUALS HALFY
 0333  2SQ       EQUALS ROOTRET
 0334   1/PIPADT ERASE                  IMU COMPENSATION PACKAGE
 0335  2OLDBT1   =      1/PIPADT
R0366   ASSIGNMENTS RESERVED EXCLUSIVELY FOR SELF-CHECK
 0367  2SELFERAS ERASE  1360 - 1377
 0368   SELFRET  =      1360
 0369   SMODE    =      1361
 0370   REDOCTR  =      1362            KEEPS TRACK OF RESTARTS
 0371   FAILREG  =      1363
 0372   SFAIL    =      1364
 0373   ERCOUNT  =      1365
 0374   SCOUNT   =      1366
 0375   SKEEP1   =      1371
 0376   SKEEP2   =      1372
 0377   SKEEP3   =      1373
 0378   SKEEP4   =      1374
 0379   SKEEP5   =      1375
 0380   SKEEP6   =      1376
 0381  2SKEEP7   =      1377
R0382  2WAITLIST TASK LISTS
 0383  2         SETLOC 1400
 0384   LST1     ERASE  +7              DELTA T'S.
 0385  2LST2     ERASE  +17D            2CADR TASK ADDRESSES.
R0386  2IMU COMPENSATION PARAMETERS:
 0387   PBIASX   ERASE                  PIPA BIAS AND PIPA SCALE FACTOR TERMS
 03875  PIPABIAS =      PBIASX              INTERMIXED.
 0388   PIPASCFX ERASE
 03885  PIPASCF  =      PIPASCFX
 0389   PBIASY   ERASE
 0390   PIPASCFY ERASE
 0391   PBIASZ   ERASE
 0392  2PIPASCFZ ERASE
 0393   NBDX     ERASE                  GYRO BIAS DRIFTS
 03931  GBIASX   =      NBDX
 03932  NBDY     ERASE
 03934 2NBDZ     ERASE
 0394   ADIAX    ERASE                  ACCELERATION SENSITIVE DRIFT ALONG THE
 03942  ADIAY    ERASE                      INPUT AXIS
 03944 2ADIAZ    ERASE
 0395   ADSRAX   ERASE                  ACCELERATION SENSITIVE DRIFT ALONG THE
 03952  ADSRAY   ERASE                      SPIN REFERENCE AXIS
 03954 2ADSRAZ   ERASE
 0396   GCOMP    ERASE  +5              CONTAINS COMPENSATING TORQUES
 03965  GCOMPSW  ERASE
 0397   COMMAND  EQUALS GCOMP
 0398  2CDUIND   EQUALS GCOMP +3
R0399  2         STORAGE FOR RR TASKS.
 0400   RRRET    ERASE
 0401   RDES     ERASE
 0402  2RRINDEX  ERASE
R0403   AOT CALIBRATIONS IN AZIMUTH AND ELEVATION AT DETENTS
 0404   AOTAZ    ERASE  +2
 0405   AOTEL    ERASE  +2
R0406            ASSIGNMENTS FOR PRESENTLY UNUSED NOUNS.
 04061  AZANG    EQUALS                 DELETE WHEN OPTICAL TRACKER NOUNS GONE.
 04062  ELANG    EQUALS
 04063  DESLOTSY EQUALS
 04064 2DESLOTSX EQUALS
 0407   ROLL     ERASE  +2
 0408  2LANDMARK ERASE  +5
R04081 2THE FOLLOWING REGS ARE USED BY THE STANDBY VERBS
 04082  TIMESAV  ERASE  +1
 04083  SCALSAV  ERASE  +1
 04084  TIMAR    ERASE  +1
 04085 2TIMEDIFF ERASE  +1
 0409  2         SETLOC 2000
 0410   AMEMORY  ERASE  +150D
R0411  2         THE FOLLOWING A MEMORY LOCATIONS ARE USED BY MID-COURSE NAVIGAT
 0412  9ION:
 0413   RRECT    EQUALS AMEMORY +000D
 0414   RIGNTION EQUALS AMEMORY +000D
 0415   VRECT    EQUALS AMEMORY +006D
 0416   VIGNTION EQUALS AMEMORY +006D
 0417   TDELTAV  EQUALS AMEMORY +012D
 0418   NEWDLTAV EQUALS AMEMORY +012D
 0419   TNUV     EQUALS AMEMORY +018D
 0420   NEWNUV   EQUALS AMEMORY +018D
 0421   RCV      EQUALS AMEMORY +024D
 0422   FOUNDR   EQUALS AMEMORY +024D
 0423   VCV      EQUALS AMEMORY +030D
 0424   FOUNDV   EQUALS AMEMORY +030D
 0425   TC       EQUALS AMEMORY +036D
 0426   TET      EQUALS AMEMORY +038D
 0427   XKEP     EQUALS AMEMORY +040D
 0428   ALPHAV   EQUALS AMEMORY +042D
 0429   DELR     EQUALS AMEMORY +042D
 0430   BETAV    EQUALS AMEMORY +048D
 0431   DELVEL   EQUALS AMEMORY +048D
 0432   PHIV     EQUALS AMEMORY +054D
 0433   BVECTOR  EQUALS AMEMORY +054D
 0434   PSIV     EQUALS AMEMORY +060D
 0435  2FV       EQUALS AMEMORY +066D
 0436  2VECTAB   EQUALS AMEMORY +072D
 0437   TAVEGON  EQUALS AMEMORY +072D
 0438   TRESUME  EQUALS AMEMORY +074D
 0439   RAVEGON  EQUALS AMEMORY +076D
 0440   VAVEGON  EQUALS AMEMORY +082D
 0441   RIG-4SEC EQUALS AMEMORY +088D
 0442   ALPHAM   EQUALS AMEMORY +108D
 0443   BETAM    EQUALS AMEMORY +110D
 0444   TAU      EQUALS AMEMORY +112D
 0445   GIVENT   EQUALS AMEMORY +112D
 0446   DT/2     EQUALS AMEMORY +114D
 0447   H        EQUALS AMEMORY +116D
 0448   TDEC     EQUALS AMEMORY +118D
 0449   FBRANCH  EQUALS AMEMORY +120D
 0450   HBRANCH  EQUALS AMEMORY +121D
 0451   GMODE    EQUALS AMEMORY +122D
 0452   QREADY   EQUALS AMEMORY +123D
 0453   MEASQ    EQUALS AMEMORY +124D
 0454  2DELTAQ   EQUALS AMEMORY +126D
 0455   MEASMODE EQUALS AMEMORY +128D
 0456   NVCODE   EQUALS AMEMORY +129D
 0457   MIDEXIT  EQUALS AMEMORY +130D
 0458   DSPRTRN  EQUALS AMEMORY +130D
 0459   INCORPEX EQUALS AMEMORY +131D
 0460   STEPEXIT EQUALS AMEMORY +132D
 0461   DIFEQCNT EQUALS AMEMORY +133D
 0462   NORMGAM  EQUALS AMEMORY +133D
 0463   SCALEA   EQUALS AMEMORY +134D
 0464   SCALEB   EQUALS AMEMORY +135D
 0465   SCALDT   EQUALS AMEMORY +136D
 0466   SCALDELT EQUALS AMEMORY +137D
 0467  2SCALER   EQUALS AMEMORY +138D
 0468   YV       EQUALS AMEMORY +139D
 0469  2ZV       EQUALS AMEMORY +145D
 0470   PBODY    ERASE
 0471  4W        ERASE  +071D
R0472  2 THE FOLLOWING ERASABLE REGISTERS ARE USED BY THE  ENTRY AND INITIALIZAT
 0473  9ION JOB OF THE FCS TEST FOR LEM.
 0474  2FCSCNTR  EQUALS AMEMORY +000D
R0475  2  THE FOLLOWING ERASABLE REGISTERS ARE USED BY THE JETSET TASK.
R04751 2(OPTIMUM PRELAUNCH A C USES JETSTEP-JETSTEP +77D FOR RESTART PROOF)
 0476   XJBUF    EQUALS AMEMORY +001D
 0477   YZJBUF   EQUALS AMEMORY +002D
 0478   JFBUF    EQUALS AMEMORY +003D
 0479   FCNTR    EQUALS AMEMORY +004D
 0480   THBUF    EQUALS AMEMORY +005D
 0481   OFFTMBUF EQUALS AMEMORY +006D
 0482   JETSTEP  EQUALS AMEMORY +007D
 0483   NTIMES   EQUALS AMEMORY +008D
 0484   NEXTTIME EQUALS AMEMORY +016D
 0485   JETONTM  EQUALS AMEMORY +024D
 0486   XJETS    EQUALS AMEMORY +032D
 0487   YZJETS   EQUALS AMEMORY +040D
 0488  2JETOFFTM EQUALS AMEMORY +048D
R0489  2   THE FOLLOWING ERASABLE REGISTERS ARE USED BY THE ENGINE ON-OFF TASK.
 0490   ENGSTEP  EQUALS AMEMORY +056D
 0491   CYLTIMES EQUALS AMEMORY +057D
 0492   NEXTCYLT EQUALS AMEMORY +060D
 0493   ONTIME   EQUALS AMEMORY +063D
 0494   OFFTIME  EQUALS AMEMORY +066D
 0495  2OFFTIMER EQUALS AMEMORY +069D
R0496  2  THE FOLLOWING ERASABLE REGISTERS ARE USED BY THE TRIM TASK.
 0497   TRIMSTEP EQUALS AMEMORY +072D
 0498   NUMTIMES EQUALS AMEMORY +073D
 0499   STEPDLYT EQUALS AMEMORY +085D
 0500   TRIMONT  EQUALS AMEMORY +097D
 0501   TRIMOFFT EQUALS AMEMORY +109D
 0502  2TRIMIND  EQUALS AMEMORY +121D
R0503  2  THE FOLLOWING ERASABLE REGISTERS ARE USED BY THE THROTTLE TASK.
 0504   THRTSTEP EQUALS AMEMORY +133D
 0505   DOTIMES  EQUALS AMEMORY +134D
 0506   DELAY    EQUALS AMEMORY +140D
 0507   THR1TIME EQUALS AMEMORY +146D
 0508   THCOMM1  EQUALS AMEMORY +152D
 0509  2THCOMM2  EQUALS AMEMORY +158D
R0510  2 THE FOLLOWING ERASABLE REGISTERS ARE USED BY THE INTERFACE LOOK TASK.
 0511   30BUF1   EQUALS AMEMORY +164D
 0512   30BUF0   EQUALS AMEMORY +168D
 0513   QUITLOOK EQUALS AMEMORY +172D
 0514  2CHCNTR   EQUALS AMEMORY +173D
 0515            SETLOC 2400
R0516  2THE FOLLOWING ERASABLE LOCATIONS ARE UTILIZED BY THE IN-FLIGHT ALIGNMENT
 0517  9 ROUTINES
 0518   XSM      ERASE  +17D
 0519   YSM      =      XSM +6
 0520   ZSM      =      XSM +12D
 0521   XDC      ERASE  +17D
 0522   YDC      =      XDC +6
 0523   ZDC      =      XDC +12D
 0524   XNB      =      XDC
 0525   YNB      =      XDC +6
 0526   ZNB      =      XDC +12D
 0527   STARAD   ERASE  +17D
 0528   STAR     ERASE  +5
 0529   SAC      ERASE  +1
 0530   PAC      ERASE  +1
 0531   OGC      ERASE  +1
 0532   IGC      ERASE  +1
 0533   MGC      ERASE  +1
 0534   ZPRIME   =      22D
 0535   PDA      =      22D
 0536   COSTH    =      16D
 0537   SINTH    =      18D
 0538   THETA    =      20D
 0539  4STARM    =      32D
R0540  2THE FOLLOWING ERASABLE LOCATIONS ARE UTILIZED BY THE SYSTEM TESTS
 0541   AZIMUTH  ERASE  +1
 0542  2LATITUDE ERASE  +1
 0543   EROPTN   ERASE
 0544   ERVECTOR ERASE  +5
 0545   GYROD    ERASE  +5
 0546   LENGTHOT ERASE
 0547   LOSVEC   ERASE  +5
 0548   NBPOS    ERASE
 0549   NDXCTR   ERASE
 0550   PIPANO   ERASE
 0551   PIPINDEX ERASE
 0552   PIPNDX   ERASE  +1
 0553   POSITON  ERASE
 0554   QPLAC    ERASE
 0555   QPLACE   ERASE
 0556   QPLACES  ERASE
 0557   RUN      ERASE
 0558   STOREPL  ERASE
 0559   SOUTHDR  ERASE
 0560   TAZEL1   ERASE  +5
 0561   TEMPTIME ERASE  +1
 0562   TESTNO   ERASE
 0563   TMARK    ERASE  +1
 0564   SHAFTA   ERASE
 0565   TRUNA    ERASE
 0566   ZERONDX  =      ERCOMP +5
 0567  2GENPL    ERASE  +111D
 0568   CDUTIMEI =      GENPL
 0569   CDUTIMEF =      GENPL +2
 0570   CDUDANG  =      GENPL +4
 0571   CDUREADF =      GENPL +5
 0572   CDUREADI =      GENPL +6
 0573  2CDULIMIT =      GENPL +7
 0574   TEMPADD  =      GENPL +4
 0575   TEMP     =      GENPL +5
 0576   NOBITS   =      GENPL +6
 0577  2CHAN     =      GENPL +7
 0578   LOS1     =      GENPL +8D
 0579  2LOS2     =      GENPL +14D
 0580   CALCDIR  EQUALS GENPL +20D
 0581   CDUFLAG  EQUALS GENPL +21D
 0582   GYTOBETQ EQUALS GENPL +22D
 0583   OPTNREG  EQUALS GENPL +23D
 0584   SAVE     EQUALS GENPL +24D      THREE CONSEC LOC
 0585   SFCONST1 EQUALS GENPL +27D
 0586  2TIMER    EQUALS GENPL +28D
 0587   DATAPL   EQUALS GENPL +30D
 0588   RDSP     EQUALS GENPL           FIX LATER   POSSIBLY KEEP1
 0589   MASKREG  EQUALS GENPL +64D
 0590   CDUNDX   EQUALS GENPL +66D
 0591   RESULTCT EQUALS GENPL +67D
 0592  2COUNTPL  EQUALS GENPL +70D
 0593   CDUANG   EQUALS GENPL +71D
 0594  2AINLA    =      GENPL           110 DEC OR 156 OCT LOCATIONS
 0595   WANGO    EQUALS AINLA           VERT ERATE
 0596   WANGI    EQUALS AINLA +2D       HO
 0597   WANGT    EQUALS AINLA +4D       T
 0598   TORQNDX  =      WANGT
 0599   DRIFTT   EQUALS AINLA +6D       EAST AX
 0600   ALX1S    EQUALS AINLA +8D       IN
 0601   CMPX1    EQUALS AINLA +9D       IND
 0602   ALK      EQUALS AINLA +10D      GAINS
 0603   VLAUNS   EQUALS AINLA +22D
 06031  THETAX   =      VLAUNS
 0604   WPLATO   EQUALS AINLA +24D
 0605   INTY     EQUALS AINLA +28D      SOUTH PIP INTE
 0606   ANGZ     EQUALS AINLA +30D      EAST AXIS
 0607   INTZ     EQUALS AINLA +32D      EAST PIP I
 0608   ANGY     EQUALS AINLA +34D      SOUTH
 06081  THETAN   =      INTY
 0609   ANGX     EQUALS AINLA +36D      VE
 0610   DRIFTO   EQUALS AINLA +38D      VERT
 0611   DRIFTI   EQUALS AINLA +40D      SOU
 0612   VLAUN    EQUALS AINLA +44D      LAUNCH
 06121  FILDELV  =      VLAUN
 0613   ACCWD    EQUALS AINLA +46D      LAUN
 06131  INTVEC   =      ACCWD
 0614   POSNV    EQUALS AINLA +52D      LAUNC
 0615   DPIPAY   EQUALS AINLA +54D      SOUTH
 0616   DPIPAZ   EQUALS AINLA +58D      NORTH PIP INCREMENT
 0617   ALTIM    EQUALS AINLA +60D      LENG
 0618   ALTIMS   EQUALS AINLA +61D       INDEX
 0619   ALDK     EQUALS AINLA +62D       TIME CONSTAN
 0620   DELM     EQUALS AINLA +76D
 0621   WPLATI   EQUALS AINLA +84D
 0622   GEOSAVED EQUALS AINLA +86D
 0623   PREMTRXC EQUALS AINLA +87D
 0624   PRELMTRX EQUALS AINLA +88D
 0625   TRANSM1  =      PRELMTRX
 0626   GEOCOMPS EQUALS AINLA +106D
 0627   GTSOPNDZ EQUALS AINLA +107D
 0628   1SECXT   EQUALS AINLA +108D
 0629   GTSWTLST EQUALS AINLA +109D
 0630   ERECTIME EQUALS AINLA +110D
 0631   GEOMTRX  EQUALS AINLA +111D
 0632  8ERCOMP   EQUALS AINLA +129D
 0647   BMEMORY  EQUALS GENPL
 0668   DELVY    EQUALS DELVX +2
 0669   DELVZ    EQUALS DELVX +4
 0832  2         SETLOC 3400
R0833  2         DOWNLINK STORAGE.
 0834   LDATALST ERASE
 0835   DNTMGOTO ERASE
 0836   TMINDEX  ERASE
 0837  2DNTMBUFF ERASE  +21D            SNAPSHOT BUFFER.
R0838  2         RADAR TEST STORAGE.
 0839   RTSTDEX  ERASE
 0840   RTSTMAX  ERASE                  66 FOR HI SPEED, 6 FOR LOW SPEED RR,
A0841                                   AND 18 FOR LOW SPEED LR.
 0842   RTSTBASE ERASE                  USED FOR CYCLIC SAMPLING.
 0843   RTSTLOC  ERASE                  GOES 0(6)RTSTMAX
 0844   RSTKLOC  EQUALS RTSTLOC
 0845   RSAMPDT  ERASE                  PNZ FOR CYCLIC SAMPLING, -1 FOR HI SPEED
A0846                                   INSERT +0 HERE MANUALLY TO TERMINATE TST
 0847   RFAILCNT ERASE
 0848  2RSTACK   ERASE  +71D            BUFFERS FOR RADAR TESTING.
R0849   AGS INITIALIZATION
 0850   AGSBUFF  ERASE  +27D
R0851  2         STORAGE FOR INBIT SCANNER.
 0852   LAST30   ERASE  +2              LAST SAMPLED INBITS.
 0853   MSGCNT   ERASE
L      2INPUT/OUTPUT CHANNELS
 0001   HISCALAR EQUALS 3
 0002   LOSCALAR EQUALS 4
 0003   OUT0     EQUALS 10
 0004   DSALMOUT EQUALS 11
 0005   CHAN12   EQUALS 12
 0006   CHAN13   EQUALS 13
 0007   CHAN14   EQUALS 14
 0008   MNKEYIN  EQUALS 15
 0009   NAVKEYIN EQUALS 16
 0010   CHAN33   EQUALS 33
 0011   DNTM1    EQUALS 34
 0012   DNTM2    EQUALS 35
R0013   END OF CHANNEL ASSIGNMENTS
L      2INTERRUPT LEAD INS
 0001  2         SETLOC 4000
 0002            INHINT                 GO
 0003            CAF    GOBB
 0004            XCH    BBANK
 0005  2         TCF    GOPROG
 0006            DXCH   ARUPT           HERE ON A T6 RUPT
 0007            EXTEND
 0008            QXCH   QRUPT
 0009  2         TCF    DOT6RUPT        DOT6RUPT IS IN FIX-FIXED.(INTR-BANK COM)
 0010            DXCH   ARUPT           T5RUPT
 0011            EXTEND
 0012            DCA    T5LOC           T5LOC EQUALS T5ADR
 0013  2         DTCB
 0014            DXCH   ARUPT           T3RUPT
 0015            CAF    T3RPTBB
 0016            XCH    BBANK
 0017  2         TCF    T3RUPT
 0018            DXCH   ARUPT           T4RUPT
 0019            CAF    ZERO
 0020            TCF    T4RUPT
 0021            EBANK= M11
 0022  2T4RPTBB  BBCON  T4RUPTA
 0023            DXCH   ARUPT           KEYRUPT1
 0024            CAF    KEYRPTBB
 0025            XCH    BBANK
 0026  2         TCF    KEYRUPT1
 0027            DXCH   ARUPT           KEYRUPT2
 0028            CAF    MKRUPTBB
 0029            XCH    BBANK
 0030  2         TCF    MARKRUPT
 0031            DXCH   ARUPT           UPRUPT
 0032            CAF    UPRPTBB
 0033            XCH    BBANK
 0034  2         TCF    UPRUPT
 0035            DXCH   ARUPT           DOWNRUPT
 0036            CAF    DWNRPTBB
 0037            XCH    BBANK
 0038  2         TCF    DODOWNTM
 0039            DXCH   ARUPT           RADAR RUPT
 0040            CAF    RDRPTBB
 0041            XCH    BBANK
 0042  2         TCF    RADAREAD
R00421  TRAPS 31B AND 32 SHOULD NEVER BE SET. THEREFORE-
R00422  RUPT 10 WILL ALWAYS REFER TO THE HAND CONTROLLER LPD OR MINIMUM IMPULSE
R00423 2USE. SEE GEORGE CHERRY FOR RATIONALE REGARDING THE AFORESAID.
 0043            DXCH   ARUPT           RUPT 10 USED FOR RHC MINIMP MODE ONLY.
 0044            CAF    TWO
 0045            TS     DELAYCTR
 0046  2         TCF    NOQRSM
 0047            EBANK= LST1            RESTART USES E0, E3
 0048  2GOBB     BBCON  GOPROG
 0049            EBANK= TIME1
 0050  2T6RPTBB  BBCON  RESUME          ***FIX LATER***
 0051            EBANK= LST1
 0052  2T3RPTBB  BBCON  T3RUPT
 0053            EBANK= KEYTEMP1
 0054  2KEYRPTBB BBCON  KEYRUPT1
 0055            EBANK= AOTAZ
 0056  2MKRUPTBB BBCON  MARKRUPT
 0057  2UPRPTBB  =      KEYRPTBB
 0058            EBANK= DNTMBUFF
 0059  2DWNRPTBB BBCON  DODOWNTM
 0060            EBANK= RADMODES
 0061  2RDRPTBB  BBCON  RADAREAD
 0062   ENDINTFF EQUALS
L      2INTER-BANK COMMUNICATION
R0001            THE FOLLOWING ROUTINE CAN BE USED TO CALL A SUBROUTINE IN ANOTH
 0002  9ER BANK. IN THE BANKCALL VERSION, THE
R0003  2CADR OF THE SUBROUTINE IMMEDIATELY FOLLOWS THE  TC BANKCALL  INSTRUCTION
 0004  9, WITH C(A) AND C(L) PRESERVED.
 0005  2         SETLOC ENDINTFF
 0006   BANKCALL DXCH   BUF2            SAVE INCOMING A,L.
 0007            INDEX  Q               PICK UP CADR.
 0008            CA     0
 0009  2         INCR   Q               SO WE RETURN TO THE LOC. AFTER THE CADR.
R0010  2         SWCALL IS IDENTICAL TO BANKCALL, EXCEPT THAT THE CADR ARRIVES I
 0011  9N A.
 0012   SWCALL   TS     L
 0013            LXCH   FBANK           SWITCH BANKS, SAVING RETURN.
 0014            MASK   LOW10           GET SUB-ADDRESS OF CADR.
 0015            XCH    Q               A,L NOW CONTAINS DP RETURN.
 0016            DXCH   BUF2            RESTORING INPUTS IF THIS IS A BANKCALL.
 0017            INDEX  Q
 0018  2         TC     10000           SETTING Q TO SWRETURN.
 0019   SWRETURN XCH    BUF2 +1         COMES HERE TO RETURN TO CALLER. C(A,L)
 0020            XCH    FBANK           ARE PRESERVED FOR RETURN.
 0021            XCH    BUF2 +1
 0022  4         TC     BUF2
R0023            THE FOLLOWING ROUTINE CAN BE USED AS A UNILATERAL JUMP WITH C(A
 0024  9,L) PRESERVED AND THE CADR IMMEDIATELY
R0025  2FOLLOWING THE TC POSTJUMP INSTRUCTION.
 0026   POSTJUMP XCH    Q               SAVE INCOMING C(A).
 0027            INDEX  A               GET CADR.
 0028  2         CA     0
R0029  2         BANKJUMP IS THE SAME AS POSTJUMP, EXCEPT THAT THE CADR ARRIVES
 0030  9IN A.
 0031   BANKJUMP TS     FBANK
 0032            MASK   LOW10
 0033            XCH    Q               RESTORING INPUT C(A) IF THIS WAS A
 0034            INDEX  Q               POSTJUMP.
 0035            TCF    10000
P0036  2         THE FOLLOWING ROUTINE GETS THE RETURN CADR SAVED BY SWCALL OR B
 0037  9ANKCALL AND LEAVES IT IN A.
 0038   MAKECADR CAF    LOW10
 0039            MASK   BUF2
 0040            AD     BUF2 +1
 0041  4         TC     Q
R0042            THE FOLLOWING ROUTINE OBTAINS THE TWO WORDS BEGINNING AT THE AD
 0043  9DRESS ARRIVING IN A, AND LEAVES THEM IN
R0044  2A,L.
 0045   DATACALL TS     L
 0046            LXCH   FBANK
 0047            LXCH   MPTEMP          SAVE FORMER BANK.
 0048            MASK   LOW10
 0049            EXTEND
 0050            INDEX  A
 0051  2         DCA    10000
 0052            XCH    MPTEMP
 0053            TS     FBANK           RESTORE FBANK.
 0054            CA     MPTEMP
 0055  2         TC     Q
P0056            THE FOLLOWING SUBROUTINES PROVIDE TO THE BASIC PROGRAMMER ENTRY
 0057  9 INTO AND RETURN FROM ANY INTERPRETIVE
R0058  2CODING WHICH DOES NOT USE THE ENTERING CONTENTS OF Q AND WHICH RETURNS V
 0059  9IA DANZIG. C(A) AND C(L) ARE SAVED.
R0060   USER'S RESPONSIBILITY TO FILL IN ADVANCE THE APPROPRIATE OPERAND AND ADD
 0061  9RESS REGISTERS USED BY THE
R0062   INTERPRETIVE CODING SUCH AS MPAC, BUF, ADDRWD, ETC.; AND TO CONFIRM THAT
 0063  9 THE INTERPRETIVE CODING MEETS THE
R0064  2ABOVE RESTRICTIONS WITH RESPECT TO Q AND DANZIG.
R0065  2USEPRET AND USPRCADR MUST NOT BE USED IN INTERRUPT.
R0066   1. USEPRET ACCESSES INTERPRETIVE CODING WHICH CAN BE ENTERED WITHOUT CHA
 0067  9NGING FBANK.
R0068  2   THE CALLING SEQUENCE IS AS FOLLOWS:
A0069   L        TC     USEPRET
A0070   L+1      TC,TCF INTPRETX        TC,TCF MEANS TC OR TCF
A0071                                   INTPRETX IS THE INTERPRETIVE CODING
A0072  2                                RETURN IS TO L+2
R0073  22. USPRCADR ACCESSES INTERPRETIVE CODING IN OTHER THAN THE USER'S FBANK.
 0074  9 THE CALLING SEQUENCE IS AS FOLLOWS:
A0075   L        TC     USPRCADR
A0076   L+1      CADR   INTPRETX        INTPRETX IS THE INTERPRETIVE CODING
A0077  2                                RETURN IS TO L+2
 0078   USEPRET  XCH    Q               FETCH Q, SAVING A
 0079            TS     LOC             L+1 TO LOC
 0080            CA     FBANK
 0081            TS     BANKSET         USERS BANK TO BANKSET
 0082            CA     BIT8
 0083            TS     EDOP            EXIT INSTRUCTION TO EDOP
 0084            CA     Q               RETRIEVE ORIGINAL A
 0085  2         TC     LOC
 0086   USPRCADR TS     LOC             SAVE A
 0087            CA     BIT8
 0088            TS     EDOP            EXIT INSTRUCTION TO EDOP
 0089            CA     FBANK
 0090            TS     BANKSET         USERS BANK TO BANKSET
 0091            INDEX  Q
 0092            CA     0
 0093            TS     FBANK           INTERPRETIVE BANK TO FBANK
 0094            MASK   LOW10           YIELDS INTERPRETIVE RELATIVE ADDRESS
 0095            XCH    Q               INTERPRETIVE ADDRESS TO Q, FETCHING L+1
 0096            XCH    LOC             L+1 TO LOC, RETRIEVING ORIGINAL A
 0097            INDEX  Q
 0098            TCF    10000
P0099  2         THE FOLLOWING ROUTINES ARE IDENTICAL TO BANKCALL AND SWCALL EXC
 0100  9EPT THAT THEY ARE USED IN INTERRUPT.
 0101   IBNKCALL DXCH   RUPTREG3        USES RUPTREG3,4 FOR DP RETURN ADDRESS.
 0102            INDEX  Q
 0103            CAF    0
 0104  2         INCR   Q
 0105   ISWCALL  TS     L
 0106            LXCH   FBANK
 0107            MASK   LOW10
 0108            XCH    Q
 0109            DXCH   RUPTREG3
 0110            INDEX  Q
 0111  2         TC     10000
 0112   ISWRETRN XCH    RUPTREG4
 0113            XCH    FBANK
 0114            XCH    RUPTREG4
 0115            TC     RUPTREG3
P0116  4T6-RUPT PROGRAMS.
R0117  2ENTER HERE AFTER A T6-RUPT.DETERMINE IF IT IS A GENUINE RUPT.
 0118   DOT6RUPT TC     T6JOBCHK
 0119  2         TCF    RESUME
R0120   T6JOBCHK DETERMINES IF T6 = -0 ( A T6 RUPT HAS OCCURRED ) OR IF T6
R0121      EQUALS +0 ( T6 NOT COUNTING DOWN ) OR =SOME POS.OR NEG. NUMBER ( T6
R0122  2   BEING DECREMENTED AND NO RUPT IS NEEDED ).
 0123   T6JOBCHK CCS    TIME6
 0124            TC     Q
 0125            TC     Q
 0126            TC     Q
R0127   T6JOB EXECUTES A JET STATE CHANGE AND SETS UP ANY ADDITIONAL T6 RUPTS
R0128  2   WHICH MIGHT BE NECESSARY.
 0129   T6JOB    CA     ZERO
 0130            XCH    T6NEXT +1
 0131            XCH    T6NEXT
 0132            TS     TIME6
 0133            EXTEND
 0134            BZF    T6ZERO
 0135            CA     BIT15
 0136            EXTEND
 0137            WOR    13
 0138            CA     ZERO
 0139            XCH    T6NEXTJT +2
 0140            XCH    T6NEXTJT +1
 0141            XCH    T6NEXTJT
 0142   WRITEJTS EXTEND
 0143            BZMF   WRITEQR
 0144            EXTEND
 0145            WRITE  6
 0146            TC     Q
 0147   WRITEQR  EXTEND
 0148            WRITE  5
 0149            TC     Q
 0150   T6ZERO   CA     T6NEXTJT
 0151            TCF    WRITEJTS
 0152   ENDIBNKF EQUALS
L      2LIST-PROCESSING INTERPRETER
R0001  2SECTION 1  DISPATCHER
R0002            ENTRY TO THE INTERPRETER. INTPRET SETS LOC TO THE FIRST  INSTRU
 0003  9CTION, BANKSET TO THE FBANK OF THE
R0004   OBJECT INTERPRETIVE PROGRAM, AND INTBIT15 TO THE BIT15 CONTENTS OF FBANK
 0005  9. INTERPRETIVE PROGRAMS MAY BE IN
R0006   VIRTUALLY ALL BANKS PRESENT UNDER ANY SUPER-BANK SETTING, WITH THE RESTR
 0007  9ICTION THAT PROGRAMS IN HIGH BANKS
R0008   (BIT15 OF FBANK = 1) DO NOT REFER TO LOWBANKS, AND VICE-VERSA. THE INTER
 0009  9PRETER DOES NOT SWITCH SUPER-BANK,
R0010  4NOR DOES IT SWITCH EBANKS. MOST EBANK SWITCHING IS DONE BY THE EXECUTIVE
 0011  9 PROGRAM.
 0012  2         SETLOC 6000
 0013   INTPRET  EXTEND                 SET LOC TO THE WORD FOLLOWING THE TC.
 0014  2         QXCH   LOC
 0015    +2      CA     FBANK           INTERPRETIVE BRANCHES FINISH HERE.
 0016            TS     BANKSET
 0017            MASK   BIT15           GET 15TH BIT FOR INDEXABLE ADDRESSES.
 0018            TS     INTBIT15
 0019            AD     LOW10           THIS VERSION IS USED IN PROCESSING
 0020  2         TS     INTB15+         INDEXABLE FIXED-BANK ADDRESSES.
 0021  4         TCF    NEWOPS          PICK UP OP CODE PAIR AND BEGIN.
 0022   INTRSM   LXCH   BBANK           RESUME SUSPENDED INTERPRETIVE JOB
 0023            TCF    INTPRET +3      (ACTUALLY PART OF THE EXECUTIVE).
P0024  2         AT THE END OF MOST INSTRUCTIONS, CONTROL IS GIVEN TO DANZIG TO
 0025  9DISPATCH THE NEXT OPERATION.
 0026  2NEWMODE  TS     MODE            PROLOGUE FOR MODE-CHANGING INSTRUCTIONS.
 0027   DANZIG   CA     BANKSET         SET FBANK BEFORE TESTING NEWJOB SO THAT
 0028  2         TS     FBANK           BBANK MAY BE SAVED DIRECTLY BY CHANJOB.
 0029   NOIBNKSW CCS    EDOP            SEE IF AN ORDER CODE IS LEFT OVER FROM
 0030            TCF    OPJUMP          THE LAST PAIR RETRIEVED. IF SO, EXECUTE.
A0031  2                                EDOP IS SET TO ZERO ON ITS RE-EDITING.
 0032            CCS    NEWJOB          SEE IF A JOB OF HIGHER PRIORITY IS
 0033  2         TCF    CHANG2          PRESENT, AND IF SO, CHANGE JOBS.
 0034            INCR   LOC             ADVANCE THE LOCATION COUNTER.
 0035   NEWOPS   INDEX  LOC             ENTRY TO BEGIN BY PICKING OP CODE PAIR.
 0036            CA     0               MAY BE AN OPCODE PAIR OR A STORE CODE.
 0037            CCS    A               TEST SIGN AND GET DABS(A).
 0038  2         TCF    DOSTORE         PROCESS STORE CODE.
 0039  2LOW7     OCT    177
 0040            TS     EDOP            OP CODE PAIR. LEAVE THE OTHER IN EDOP
 0041  2         MASK   LOW7            WHERE  CCS EDOP  WILL HONOR IT NEXT.
 0042   OPJUMP   TS     CYR             LOWWD ENTERS HERE IF A RIGHT-HAND OP
 0043            CCS    CYR             CODE IS TO BE PROCESSED. TEST PREFICES.
 0044  2         TCF    OPJUMP2         TEST SECOND PREFIX BIT.
 0045            TCF    EXIT            +0 OP CODE IS EXIT.
P0046  2         PROCESS ADDRESSES WHICH MAY BE DIRECT, INDEXED, OR REFERENCE TH
 0047  9E PUSHDOWN LIST.
 0048   ADDRESS  MASK   BIT1            SEE IF ADDRESS IS INDEXED. CYR CONTAINED
 0049            CCS    A               400XX, SO BIT 1 IS NOW AS IT WAS IN CYR.
 0050  2         TCF    INDEX           FORM INDEXED ADDRESS.
 0051   DIRADRES INDEX  LOC             LOOK AHEAD TO NEXT WORD TO SEE IF
 0052   OCT40001 CS     1               ADDRESS IS GIVEN.
 0053            CCS    A
 0054  2         TCF    PUSHUP          IF NOT.
 0055  2NEG4     DEC    -4
 0056            INCR   LOC             IF SO, TO SHOW WE PICKED UP A WORD.
 0057            TS     ADDRWD
P0058            FINAL DIGESTION OF DIRECT ADDRESSES OF OP CODES WITH 01 PREFIX
 0059  9IS DONE HERE. IN EACH CASE, THE
R0060   REQUIRED 12 BIT SUB-ADDRESS IS LEFT IN ADDRWD, WITH ANY REQUIRED BANK SW
 0061  9ITCHING DONE (F ONLY). ADDRESSES LESS
R0062  4THAN 45D ARE TAKEN TO BE RELATIVE TO THE WORK AREA. THE OP CODE IS NOW I
 0063  9N BITS 1-5 OF CYR WITH BIT 14 = 1.
 0064            AD     -ENDVAC         SEE IF ADDRESS RELATIVE TO WORK AREA.
 0065            CCS    A
 0066            AD     -ENDERAS        IF NOT, SEE IF IN GENERAL ERASABLE.
 0067  2         TCF    IERASTST
 0068   NETZERO  CA     FIXLOC          IF SO, LEAVE THE MODIFIED ADDRESS IN
 0069            ADS    ADDRWD          ADDRWD AND DISPATCH.
 0070    +2      INDEX  CYR             THIS INDEX MAKES THE NEXT INSTRUCTION
 0071  2         7      INDJUMP -1      TCF INDJUMP + OP, EDITING CYR.
 0072   IERASTST EXTEND
 0073  2         BZMF   NETZERO +2      GENERAL ERASABLE - DISPATCH IMMEDIATELY.
 0074   FIXEDADR AD     INTB15+         FIXED BANK ADDRESS. RESTORE AND ADD B15.
 0075    +1      TS     FBANK           SWITCH BANKS AND LEAVE SUB-ADDRESS IN
 0076            MASK   LOW10           ADDRWD FOR OPERAND RETRIEVAL.
 0077            AD     2K
 0078            TS     ADDRWD
 0079            INDEX  CYR
 0080            7      INDJUMP -1
P0081            THE FOLLOWING ROUTINE PROCESSES INTERPRETIVE INDEXED ADDRESSES.
 0082  9 AN INTERPRETER INDEX REGISTER MAY
R0083   CONTAIN THE ADDRESS OF ANY ERASABLE REGISTER (0-42 BEING RELATIVE TO THE
 0084  9 VAC AREA) OR ANY INTERPRETIVE PROGRAM
R0085  2BANK, OR ANY INTEGER IN THAT RANGE.
 0086   DODLOAD* CAF    DLOAD*          STODL* COMES HERE TO PROCESS LOAD ADR.
 0087  2         TS     CYR             (STOVL* ENTERS HERE).
 0088   INDEX    CA     FIXLOC          SET UP INDEX LOCATION.
 0089            TS     INDEXLOC
 0090            INCR   LOC             (ADDRESS ALWAYS GIVEN).
 0091            INDEX  LOC
 0092            CS     0
 0093            CCS    A               INDEX 2 IF ADDRESS STORED COMPLEMENTED.
 0094            INCR   INDEXLOC
 0095  2         NOOP
 0096            TS     ADDRWD          14 BIT ADDRESS TO ADDRWD.
 0097            MASK   BANKMASK        IF ADDRESS GREATER THAN 1K, ADD INTBIT15
 0098            EXTEND
 0099            BZF    INDEX2
 0100            CA     INTBIT15
 0101  2         ADS    ADDRWD
 0102   INDEX2   INDEX  INDEXLOC
 0103            CS     X1
 0104  2         ADS    ADDRWD          DO AUGMENT, IGNORING AND CORRECTING OVF.
 0105            MASK   HIGH9           SEE IF ADDRESS IS IN WORK AREA.
 0106            EXTEND
 0107            BZF    INDWORK
 0108            MASK   BANKMASK        SEE IF IN FIXED BANK.
 0109            EXTEND
 0110  2         BZF    INDERASE
 0111            CA     ADDRWD          IN FIXED - SWITCH BANKS AND CREATE
 0112            TS     FBANK           SUB-ADDRESS.
 0113            MASK   LOW10
 0114            AD     2K
 0115            TS     ADDRWD
 0116            INDEX  CYR
 0117  2         3      INDJUMP -1
 0118   INDWORK  CA     FIXLOC          MAKE ADDRWD RELATIVE TO WORK AREA.
 0119  2         ADS    ADDRWD
 0120   INDERASE INDEX  CYR
 0121            3      INDJUMP -1
P0122            PUSH-UP ROUTINES. WHEN NO OPERAND ADDRESS IS GIVEN, THE APPROPR
 0123  9IATE OPERAND IS TAKEN FROM THE PUSH-DOWN
R0124   LIST. IN MOST CASES THE MODE OF THE RESULT (VECTOR OR SCALAR) OF THE LAS
 0125  9T ARITHMETIC OPERATION PERFORMED
R0126   IS THE SAME AS THE TYPE OF OPERAND DESIRED (ALL ADD/SUBTRACT ETC.). EXCE
 0127  9PTIONS TO THIS GENERAL RULE ARE LISTED
R0128  2BELOW (NOTE THAT IN EVERY CASE THE MODE REGISTER IS LEFT INTACT):
R0129            1.  VXSC AND V/SC WANT THE OPPOSITE TYPE OF OPERAND, E.G., IF T
 0130  9HE LAST OPERATION YIELDED A VECTOR
R0131  2RESULT, VXSC WANTS A SCALAR.
R0132            2.  THE LOAD CODES SHOULD LOAD THE ACCUMULATOR INDEPENDENT OF T
 0133  9HE RESULT OF THE LAST OPERATION. THIS
R0134  2INCLUDES VLOAD, DLOAD, TLOAD, PDDL, AND PDVL (NO PUSHUP WITH SLOAD).
R0135            3.  SOME ARITHMETIC OPERATIONS REQUIRE A STANDARD TYPE OF OPERA
 0136  9ND REGARDLESS OF THE PREVIOUS OPERATION.
R0137  2THIS INCLUDES SIGN WANTING DP AND TAD REQUIRING TP.
 0138   PUSHUP   CAF    OCT23           IF THE LOW 5 BITS OF CYR ARE LESS THAN
 0139            MASK   CYR             20, THIS OP REQUIRES SPECIAL ATTENTION.
 0140            AD     -OCT10          (NO -0).
 0141            CCS    A
 0142  2         TCF    REGUP           FOR ALL CODES GREATER THAN OCT 7.
 0143  2-OCT10   OCT    -10
 0144            AD     NEG4            WE NOW HAVE 7 - OP CODE(MOD4). SEE IF
 0145            CCS    A               THE OP CODE (MOD4) IS THREE (REVERSE).
 0146            INDEX  A               NO - THE MODE IS DEFINITE. PICK UP THE
 0147            CS     NO.WDS
 0148  2         TCF    REGUP +2
 0149            INDEX  MODE            FOR VXSC AND V/SC WE WANT THE REQUIRED
 0150            CS     REVCNT          PUSHLOC DECREMENT WITHOUT CHANGING THE
 0151  2         TCF    REGUP +2        MODE AT THIS TIME.
 0152   REGUP    INDEX  MODE            MOST ALL OP CODES PUSHUP HERE.
 0153            CS     NO.WDS
 0154    +2      ADS    PUSHLOC
 0155            TS     ADDRWD
 0156            INDEX  CYR
 0157  2         7      INDJUMP -1      (THE INDEX MAKES THIS A TCF.)
 0158            OCT    2               REVERSE PUSHUP DECREMENT. VECTOR TAKES 2
 0159   REVCNT   OCT    6               WORDS, SCALAR TAKES 6.
 0160            OCT    6
 0161   NO.WDS   OCT    2               CONVENTIONAL DECREMENT IS 6 WORDS VECTOR
 0162            OCT    3               2 IN DP, AND 3 IN TP.
 0163            OCT    6
P0164  2         TEST THE SECOND PREFIX BIT TO SEE IF THIS IS A MISCELLANEOUS OR
 0165  9 A UNARY/SHORT SHIFT OPERATION.
 0166   OPJUMP2  CCS    CYR             TEST SECOND PREFIX BIT.
 0167  2         TCF    OPJUMP3         TEST THIRD BIT TO SEE IF UNARY OR SHIFT.
 0168  2-ENDVAC  DEC    -45
R0169            THE FOLLOWING ROUTINE PROCESSES ADDRESSES OF SUFFIX CLASS 10. T
 0170  9HEY ARE BASICALLY WORK AREA ADDRESSES
R0171   IN THE RANGE 0 - 52, ERASABLE ADRES CONSTANTS FROM 100 - 1777, AND FCADR
 0172  9S ABOVE THAT. ALL 15 BITS ARE AVAILABLE
R0173  2IN CONTRAST TO SUFFIX 1, IN WHICH ONLY THE LOW ORDER 14 ARE AVAILABLE.
 0174   15BITADR INCR   LOC             (ENTRY HERE FROM STCALL).
 0175            INDEX  LOC             PICK UP ADDRESS WORD.
 0176            CA     0
 0177            TS     POLISH          THE ABSOLUTE ADDRESS WILL BE LEFT IN
 0178            TS     ADDRWD          POLISH WITH AN ERASABLE SUBADDRESS IN
A0179                                   ADDRWD.
 0180            MASK   HIGH9           SEE IF RELATIVE TO THE WORK AREA.
 0181            CCS    A
 0182            TCF    +2
 0183  2         TCF    RELWORK         ONLY IF ZERO.
 0184            CAF    LOW7+2K         THESE INSTRUCTIONS ARE IN BANK 1.
 0185            TS     FBANK
 0186            MASK   CYR
 0187            INDEX  A
 0188  2         TCF    MISCJUMP
 0189   RELWORK  CA     FIXLOC          MAKE ADDRWD RELATIVE TO FIXLOC, LEAVING
 0190            ADS    ADDRWD          POLISH ABSOLUTE IN CASE THIS WAS AN
 0191            CAF    LOW7+2K         AXT, ETC.
 0192            TS     FBANK
 0193            MASK   CYR
 0194            INDEX  A
 0195            TCF    MISCJUMP
P0196  2         COMPLETE THE DISPATCHING OF UNARY AND SHORT SHIFT OPERATIONS.
 0197   OPJUMP3  TS     FBANK           CALL IN BANK 0 (BITS 11-15 OF A ARE 0.)
 0198            CCS    CYR             TEST THIRD PREFIX BIT.
 0199            INDEX  A               THE DECREMENTED UNARY CODE IS IN BITS
 0200  2         TCF    UNAJUMP         1-4 OF A (ZERO, EXIT, HAS BEEN DETECTED)
 0201            CCS    MODE            ITS A SHORT SHIFT CODE. SEE IF PRESENT
 0202            TCF    SHORTT          SCALAR OR VECTOR.
 0203            TCF    SHORTT
 0204  4         TCF    SHORTV          CALLS THE APPROPRIATE ROUTINE.
 0205   OCT23    OCT    23              MASK USED BY PUSH-UP ROUTINE.
 0206   LOW7+2K  OCT    2177            OP CODE MASK + BANK 1 FBANK SETTING.
 0207   HIGH9    OCT    77700
 0208   BANKMASK OCT    76000           FBANK MASK.
 0209   FBANKMSK EQUALS BANKMASK
 0210   B11T14   OCT    36000           USED IN PROCESSING STORE CODES.
 0211   -ENDERAS DEC    -977
P0212  2         THE FOLLOWING IS THE JUMP TABLE FOR OP CODES WHICH MAY HAVE IND
 0213  9EXABLE ADDRESSES OR MAY PUSH UP.
 0214   INDJUMP  TCF    VLOAD           00 - LOAD MPAC WITH A VECTOR.
 0215            TCF    TAD             01 - TRIPLE PRECISION ADD TO MPAC.
 0216            TCF    SIGN            02 - COMPLEMENT MPAC (V OR SC) IF X NEG.
 0217            TCF    VXSC            03 - VECTOR TIMES SCALAR.
 0218            TCF    CGOTO           04 - COMPUTED GO TO.
 0219            TCF    TLOAD           05 - LOAD MPAC WITH TRIPLE PRECISION.
 0220            TCF    DLOAD           06 - LOAD MPAC WITH A DP SCALAR.
 0221  2         TCF    V/SC            07 - VECTOR DIVIDED BY SCALAR.
 0222            TCF    SLOAD           10 - LOAD MPAC IN SINGLE PRECISION.
 0223            TCF    SSP             11 - SET SINGLE PRECISION INTO X.
 0224            TCF    PDDL            12 - PUSH DOWN MPAC AND RE-LOAD IN DP.
 0225            TCF    MXV             13 - MATRIX POST-MULTIPLIED BY VECTOR.
 0226            TCF    PDVL            14 - PUSH DOWN AND VECTOR LOAD.
 0227            TCF    CCALL           15 - COMPUTED CALL.
 0228            TCF    VXM             16 - MATRIX PRE-MULTIPLIED BY VECTOR.
 0229  2         TCF    TSLC            17 - NORMALIZE MPAC (SCALAR ONLY).
 0230            TCF    DMPR            20 - DP MULTIPLY AND ROUND.
 0231            TCF    DDV             21 - DP DIVIDE BY.
 0232            TCF    BDDV            22 - DP DIVIDE INTO.
 0233            TCF    GSHIFT          23 - GENERAL SHIFT INSTRUCTION.
 0234            TCF    VAD             24 - VECTOR ADD.
 0235            TCF    VSU             25 - VECTOR SUBTRACT.
 0236            TCF    BVSU            26 - VECTOR SUBTRACT FROM.
 0237  2         TCF    DOT             27 - VECTOR DOT PRODUCT.
 0238            TCF    VXV             30 - VECTOR CROSS PRODUCT.
 0239            TCF    VPROJ           31 - VECTOR PROJECTION.
 0240            TCF    DSU             32 - DP SUBTRACT.
 0241            TCF    BDSU            33 - DP SUBTRACT FROM.
 0242            TCF    DAD             34 - DP ADD.
 0243            TCF                    35 - AVAILABLE
 0244            TCF    DMP1            36 - DP MULTIPLY.
 0245  2         TCF    SETPD           37 - SET PUSH DOWN POINTER (DIRECT ONLY)
R0246   CODES 10 AND 14 MUST NOT PUSH UP. CODE 04 MAY BE USED FOR VECTOR DECLARE
 0247  9 BEFORE PUSHUP IF DESIRED.
P0248  2         THE FOLLOWING JUMP TABLE APPLIES TO INDEX, BRANCH, AND MISCELLA
 0249  9NEOUS INSTRUCTIONS.
 0250   MISCJUMP TCF    AXT             00 - ADDRESS TO INDEX TRUE.
 0251            TCF    AXC             01 - ADDRESS TO INDEX COMPLEMENTED.
 0252            TCF    LXA             02 - LOAD INDEX FROM ERASABLE.
 0253            TCF    LXC             03 - LOAD INDEX FROM COMPLEMENT OF ERAS.
 0254            TCF    SXA             04 - STORE INDEX IN ERASABLE.
 0255            TCF    XCHX            05 - EXCHANGE INDEX WITH ERASABLE.
 0256            TCF    INCR            06 - INCREMENT INDEX REGISTER.
 0257  2         TCF    TIX             07 - TRANSFER ON INDEX.
 0258            TCF    XAD             10 - INDEX REGISTER ADD FROM ERASABLE.
 0259            TCF    XSU             11 - INDEX SUBTRACT FROM ERASABLE.
 0260            TCF    BZE/GOTO        12 - BRANCH ZERO AND GOTO.
 0261            TCF    BPL/BMN         13 - BRANCH PLUS AND BRANCH MINUS.
 0262            TCF    CALL/ITA        14 - CALL AND STORE QPRET.
 0263            TCF    RTB/BHIZ        15 - RETURN TO BASIC AND BRANCH HI ZERO.
 0264            TCF    SW/             16 - SWITCH INSTRUCTIONS AND AVAILABLE.
 0265            TCF    BOV(B)          17 - BRANCH ON OVERFLOW TO BASIC OR INT.
P0266  2         THE FOLLOWING JUMP TABLE APPIES TO UNARY INSTRUCTIONS.
A0267                                   00 - EXIT - DETECTED EARLIER.
 0268   UNAJUMP  TCF    SQRT            01 - SQUARE ROOT.
 0269            TCF    SINE            02 - SIN.
 0270            TCF    COSINE          03 - COS.
 0271            TCF    ARCSIN          04 - ARC SIN.
 0272            TCF    ARCCOS          05 - ARC COS.
 0273            TCF    DSQ             06 - DP SQUARE.
 0274  2         TCF    ROUND           07 - ROUND TO DP.
 0275            TCF    COMP            10 - COMPLEMENT VECTOR OR SCALAR.
 0276            TCF    VDEF            11 - VECTOR DEFINE.
 0277            TCF    UNIT            12 - UNIT VECTOR.
 0278            TCF    ABVALABS        13 - LENGTH OF VECTOR OR MAG OF SCALAR.
 0279            TCF    VSQ             14 - SQUARE OF LENGTH OF VECTOR.
 0280            TCF    STADR           15 - PUSH UP ON STORE CODE.
 0281            TCF    RVQ             16 - RETURN VIA QPRET.
 0282            TCF    PUSH            17 - PUSH MPAC DOWN.
P0283  2SECTION 2  LOAD AND STORE PACKAGE.
R0284            A SET OF SIXTEEN STORE CODES ARE PROVIDED AS THE PRIMARY METHOD
 0285  9 OF STORING THE MULTI-PURPOSE
R0286   ACCUMULATOR (MPAC). IF IN THE DANZIG SECTION LOC REFERS TO AN ALGEBRAICA
 0287  9LLY POSITIVE WORD, IT IS TAKEN AS A
R0288   STORE CODE WITH A CORRESPONDING ERASABLE ADDRESS. MOST OF THESE CODES AR
 0289  9E TWO ADDRESS, SPECIFYING THAT THE WORD
R0290  2FOLLOWING THE STORE CODE IS TO BE USED AS AN ADDRESS FROM WHICH TO RE-LO
 0291  9AD MPAC. FOUR OPTIONS ARE AVAILABLE:
R0292            1. STORE               STORE MPAC. THE E ADDRESS MAY BE INDEXED
 0293  9.
R0294            2. STODL               STORE MPAC AND RE-LOAD IT IN DP WITH THE
 0295  9 NEXT ADDRESS (EITHER MAY BE INDEXED).
R0296            3. STOVL               STORE MPAC AND RE-LOAD A VECTOR (AS ABOV
 0297  9E).
R0298  2         4. STCALL              STORE AND DO A CALL (BOTH ADDRESSES MUST
 0299  9 BE DIRECT HERE).
R0300  4         STODL AND STOVL WILL TAKE FROM THE PUSH-DOWN LIST IF NO LOAD AD
 0301  9DRESS IS GIVEN.
 0302   STADR    CA     BANKSET         THE STADR CODE (PUSHUP UP ON STORE
 0303            TS     FBANK           ADDRESS) ENTERS HERE.
 0304            INCR   LOC
 0305            INDEX  LOC             THE STORE CODE WAS STORE COMPLEMENTED TO
 0306            CS     0               MAKE IT LOOK LIKE AN OPCODE PAIR.
 0307            AD     NEGONE          (YUL CANT REMOVE 1 BECAUSE OF EARLY CCS)
 0308   DOSTORE  TS     ADDRWD
 0309            MASK   LOW10           ENTRY FROM DISPATCHER. SAVE THE ERASABLE
 0310            XCH    ADDRWD          ADDRESS AND JUMP ON THE STORE CODE NO.
 0311            MASK   B11T14
 0312            EXTEND
 0313            MP     BIT6            EACH TRANSFER VECTOR ENTRY IS TWO WORDS.
 0314            INDEX  A
 0315            TCF    STORJUMP
P0316            STORE CODE JUMP TABLE. CALLS THE APPROPRIATE STORING ROUTINE AN
 0317  9D EXITS TO DANZIG OR TO ADDRESS WITH
R0318  2A SUPPLIED OPERATION CODE.
 0319   STORJUMP TC     STORE           STORE.
 0320            TCF    NEWOPS -1       PICK UP NEW OP CODE(S).
 0321            TC     STORE,1
 0322            TCF    NEWOPS -1
 0323            TC     STORE,2
 0324  2         TCF    NEWOPS -1
 0325            TC     STORE           STODL.
 0326            TCF    DODLOAD
 0327            TC     STORE,1
 0328            TCF    DODLOAD
 0329            TC     STORE,2
 0330  2         TCF    DODLOAD
 0331            TC     STORE           STODL WITH INDEXED LOAD ADDRESS.
 0332            TCF    DODLOAD*
 0333            TC     STORE,1
 0334            TCF    DODLOAD*
 0335            TC     STORE,2
 0336  2         TCF    DODLOAD*
 0337            TC     STORE           STOVL.
 0338            TCF    DOVLOAD
 0339            TC     STORE,1
 0340            TCF    DOVLOAD
 0341            TC     STORE,2
 0342  2         TCF    DOVLOAD
 0343            TC     STORE           STOVL WITH INDEXED LOAD ADDRESS.
 0344            TCF    DOVLOAD*
 0345            TC     STORE,1
 0346            TCF    DOVLOAD*
 0347            TC     STORE,2
 0348  2         TCF    DOVLOAD*
 0349            TC     STORE           STOTC.
 0350            CAF    CALLCODE
 0351            TS     CYR
 0352            TCF    15BITADR        GET A 15 BIT ADDRESS.
P0353  2         STORE CODE ADDRESS PROCESSOR.
 0354   STORE,1  INDEX  FIXLOC
 0355            CS     X1
 0356  2         TCF    PRESTORE
 0357   STORE,2  INDEX  FIXLOC
 0358            CS     X2
 0359  2PRESTORE ADS    ADDRWD          RESULTANT ADDRESS IS IN ERASABLE.
 0360   STORE    CA     ADDRWD          SEE IF ADDRESS RELATIVE TO WORK AREA.
 0361            AD     -ENDVAC
 0362            CCS    A
 0363  2         TCF    STARTSTO        ADDRESS OK AS IS.
 0364  2LOW10    OCT    1777
 0365            CA     FIXLOC          GIVEN ADDRESS IS RELATIVE TO WORK AREA.
 0366            ADS    ADDRWD
P0367  2         STORING ROUTINES. STORE DP, TP, OR VECTOR AS INDICATED BY MODE.
 0368   STARTSTO EXTEND                 MPAC,+1 MUST BE STORED IN ANY EVENT.
 0369            DCA    MPAC
 0370            INDEX  ADDRWD
 0371  2         DXCH   0
 0372            CCS    MODE
 0373            TCF    TSTORE
 0374  2         TC     Q
 0375   VSTORE   EXTEND
 0376            DCA    MPAC +3
 0377            INDEX  ADDRWD
 0378  2         DXCH   2
 0379            EXTEND
 0380            DCA    MPAC +5
 0381            INDEX  ADDRWD
 0382            DXCH   4
 0383  2         TC     Q
 0384   TSTORE   CA     MPAC +2
 0385            INDEX  ADDRWD
 0386            TS     2
 0387            TC     Q
P0388            ROUTINES TO BEGIN PROCESSING OF THE SECOND ADDRESS ASSOCIATED W
 0389  9ITH ALL STORE-TYPE CODES EXCEPT STORE
R0390  2ITSELF.
 0391   DODLOAD  CAF    DLOADCOD
 0392            TS     CYR
 0393  2         TCF    DIRADRES        GO GET A DIRECT ADDRESS.
 0394   DOVLOAD  CAF    VLOADCOD
 0395            TS     CYR
 0396  2         TCF    DIRADRES
 0397   DOVLOAD* CAF    VLOAD*
 0398            TCF    DODLOAD* +1     PROLOGUE TO INDEX ROUTINE.
P0399  2         THE FOLLOWING LOAD INSTRUCTIONS ARE PROVIDED FOR LOADING THE MU
 0400  9LTI-PURPOSE ACCUMULATOR MPAC.
 0401   DLOAD    EXTEND
 0402            INDEX  ADDRWD
 0403            DCA    0               PICK UP DP ARGUMENT AND LEAVE IT IN
 0404   SLOAD2   DXCH   MPAC            MPAC,+1, SETTING MPAC +2 TO ZERO. THE
 0405            CAF    ZERO            CONTENTS OF THE OTHER FOUR REGISTERS OF
 0406            TS     MPAC +2         MPAC ARE IRRELEVANT.
 0407  2         TCF    NEWMODE         DECLARE DOUBLE PRECISION MODE.
 0408   TLOAD    INDEX  ADDRWD
 0409            CA     2               LOAD A TRIPLE PRECISION ARGUMENT INTO
 0410            TS     MPAC +2         THE FIRST THREE MPAC REGISTERS, WITH THE
 0411            EXTEND                 CONTENTS OF THE OTHER FOUR IRRELEVANT.
 0412            INDEX  ADDRWD
 0413            DCA    0
 0414            DXCH   MPAC
 0415            CAF    ONE
 0416  2         TCF    NEWMODE         DECLARE TRIPLE PRECISION MODE.
 0417   SLOAD    ZL                     LOAD A SINGLE PRECISION NUMBER INTO
 0418            INDEX  ADDRWD          MPAC, SETTING MPAC+1,2 TO ZERO. THE
 0419            CA     0               CONTENTS OF THE REMAINING MPAC REGISTERS
 0420  2         TCF    SLOAD2          ARE IRRELEVANT.
 0421   VLOAD    EXTEND                 LOAD A DOUBLE PRECISION VECTOR INTO
 0422            INDEX  ADDRWD          MPAC,+1, MPAC+3,4, AND MPAC+5,6. THE
 0423            DCA    0               CONTENTS OF MPAC +2 ARE IRRELEVANT.
 0424  2         DXCH   MPAC
 0425   ENDVLOAD EXTEND                 PDVL COMES HERE TO FINISH UP FOR DP, TP.
 0426            INDEX  ADDRWD
 0427            DCA    2
 0428  2         DXCH   MPAC +3
 0429    +4      EXTEND                 TPDVL FINISHES HERE.
 0430            INDEX  ADDRWD
 0431            DCA    4
 0432  2         DXCH   MPAC +5
 0433            CS     ONE             DECLARE VECTOR MODE.
 0434            TCF    NEWMODE
P0435  2         THE FOLLOWING INSTRUCTIONS ARE PROVIDED FOR STORING OPERANDS IN
 0436  9 THE PUSHDOWN LIST:
R0437            1.  PUSH               PUSHDOWN AND NO LOAD.
R0438            2.  PDDL               PUSHDOWN AND DOUBLE PRECISION LOAD.
R0439  2         3.  PDVL               PUSHDOWN AND VECTOR LOAD.
 0440   PDDL     EXTEND
 0441            INDEX  ADDRWD          LOAD MPAC,+1, PUSHING THE FORMER
 0442            DCA    0               CONTENTS DOWN.
 0443            DXCH   MPAC
 0444            INDEX  PUSHLOC
 0445  2         DXCH   0
 0446            INDEX  MODE            ADVANCE THE PUSHDOWN POINTER APPRO-
 0447            CAF    NO.WDS          PRIATELY.
 0448  2         ADS    PUSHLOC
 0449            CCS    MODE
 0450            TCF    ENDTPUSH
 0451  2         TCF    ENDDPUSH
 0452            TS     MODE            NOW DP.
 0453   ENDVPUSH TS     MPAC +2
 0454            DXCH   MPAC +3         PUSH DOWN THE REST OF THE VECTOR HERE.
 0455            INDEX  PUSHLOC
 0456  2         DXCH   0 -4
 0457            DXCH   MPAC +5
 0458            INDEX  PUSHLOC
 0459  2         DXCH   0 -2
 0460  2         TCF    DANZIG
 0461   ENDDPUSH TS     MPAC +2         SET MPAC +2 TO ZERO AND EXIT ON DP.
 0462  2         TCF    DANZIG
 0463   ENDTPUSH TS     MODE
 0464            XCH    MPAC +2         ON TRIPLE, SET MPAC +2 TO ZERO, PUSHING
 0465    +2      INDEX  PUSHLOC         DOWN THE OLD CONTENTS
 0466            TS     0 -1
 0467            TCF    DANZIG
P0468  2         PDVL - PUSHDOWN AND VECTOR LOAD.
 0469   PDVL     EXTEND                 RELOAD MPAC AND PUSH DOWN ITS CONTENTS.
 0470            INDEX  ADDRWD
 0471            DCA    0
 0472            DXCH   MPAC
 0473            INDEX  PUSHLOC
 0474  2         DXCH   0
 0475            INDEX  MODE            ADVANCE THE PUSHDOWN POINTER.
 0476            CAF    NO.WDS
 0477  2         ADS    PUSHLOC
 0478            CCS    MODE            TEST PAST MODE.
 0479            TCF    TPDVL
 0480  2         TCF    ENDVLOAD        JUST LOAD LAST FOUR REGISTERS ON DP.
 0481   VPDVL    EXTEND                 PUSHDOWN AND RE-LOAD LAST TWO COMPONENTS
 0482            INDEX  ADDRWD
 0483            DCA    2
 0484            DXCH   MPAC +3
 0485            INDEX  PUSHLOC
 0486  2         DXCH   0 -4
 0487            EXTEND
 0488            INDEX  ADDRWD
 0489            DCA    4
 0490            DXCH   MPAC +5
 0491            INDEX  PUSHLOC
 0492  2         DXCH   0 -2
 0493  2         TCF    DANZIG
 0494   TPDVL    EXTEND                 ON TP, WE MUST LOAD THE Y COMPONENT
 0495            INDEX  ADDRWD          BEFORE STORING MPAC +2 INCASE THIS IS A
 0496            DCA    2               PUSHUP.
 0497  2         DXCH   MPAC +3
 0498            CA     MPAC +2
 0499            INDEX  PUSHLOC         IN DP.
 0500            TS     0 -1
 0501  2         TCF    ENDVLOAD +4
R0502  2         SSP (STORE SINGLE PRECISION) IS EXECUTED HERE.
 0503   SSP      INCR   LOC             PICK UP THE WORD FOLLOWING THE GIVEN
 0504            INDEX  LOC             ADDRESS AND STORE IT AT X.
 0505            CA     0
 0506   STORE1   INDEX  ADDRWD          SOME INDEX AND MISCELLANEOUS OPS END
 0507            TS     0               HERE.
 0508            TCF    DANZIG
P0509  2SEQUENCE CHANGING AND SUBROUTINE CALLING OPTIONS.
R0510  2         THE FOLLOWING OPERATIONS ARE AVAILABLE FOR SEQUENCING CHANGING,
 0511  9 BRANCHING, AND CALLING SUBROUTINES:
R0512            1.  GOTO               GO TO.
R0513            2.  CALL               CALL SUBROUTINE SETTING QPRET.
R0514            3.  CGOTO              COMPUTED GO TO.
R0515            4.  CCALL              COMPUTED CALL.
R0516            7.  BPL                BRANCH IF MPAC POSITIVE OR ZERO.
R0517            8.  BZE                BRANCH IF MPAC ZERO.
R0518  2         9.  BMN                BRANCH IF MPAC NEGATIVE NON-ZERO.
 0519   CCALL    INCR   LOC             MAINTAIN LOC FOR QPRET COMPUTATION.
 0520            INDEX  LOC
 0521            CAF    0               GET BASE ADDRESS OF CADR LIST.
 0522            INDEX  ADDRWD
 0523            AD     0               ADD INCREMENT.
 0524            TS     FBANK           SELECT DESIRED CADR.
 0525            MASK   LOW10
 0526            INDEX  A
 0527            CAF    10000
 0528  2 -1      TS     POLISH
 0529   CALL     CS     LOW10           FOR ANY OF THE CALL OPTIONS, MAKE UP THE
 0530            AD     LOC             ADDRESS OF THE NEXT OP-CODE PAIR/STORE
 0531            AD     BANKSET         CODE AND LEAVE IT IN QPRET. NOTE THAT
 0532            INDEX  FIXLOC          LOW10 = 2000 - 1.
 0533  2         TS     QPRET
 0534   GOTO     CA     POLISH          BASIC BRANCHING SEQUENCE.
 0535            TS     FBANK
 0536            MASK   LOW10           MAKE UP 12 BIT SUB-ADDRESS AND FALL INTO
 0537            AD     2K              FALL INTO THE INTPRET ENTRY UNLESS THE
 0538            TS     LOC             GIVEN ADDRESS WAS IN ERASABLE, IN WHICH
 0539            CCS    FBANK           CASE IT IS USED AS THE ADDRESS OF THE
 0540            TCF    INTPRET +2      BRANCH ADDRESS.
 0541            TCF    +2
 0542  8         TCF    INTPRET +2
 0543            CS     LOC             THE GIVEN ADDRESS IS IN ERASABLE - SEE
 0544            AD     EVAC+2K         IF RELATIVE TO THE WORK AREA.
 0545            CCS    A
 0546            CA     FIXLOC          ADD FIXLOC IF SO.
 0547  2         ADS    LOC
 0548            INDEX  LOC
 0549            CA     0 -2000         (ADDRESS HAD BEEN AUGMENTED BY 2000.)
 0550  2         TCF    GOTO +1         ALLOWS ARBITRARY INDIRECTNESS.
 0551   CGOTO    INDEX  LOC             COMPUTED GO TO. PICK UP ADDRESS OF CADR
 0552            CA     1               LIST.
 0553            INDEX  ADDRWD          ADD MODIFIER.
 0554            AD     0
 0555            TS     FBANK           SELECT GOTO ADDRESS.
 0556            MASK   LOW10
 0557            INDEX  A
 0558            CA     10000
 0559  2         TCF    GOTO +1         WITH ADDRESS IN A.
 0560   SWBRANCH CA     BANKSET         SWITCH INSTRUCTIONS WHICH ELECT TO
 0561            TS     FBANK           BRANCH COME HERE TO DO SO.
 0562            INDEX  LOC
 0563            CA     1
 0564  2         TCF    GOTO +1
 0565   EVAC+2K  DEC    1069            =1024+45
P0566  2         TRIPLE PRECISION BRANCHING ROUTINE. IF CALLING TC IS AT L, RETU
 0567  9RN IS AS FOLLOWS:
R0568            L+1  IF MPAC IS GREATER THAN ZERO.
R0569            L+2  IF MPAC IS EQUAL TO +0 OR -0.
R0570  4         L+3  IF MPAC IS LESS THAN ZERO.
 0571   BRANCH   CCS    MPAC
 0572            TC     Q
 0573            TCF    +2              ON ZERO.
 0574  2         TCF    NEG
 0575            CCS    MPAC +1
 0576            TC     Q
 0577            TCF    +2
 0578  2         TCF    NEG
 0579            CCS    MPAC +2
 0580            TC     Q
 0581            TCF    +2
 0582  2         TCF    NEG
 0583            INDEX  Q               IF ALL THREE REGISTERS WERE +-0.
 0584  2         TC     1
 0585   NEG      INDEX  Q               IF FIRST NON-ZERO REGISTER WAS NEGATIVE.
 0586  4         TC     2
 0587   EXIT     INDEX  LOC             LEAVE INTERPRETIVE MODE.
 0588            TCF    1
P0589  2SECTION 3 - ADD/SUBTRACT PACKAGE.
R0590            THE FOLLOWING OPERATIONS ARE PROVIDED FOR ADDING TO AND SUBTRAC
 0591  9TING FROM THE MULTI-PURPOSE ACCUMULATOR
R0592  2MPAC:
R0593            1.  DAD                DOUBLE PRECISION ADD.
R0594            2.  DSU                DOUBLE PRECISION SUBTRACT.
R0595  2         3.  BDSU               DOUBLE PRECISION SUBTRACT FROM.
R0596  2         4.  TAD                TRIPLE PRECISION ADD.
R0597            5.  VAD                VECTOR ADD.
R0598            6.  VSU                VECTOR SUBTRACT.
R0599  2         7.  BVSU               VECTOR SUBTRACT FROM.
R0600  4THE INTERPRETIVE OVERFLOW INDICATOR OVFIND IS SET NON-ZERO IF OVERFLOW O
 0601  9CCURS IN ANY OF THE ABOVE.
 0602   VAD      EXTEND
 0603            INDEX  ADDRWD
 0604            DCA    2
 0605            DAS    MPAC +3
 0606            EXTEND                 CHECK OVERFLOW.
 0607            BZF    +2
 0608  2         TC     OVERFLOW
 0609            EXTEND
 0610            INDEX  ADDRWD
 0611            DCA    4
 0612            DAS    MPAC +5
 0613            EXTEND
 0614            BZF    +2
 0615  2         TC     OVERFLOW
 0616   DAD      EXTEND
 0617            INDEX  ADDRWD
 0618            DCA    0
 0619   ENDVXV   DAS    MPAC            VXV FINISHES HERE.
 0620            EXTEND
 0621            BZF    DANZIG
 0622            TC     OVERFLOW
 0623  8         TCF    DANZIG
 0624   VSU      EXTEND
 0625            INDEX  ADDRWD
 0626            DCS    2
 0627            DAS    MPAC +3
 0628            EXTEND
 0629            BZF    +2
 0630  2         TC     OVERFLOW
 0631            EXTEND
 0632            INDEX  ADDRWD
 0633            DCS    4
 0634            DAS    MPAC +5
 0635            EXTEND
 0636            BZF    +2
 0637  2         TC     OVERFLOW
 0638   DSU      EXTEND
 0639            INDEX  ADDRWD
 0640            DCS    0
 0641            DAS    MPAC
 0642            EXTEND
 0643            BZF    DANZIG
 0644            TC     OVERFLOW
 0645  2         TCF    DANZIG
 0646   OVERFLOW CAF    ONE             SUBROUTINE TO TURN OVFIND ON.
 0647  8         TCF    SETOVF2
 0648   BVSU     EXTEND
 0649            INDEX  ADDRWD
 0650            DCA    2
 0651            DXCH   MPAC +3
 0652            EXTEND
 0653            DCOM
 0654            DAS    MPAC +3
 0655            EXTEND
 0656            BZF    +2
 0657  2         TC     OVERFLOW
 0658            EXTEND
 0659            INDEX  ADDRWD
 0660            DCA    4
 0661            DXCH   MPAC +5
 0662            EXTEND
 0663            DCOM
 0664            DAS    MPAC +5
 0665            EXTEND
 0666            BZF    +2
 0667  2         TC     OVERFLOW
 0668   BDSU     EXTEND
 0669            INDEX  ADDRWD
 0670            DCA    0
 0671            DXCH   MPAC
 0672            EXTEND
 0673            DCOM
 0674            DAS    MPAC
 0675            EXTEND
 0676            BZF    DANZIG
 0677            TC     OVERFLOW
 0678            TCF    DANZIG
P0679  2         TRIPLE PRECISION ADD ROUTINE.
 0680   TAD      EXTEND
 0681            INDEX  ADDRWD
 0682            DCA    1               ADD MINOR PARTS FIRST.
 0683            DAS    MPAC +1
 0684            INDEX  ADDRWD
 0685            AD     0
 0686            AD     MPAC
 0687            TS     MPAC
 0688  2         TCF    DANZIG
 0689   SETOVF   TS     OVFIND          SET OVFIND IF SUCH OCCURS.
 0690            TCF    DANZIG
P0691  2ARITHMETIC SUBROUTINES REQUIRED IN FIXED-FIXED.
R0692            1.  DMPSUB     DOUBLE PRECISION MULTIPLY. MULTIPLY THE CONTENTS
 0693  9 OF MPAC,+1 BY THE DP WORD WHOSE ADDRESS
R0694                           IS IN ADDRWD AND LEAVE A TRIPLE PRECISION RESULT
 0695  9 IN MPAC.
R0696            2.  ROUNDSUB   ROUND THE TRIPLE PRECISON CONTENTS OF MPAC TO DO
 0697  9UBLE PRECISION.
R0698            3.  DOTSUB     TAKE THE DOT PRODUCT OF THE VECTOR IN MPAC AND T
 0699  9HE VECTOR WHOSE ADDRESS IS IN ADDRWD
R0700                           AND LEAVE THE TRIPLE PRECISION RESULT IN MPAC.
R0701            4.  POLY       USING THE CONTENTS OF MPAC AS A DP ARGUMENT, EVA
 0702  9LUATE THE POLYNOMIAL WHOSE DEGREE AND
R0703  4                        COEFFICIENTS IMMEDIATELY FOLLOW THE TC POLY INST
 0704  9RUCTION (SEE ROUTINE FOR DETAILS.)
 0705   DMP      INDEX  Q               BASIC SUBROUTINE FOR USE BY PINBALL, ETC
 0706            CAF    0               ADRES OF ARGUMENT FOLLOWS  TC DMP  .
 0707            INCR   Q
 0708  2 -1      TS     ADDRWD          (PROLOGUE FOR SETTING ADDRWD.)
 0709   DMPSUB   INDEX  ADDRWD          GET MINOR PART OF OPERAND AT C(ADDRWD).
 0710            CA     1
 0711            TS     MPAC +2         THIS WORKS FOR SQUARING MPAC AS WELL.
 0712            CAF    ZERO            SET MPAC +1 TO ZERO SO WE CAN ACCUMULATE
 0713            XCH    MPAC +1         THE PARTIAL PRODUCTS WITH DAS
 0714            TS     MPTEMP          INSTRUCTIONS.
 0715            EXTEND
 0716  2         MP     MPAC +2         MINOR OF MPAC X MINOR OF C(ADDRWD).
 0717            XCH    MPAC +2         DISCARD MINOR PART OF ABOVE RESULT AND
 0718            EXTEND                 FORM MAJOR OF MPAC X MINOR OF C(ADDRWD).
 0719            MP     MPAC
 0720  2         DAS    MPAC +1         GUARANTEED NO OVERFLOW.
 0721            INDEX  ADDRWD          GET MAJOR PART OF ARGUMENT AT C(ADDRWD).
 0722            CA     0
 0723            XCH    MPTEMP          SAVE AND BRING OUT MINOR OF MPAC.
 0724            EXTEND
 0725            MP     MPTEMP          MAJOR OF C(ADDRWD) X MINOR OF MPAC.
 0726  2         DAS    MPAC +1         ACCUMULATE, SETTING A TO NET OVERFLOW.
 0727            XCH    MPAC            SETTING MPAC TO 0 OR +-1.
 0728            EXTEND
 0729            MP     MPTEMP          MAJOR OF MPAC X MAJOR OF C(ADDRWD).
 0730            DAS    MPAC            GUARANTEED NO OVERFLOW.
 0731            TC     Q               49 MCT = .573 MS. INCLUDING RETURN.
P0732  2         ROUND MPAC TO DOUBLE PRECISION, SETTING OVFIND ON THE RARE EVEN
 0733  9T OF OVERFLOW.
 0734   ROUNDSUB CAF    ZERO            SET MPAC +2 = 0 FOR SCALARS AND CHANGE
 0735  2 +1      TS     MODE            MODE TO DP.
 0736   VROUND   XCH    MPAC +2         BUT WE NEEDNT TAKE THE TIME FOR VECTORS.
 0737            DOUBLE
 0738            TS     L
 0739  2         TC     Q
 0740            AD     MPAC +1         ADD ROUNDING BIT IF MPAC +2 WAS GREATER
 0741            TS     MPAC +1         THAN .5 IN MAGNITUDE.
 0742  2         TC     Q
 0743            AD     MPAC            PROPAGATE INTERFLOW.
 0744            TS     MPAC
 0745  2         TC     Q
 0746   SETOVF2  TS     OVFIND          (RARE).
 0747            TC     Q
P0748            THE DOT PRODUCT SUBROUTINE USUALLY FORMS THE DOT PRODUCT OF THE
 0749  9 VECTOR IN MPAC WITH A STANDARD SIX
R0750   REGISTER VECTOR WHOSE ADDRESS IS IN ADDRWD. IN THIS CASE C(DOTINC) ARE S
 0751  9ET TO 2. VXM, HOWEVER, SETS C(DOTINC) TO
R0752  46 SO THAT DOTSUB DOTS MPAC WITH A COLUMN VECTOR OF THE MATRIX IN QUESTIO
 0753  9N IN THIS CASE.
 0754   PREDOT   CAF    TWO             PROLOGUE TO SET DOTINC TO 2.
 0755  2         TS     DOTINC
 0756   DOTSUB   EXTEND
 0757            QXCH   DOTRET          SAVE RETURN.
 0758            TC     DMPSUB          DOT X COMPONENTS.
 0759            DXCH   MPAC +3         POSITION Y COMPONENT OF MPAC FOR
 0760            DXCH   MPAC            MULTIPLICATION WHILE SAVING RESULT IN
 0761            DXCH   BUF             THREE WORD BUFFER, BUF.
 0762            CA     MPAC +2
 0763  2         TS     BUF +2
 0764            CA     DOTINC          ADVANCE ADDRWD TO Y COMPONENT OF
 0765            ADS    ADDRWD          OTHER ARGUMENT.
 0766            TC     DMPSUB
 0767            DXCH   MPAC +1         ACCUMULATE PARTIAL PRODUCTS.
 0768            DAS    BUF +1
 0769            AD     MPAC
 0770            AD     BUF
 0771            TS     BUF
 0772            TCF    +2
 0773  2         TS     OVFIND          IF OVERFLOW OCCURS.
 0774            DXCH   MPAC +5         MULTIPLY Z COMPONENTS.
 0775            DXCH   MPAC
 0776            CA     DOTINC
 0777            ADS    ADDRWD
 0778            TC     DMPSUB
 0779   ENDDOT   DXCH   BUF +1          LEAVE FINAL ACCUMULATION IN MPAC.
 0780            DAS    MPAC +1
 0781            AD     MPAC
 0782            AD     BUF
 0783            TS     MPAC
 0784  2         TC     DOTRET
 0785            TS     OVFIND          ON OVERFLOW HERE.
 0786            TC     DOTRET
P0787  2DOUBLE PRECISION POLYNOMIAL EVALUATOR
R0788                                      N        N-1
R0789            THIS ROUTINE EVALUATES A X  + A   X    + ... + A X + A  LEAVING
 0790  9 THE DP RESULT IN MPAC ON EXIT.
R0791  2                                 N      N-1              1     0
R0792  2THE ROUTINE HAS TWO ENTRIES
R0793            1. ENTRY THRU POWRSERS. THE COEFFICIENTS MAY BE EITHER IN FIXED
 0794  9 OR ERASABLE, THE CALL IS BY
R0795  2            TC POWRSERS, AND THE RETURN IS TO LOC(TC POWRSERS)+1. THE EN
 0796  9TERING DATA MUST BE AS FOLLOWS
A0797   A        SP     LOC-3           ADDRESS FOR REFERENCING COEF TABLE
A0798   L        SP     N-1             N IS THE DEGREE OF THE POWER SERIES
A0799  2MPAC     DP     X               ARGUMENT
A0800   LOC-2N   DP     A(0)
A0801            ...
A0802  2LOC      DP     A(N)
R0803  2         2. ENTRY THRU POLY. THE CALL TO POLY AND THE ENTERING DATA MUST
 0804  9 BE AS FOLLOWS
A0805  2MPAC     DP     X               ARGUMENT
A0806   LOC      TC     POLY
A0807   LOC+1    SP     N-1
A0808   LOC+2    DP     A(0)
A0809            ...
A0810  2LOC+2N+2 DP     A(N)            RETURN IS TO LOC+2N+4
 0811   POWRSERS EXTEND
 0812            QXCH   POLYRET         RETURN ADDRESS
 0813            TS     POLISH          POWER SERIES ADDRESS
 0814            LXCH   POLYCNT         N-1 TO COUNTER
 0815  2         TCF    POLYCOM         SKIP SET UP BY POLY
 0816   POLY     INDEX  Q
 0817            CAF    0
 0818            TS     POLYCNT         N-1 TO COUNTER
 0819            DOUBLE
 0820            AD     Q
 0821            TS     POLISH          L(A(N))-3 TO POLISH
 0822            AD     FIVE
 0823  2         TS     POLYRET         STORE RETURN ADDRESS
 0824   POLYCOM  CAF    LVBUF           INCOMING X WILL BE MOVED TO VBUF, SO
 0825  2         TS     ADDRWD          SET ADDRWD SO DMPSUB WILL MPY BY VBUF.
 0826            EXTEND
 0827            INDEX  POLISH
 0828            DCA    3
 0829            DXCH   MPAC            LOAD A(N) INTO MPAC,
 0830            DXCH   VBUF            SAVING X IN VBUF
 0831  2         TCF    POLY2
 0832   POLYLOOP TS     POLYCNT         SAVE DECREMENTED LOOP COUNTER
 0833            CS     TWO
 0834  2         ADS    POLISH          REGRESS COEFFICIENT POINTER
 0835   POLY2    TC     DMPSUB          MULTIPLY BY X
 0836            EXTEND
 0837            INDEX  POLISH
 0838            DCA    1               ADD IN NEXT COEFFICIENT
 0839  2         DAS    MPAC            USERS RESPONSIBILITY TO ASSURE NO OVFLOW
 0840            CCS    POLYCNT
 0841            TCF    POLYLOOP
 0842            TC     POLYRET         RETURN CALLER
P0843  2         MISCELLANEOUS MULTI-PRECISION ROUTINES REQUIRED IN FIXED-FIXED
 0844  9BUT NOT USED BY THE INTERPRETER.
 0845   TPAGREE  EXTEND                 FORCE SIGN AGREEMENT AMONG THE TRIPLE-
 0846            QXCH   BUF             PRECISION CONTENTS OF MPAC, RETURNING
 0847            TC     BRANCH          WITH THE SIGNUM OF THE INPUT IN A.
 0848            TCF    ARG+
 0849  2         TCF    ARGZERO
 0850            CS     POSMAX          IF NEGATIVE.
 0851  2         TCF    +2
 0852   ARG+     CAF    POSMAX
 0853    +2      TS     BUF +1
 0854            EXTEND
 0855            AUG    A               FORMS +-1.0.
 0856            AD     MPAC +2
 0857            TS     MPAC +2
 0858            CAF    ZERO
 0859            AD     BUF +1
 0860            AD     MPAC +1
 0861            TS     MPAC +1
 0862            CAF    ZERO
 0863            AD     BUF +1
 0864            AD     MPAC
 0865   ARGZERO2 TS     MPAC            ALWAYS SKIPPING UNLESS ARGZERO.
 0866            TS     MPAC +1
 0867  2         TC     BUF             RETURN.
 0868   ARGZERO  TS     MPAC +2         SET ALL THREE MPAC REGISTERS TO ZERO.
 0869  2         TCF    ARGZERO2
R0870  2         SHORTMP MULTIPLIES THE TP CONTENTS OF MPAC BY THE SINGLE PRECIS
 0871  9ION NUMBER ARRIVING IN A.
 0872   SHORTMP  TS     MPTEMP
 0873            EXTEND
 0874            MP     MPAC +2
 0875            TS     MPAC +2
 0876            CAF    ZERO            SO SUBSEQUENT DAS WILL WORK.
 0877            XCH    MPAC +1
 0878            EXTEND
 0879            MP     MPTEMP
 0880            DAS    MPAC +1
 0881            XCH    MPAC            SETTING MPAC TO 0.
 0882            EXTEND
 0883            MP     MPTEMP
 0884            DAS    MPAC
 0885            TC     Q
P0886  2MISCELLANEOUS VECTOR OPERATIONS. INCLUDED HERE ARE THE FOLLOWING:
R0887            1.  DOT                DP VECTOR DOT PRODUCT.
R0888            2.  VXV                DP VECTOR CROSS PRODUCT.
R0889            3.  VXSC               DP VECTOR TIMES SCALAR.
R0890            4.  V/SC               DP VECTOR DIVIDED BY SCALAR.
R0891            5.  VPROJ              DP VECTOR PROJECTION. ( (MPAC.X)MPAC ).
R0892            6.  VXM                DP VECTOR POST-MULTIPLIED BY MATRIX.
R0893  4         7.  MXV                DP VECTOR PRE-MULTIPLIED BY MATRIX.
 0894   DOT      TC     PREDOT          DO THE DOT PRODUCT AND EXIT, CHANGING
 0895            CAF    ZERO            THE MODE TO DP SCALAR.
 0896  4         TCF    NEWMODE
 0897   MXV      CAF    TWO             SET UP MATINC AND DOTINC FOR ROW
 0898            TS     MATINC          VECTORS.
 0899  2         TCF    VXM/MXV         GO TO COMMON PORTION.
 0900   VXM      CS     TEN             SET MATINC AND DOTINC TO REFER TO MATRIX
 0901            TS     MATINC          AS THREE COLUMN VECTORS.
 0902            CAF    SIX
P0903  2         COMMON PORTION OF MXV AND VXM.
 0904   VXM/MXV  TS     DOTINC
 0905  2         TC     MPACVBUF        SAVE VECTOR IN MPAC FOR FURTHER USE.
 0906            TC     DOTSUB          GO DOT TO GET X COMPONENT OF ANSWER.
 0907            EXTEND
 0908            DCA    VBUF            MOVE MPAC VECTOR BACK INTO MPAC, SAVING
 0909            DXCH   MPAC            NEW X COMPONENT IN BUF2.
 0910            DXCH   BUF2
 0911            EXTEND
 0912            DCA    VBUF +2
 0913            DXCH   MPAC +3
 0914            EXTEND
 0915            DCA    VBUF +4
 0916            DXCH   MPAC +5
 0917            CA     MATINC          INITIALIZE ADDRWD FOR NEXT DOT PRODUCT.
 0918  2         ADS    ADDRWD          FORMS BASE ADDRESS OF NEXT COLUMN(ROW).
 0919            TC     DOTSUB
 0920            DXCH   VBUF            MOVE GIVEN VECTOR BACK TO MPAC, SAVING Y
 0921            DXCH   MPAC            COMPONENT OF ANSWER IN VBUF +2.
 0922            DXCH   VBUF +2
 0923            DXCH   MPAC +3
 0924            DXCH   VBUF +4
 0925            DXCH   MPAC +5
 0926            CA     MATINC          FORM ADDRESS OF LAST COLUMN OR ROW.
 0927  2         ADS    ADDRWD
 0928            TC     DOTSUB
 0929            DXCH   BUF2            ANSWER NOW COMPLETE. PUT COMPONENTS INTO
 0930            DXCH   MPAC            PROPER MPAC REGISTERS.
 0931            DXCH   MPAC +5
 0932            DXCH   VBUF +2
 0933            DXCH   MPAC +3
 0934            TCF    DANZIG          EXIT.
P0935  2         VXSC - VECTOR TIMES SCALAR.
 0936   VXSC     CCS    MODE            TEST PRESENT MODE.
 0937            TCF    DVXSC           SEPARATE ROUTINE WHEN SCALAR IS IN MPAC.
 0938  2         TCF    DVXSC
 0939   VVXSC    TC     DMPSUB          COMPUTE X COMPONENT
 0940            TC     VROUND          AND ROUND IT.
 0941            DXCH   MPAC +3         PUT Y COMPONENT INTO MPAC SAVING MPAC IN
 0942            DXCH   MPAC            MPAC +3.
 0943  2         DXCH   MPAC +3
 0944            TC     DMPSUB          DO SAME FOR Y AND Z COMPONENTS.
 0945            TC     VROUND
 0946            DXCH   MPAC +5
 0947            DXCH   MPAC
 0948  2         DXCH   MPAC +5
 0949            TC     DMPSUB
 0950            TC     VROUND
 0951   VROTATEX DXCH   MPAC            EXIT USED TO RESTORE MPAC AFTER THIS
 0952            DXCH   MPAC +5         TYPE OF ROTATION. CALLED BY VECTOR SHIFT
 0953            DXCH   MPAC +3         RIGHT, V/SC, ETC.
 0954            DXCH   MPAC
 0955            TCF    DANZIG
P0956  2         DP VECTOR PROJECTION ROUTINE.
 0957   VPROJ    TC     PREDOT          (MPAC.X)MPAC IS COMPUTED AND LEFT IN
 0958            CS     FOUR            MPAC. DO DOT AND FALL INTO DVXSC.
 0959  2         ADS    ADDRWD
R0960  2         VXSC WHEN SCALAR ARRIVES IN MPAC AND VECTOR IS AT X.
 0961   DVXSC    EXTEND                 SAVE SCALAR IN MPAC +3 AND GET X
 0962            DCA    MPAC            COMPONENT OF ANSWER.
 0963            DXCH   MPAC +3
 0964            TC     DMPSUB
 0965  2         TC     VROUND
 0966            CAF    TWO             ADVANCE ADDRWD TO Y COMPONENT OF X.
 0967            ADS    ADDRWD
 0968            EXTEND
 0969            DCA    MPAC +3         PUT SCALAR BACK INTO MPAC AND SAVE
 0970            DXCH   MPAC            X RESULT IN MPAC +5.
 0971            DXCH   MPAC +5
 0972            TC     DMPSUB
 0973  2         TC     VROUND
 0974            CAF    TWO
 0975            ADS    ADDRWD          TO Z COMPONENT.
 0976            DXCH   MPAC +3         BRING SCALAR BACK, PUTTING Y RESULT IN
 0977            DXCH   MPAC            THE PROPER PLACE.
 0978            DXCH   MPAC +3
 0979            TC     DMPSUB
 0980  2         TC     VROUND
 0981            DXCH   MPAC            PUT Z COMPONENT IN PROPER PLACE, ALSO
 0982            DXCH   MPAC +5         POSITIONING X.
 0983  2         DXCH   MPAC
 0984            CS     ONE             MODE HAS CHANGED TO VECTOR.
 0985            TCF    NEWMODE
P0986            THE VECTOR CROSS PRODUCT ROUTINE CALCULATES (X M -X M ,X M -X M
 0987  9 ,X M -X M ) WHERE M IS THE VECTOR IN
R0988                                                          3 2  2 3  1 3  3
 0989  91  2 1  1 2
R0990  4MPAC AND X THE VECTOR AT THE GIVEN ADDRESS.
 0991   VXV      EXTEND
 0992            DCA    MPAC +5         FORM UP M3X1, LEAVING M1 IN VBUF.
 0993            DXCH   MPAC
 0994            DXCH   VBUF
 0995  2         TC     DMPSUB          BY X1.
 0996            EXTEND
 0997            DCS    MPAC +3         CALCULATE -X1M2, SAVING X1M3 IN VBUF +2.
 0998            DXCH   MPAC
 0999            DXCH   VBUF +2
 1000  2         TC     DMPSUB
 1001            CAF    TWO             ADVANCE ADDRWD TO X2.
 1002            ADS    ADDRWD
 1003            EXTEND
 1004            DCS    MPAC +5         PREPARE TO GET -X2M3, SAVING -X1M2 IN
 1005            DXCH   MPAC            MPAC +5.
 1006            DXCH   MPAC +5
 1007  2         TC     DMPSUB
 1008            EXTEND
 1009            DCA    VBUF            GET X2M1, SAVING -X2M3 IN VBUF +4.
 1010            DXCH   MPAC
 1011            DXCH   VBUF +4
 1012  2         TC     DMPSUB
 1013            CAF    TWO             ADVANCE ADDRWD TO X3.
 1014            ADS    ADDRWD
 1015            EXTEND
 1016            DCS    VBUF            GET -X3M1, ADDING X2M1 TO MPAC +5 TO
 1017            DXCH   MPAC            COMPLETE THE Z COMPONENT OF THE ANSWER.
 1018  2         DAS    MPAC +5
 1019            EXTEND
 1020            BZF    +2
 1021  8         TC     OVERFLOW
 1022            TC     DMPSUB
 1023            DXCH   VBUF +2         MOVE X1M3 TO MPAC +3 SETTING UP FOR X3M2
 1024            DXCH   MPAC +3         AND ADD -X3M1 TO MPAC +3 TO COMPLETE THE
 1025            DXCH   MPAC            Y COMPONENT OF THE RESULT.
 1026  2         DAS    MPAC +3
 1027            EXTEND
 1028            BZF    +2
 1029  2         TC     OVERFLOW
 1030            TC     DMPSUB
 1031            DXCH   VBUF +4         GO ADD -X2M3 TO X3M2 TO COMPLETE THE X
 1032  2         TCF    ENDVXV          COMPONENT (TAIL END OF DAD).
R1033  2         THE MPACVBUF SUBROUTINE SAVES THE VECTOR IN MPAC IN VBUF WITHOU
 1034  9T CLOBBERING MPAC.
 1035   MPACVBUF EXTEND                 CALLED BY MXV, VXM, AND UNIT.
 1036            DCA    MPAC
 1037            DXCH   VBUF
 1038            EXTEND
 1039            DCA    MPAC +3
 1040            DXCH   VBUF +2
 1041            EXTEND
 1042            DCA    MPAC +5
 1043            DXCH   VBUF +4
 1044            TC     Q               RETURN TO CALLER.
P1045  2         INTERPRETIVE INSTRUCTIONS WHOSE EXECUTION CONSISTS OF PRINCIPAL
 1046  9LY CALLING SUBROUTINES.
 1047   DMP1     TC     DMPSUB          DMP INSTRUCTION.
 1048  2         TCF    DANZIG
 1049   DMPR     TC     DMPSUB
 1050            TC     ROUNDSUB +1     (C(A) = +0).
 1051  2         TCF    DANZIG
 1052   DDV      EXTEND
 1053            INDEX  ADDRWD          MOVE DIVIDEND INTO BUF.
 1054            DCA    0
 1055  2         TCF    BDDV +4
 1056   BDDV     EXTEND                 MOVE DIVISOR INTO MPAC SAVING MPAC, THE
 1057            INDEX  ADDRWD          DIVIDEND, IN BUF.
 1058            DCA    0
 1059            DXCH   MPAC
 1060    +4      DXCH   BUF
 1061            CAF    ZERO            DIVIDE ROUTINES IN BANK 0.
 1062            TS     FBANK
 1063  2         TCF    DDV/BDDV
 1064   SETPD    CA     ADDRWD          ANYWHERE IN ERASABLE IN GENERAL, BUT
 1065            TS     PUSHLOC         ALMOST ALWAYS IN THE WORK AREA.
 1066  2         TCF    NOIBNKSW        NO FBANK SWITCH REQUIRED.
 1067   TSLC     CAF    ZERO            SHIFTING ROUTINES LOCATED IN BANK 00.
 1068            TS     FBANK
 1069  2         TCF    TSLC2
 1070   GSHIFT   CAF    LOW7            USED AS MASK AT GENSHIFT. THIS PROCESSES
 1071            TS     FBANK           ANY SHIFT INSTRUCTION (EXCEPT TSLC) WITH
 1072            TCF    GENSHIFT        AN ADDRESS (ROUTINES IN BANK 0).
P1073            THE FOLLOWING IS THE PROLOGUE TO V/SC. IF THE PRESENT MODE IS V
 1074  9ECTOR, IT SAVES THE SCALAR AT X IN BUF
R1075   AND CALLS THE V/SC ROUTINE IN BANK 0. IF THE PRESENT MODE IS SCALAR, IT
 1076  9MOVES THE VECTOR AT X INTO MPAC, SAVING
R1077  4THE SCALAR IN MPAC IN BUF BEFORE CALLING THE V/SC ROUTINE IN BANK 0.
 1078   V/SC     CCS    MODE
 1079            TCF    DV/SC           MOVE VECTOR INTO MPAC.
 1080  2         TCF    DV/SC
 1081   VV/SC    EXTEND
 1082            INDEX  ADDRWD
 1083            DCA    0
 1084   V/SC1    DXCH   BUF             IN BOTH CASES, VECTOR IS NOW IN MPAC AND
 1085            CAF    ZERO            SCALAR IN BUF.
 1086            TS     FBANK
 1087  2         TCF    V/SC2
 1088   DV/SC    EXTEND
 1089            INDEX  ADDRWD
 1090            DCA    2
 1091            DXCH   MPAC +3
 1092            EXTEND
 1093            INDEX  ADDRWD
 1094            DCA    4
 1095  2         DXCH   MPAC +5
 1096            CS     ONE             CHANGE MODE TO VECTOR.
 1097  2         TS     MODE
 1098            EXTEND
 1099            INDEX  ADDRWD
 1100            DCA    0
 1101            DXCH   MPAC
 1102            TCF    V/SC1           FINISH PROLOGUE AT COMMON SECTION.
P1103  2         SIGN AND COMPLEMENT INSTRUCTIONS.
 1104   SIGN     INDEX  ADDRWD          CALL COMP INSTRUCTION IF WORD AT X IS
 1105            CCS    0               NEGATIVE NON-ZERO.
 1106            TCF    NOIBNKSW        NO FBANK SWITCH REQUIRED.
 1107            TCF    +2
 1108  2         TCF    COMP            DO THE COMPLEMENT.
 1109            INDEX  ADDRWD
 1110            CCS    1
 1111            TCF    NOIBNKSW        NO FBANK SWITCH REQUIRED.
 1112            TCF    NOIBNKSW        NO FBANK SWITCH REQUIRED.
 1113            TCF    COMP
 1114  4         TCF    NOIBNKSW        NO FBANK SWITCH REQUIRED.
 1115   COMP     EXTEND                 COMPLEMENT DP MPAC IN EVERY CASE.
 1116            DCS    MPAC
 1117  2         DXCH   MPAC
 1118            CCS    MODE            EITHER COMPLEMENT MPAC +3 OR THE REST OF
 1119            TCF    DCOMP           THE VECTOR ACCUMULATOR.
 1120  2         TCF    DCOMP
 1121            EXTEND                 VECTOR COMPLEMENT.
 1122            DCS    MPAC +3
 1123            DXCH   MPAC +3
 1124            EXTEND
 1125            DCS    MPAC +5
 1126            DXCH   MPAC +5
 1127  2         TCF    DANZIG
 1128   DCOMP    CS     MPAC +2
 1129            TS     MPAC +2
 1130            TCF    DANZIG
P1131  2         CONSTANTS REQUIRED IN FIXED-FIXED.
 1132   DPOSMAX  OCT    37777
 1133   POSMAX   OCT    37777
 1134   LIMITS   EQUALS POSMAX +1
 1135  2NEG1/2   OCT    -20000          MUST BE TWO LOCATIONS AHEAD OF POS1/2.
 1136   BIT15    OCT    40000           BIT TABLE FOLLOWS.
 1137   BIT14    OCT    20000
 1138   BIT13    OCT    10000
 1139   BIT12    OCT    04000
 1140   BIT11    OCT    02000
 1141   BIT10    OCT    01000
 1142   BIT9     OCT    00400
 1143   BIT8     OCT    00200
 1144   BIT7     OCT    00100
 1145   BIT6     OCT    00040
 1146   BIT5     OCT    00020
 1147   BIT4     OCT    00010
 1148   BIT3     OCT    00004
 1149   BIT2     OCT    00002
 1150  2BIT1     OCT    00001
 1151   NEGMAX   EQUALS BIT15
 1152   HALF     EQUALS BIT14
 1153   POS1/2   EQUALS HALF
 1154   QUARTER  EQUALS BIT13
 1155   2K       EQUALS BIT11
 1156   ELEVEN   DEC    11
 1157   NOUTCON  =      ELEVEN
 1158   TEN      DEC    10
 1159   NINE     DEC    9
 1160   EIGHT    EQUALS BIT4
 1161   SEVEN    OCT    7
 1162   SIX      EQUALS REVCNT
 1163   FIVE     OCT    5
 1164   FOUR     EQUALS BIT3
 1165   THREE    EQUALS NO.WDS +1
 1166   TWO      EQUALS BIT2
 1167   ONE      EQUALS BIT1
 1168   ZERO     OCT    0
 1169   NEG0     OCT    77777
 1170  2NEGONE   DEC    -1
 1171   NEG1     =      NEGONE
 1172   MINUS1   EQUALS NEG1
 1173   NEG2     OCT    77775
 1174   NEG3     DEC    -3
 1175   LOW9     OCT    777
 1176   LOW4     OCT    17
 1177   LOW3     EQUALS SEVEN
 1178  2LOW2     EQUALS THREE
 1179   CALLCODE OCT    00030
 1180   DLOADCOD OCT    40014
 1181   VLOADCOD EQUALS BIT15
 1182   DLOAD*   OCT    40015
 1183   VLOAD*   EQUALS OCT40001
 1184   LVBUF    ADRES  VBUF
 1185   BIT13-14 OCTAL  30000
 1186   ENDINTF  EQUALS
P1187  2SHIFTING AND ROUNDING PACKAGE.
R1188  2         THE FOLLOWING SHORT SHIFT CODES REQUIRE NO ADDRESS WORD:
R1189            1.  SR1 TO SR4         SCALAR SHIFT RIGHT.
R1190            2.  SR1R TO SR4R       SCALAR SHIFT RIGHT AND ROUND.
R1191            3.  SL1 TO SL4         SCALAR SHIFT LEFT.
R1192  2         4.  SL1R TO SL4R       SCALAR SHIFT LEFT AND ROUND.
R1193            5.  VSR1 TO VSR8       VECTOR SHIFT RIGHT (ALWAYS ROUNDS).
R1194  2         6.  VSL1 TO VSL8       VECTOR SHIFT LEFT (NEVER ROUNDS).
R1195  2         THE FOLLOWING CODES REQUIRE AN ADDRESS WHICH MAY BE INDEXED:*
R1196            1.  SR                 SCALAR SHIFT RIGHT.
R1197            2.  SRR                SCALAR SHIFT RIGHT AND ROUND.
R1198            3.  SL                 SCALAR SHIFT LEFT.
R1199  2         4.  SLR                SCALAR SHIFT LEFT AND ROUND.
R1200            5.  VSR                VECTOR SHIFT RIGHT.
R1201  2         6.  VSL                VECTOR SHIFT LEFT.
R1202   *  IF THE ADDRESS IS INDEXED, AND THE INDEX MODIFICATION RESULTS IN A NE
 1203  9GATIVE SHIFT COUNT, A SHIFT OF THE
R1204  4ABSOLUTE VALUE OF THE COUNT IS DONE IN THE OPPOSITE DIRECTION.
 1205  2         SETLOC 10000           BANK 0 PORTION FOLLOWS.
 1206   SHORTT   CAF    SIX             SCALAR SHORT SHIFTS COME HERE. THE SHIFT
 1207            MASK   CYR             COUNT-1 IS NOW IN BITS 2-3 OF CYR. THE
 1208  2         TS     SR              ROUNDING BIT IS IN BIT1 AT THIS POINT.
 1209            CCS    CYR             SEE IF RIGHT OR LEFT SHIFT DESIRED.
 1210  2         TCF    TSSL            SHIFT LEFT.
 1211  2SRDDV    DEC    20              MPTEMP SETTING FOR SR BEFORE DDV.
 1212   TSSR     INDEX  SR              GET SHIFTING BIT.
 1213            CAF    BIT14
 1214  2         TS     MPTEMP
 1215            CCS    CYR             SEE IF A ROUND IS DESIRED.
 1216   RIGHTR   TC     MPACSRND        YES - SHIFT RIGHT AND ROUND.
 1217            TCF    NEWMODE         SET MODE TO DP (C(A) = 0).
 1218   MPACSHR  CA     MPTEMP          DO A TRIPLE PRECISION SHIFT RIGHT.
 1219            EXTEND
 1220            MP     MPAC +2
 1221    +3      TS     MPAC +2         (EXIT FROM SQRT AND ABVAL).
 1222            CA     MPTEMP
 1223            EXTEND
 1224            MP     MPAC            SHIFT MAJOR PART INTO A,L AND PLACE IN
 1225            DXCH   MPAC            MPAC,+1.
 1226            CA     MPTEMP
 1227            EXTEND
 1228            MP     L               ORIGINAL C(MPAC +1).
 1229            DAS    MPAC +1         GUARANTEED NO OVERFLOW.
 1230  2         TCF    DANZIG
R1231  2         MPAC SHIFT RIGHT AND ROUND SUBROUTINES.
 1232   MPACSRND CA     MPAC +2         WE HAVE TO DO ALL THREE MULTIPLIES SINCE
 1233            EXTEND                 MPAC +1 AND MPAC +2 MIGHT HAVE SIGN
 1234            MP     MPTEMP          DISAGREEMENT WITH A SHIFT RIGHT OF 1.
 1235            XCH    MPAC +1
 1236            EXTEND
 1237            MP     MPTEMP
 1238            XCH    MPAC +1         TRIAL MINOR PART.
 1239  2         AD     L
 1240   VSHR2    DOUBLE                 (FINISH VECTOR COMPONENT SHIFT RIGHT
 1241            TS     MPAC +2         AND ROUND.
 1242            TCF    +2
 1243  2         ADS    MPAC +1         GUARANTEED NO OVERFLOW.
 1244            CAF    ZERO
 1245            TS     MPAC +2
 1246            XCH    MPAC            SETTING TO ZERO SO FOLLOWING DAS WORKS.
 1247            EXTEND
 1248            MP     MPTEMP
 1249            DAS    MPAC            AGAIN NO OVERFLOW.
 1250  2         TC     Q
 1251   VSHRRND  CA     MPTEMP          ENTRY TO SHIFT RIGHT AND ROUND MPAC WHEN
 1252            EXTEND                 MPAC CONTAINS A VECTOR COMPONENT.
 1253            MP     MPAC +1
 1254            TS     MPAC +1
 1255            XCH    L
 1256            TCF    VSHR2           GO ADD ONE IF NECESSARY AND FINISH.
P1257  2         ROUTINE FOR SHORT SCALAR SHIFT LEFT (AND MAYBE ROUND).
 1258   TSSL     CA     SR              GET SHIFT COUNT FOR SR.
 1259  2 +1      TS     MPTEMP
 1260    +2      EXTEND                 ENTRY HERE FROM SL FOR SCALARS.
 1261            DCA    MPAC +1         SHIFTING LEFT ONE PLACE AT A TIME IS
 1262            DAS    MPAC +1         FASTER THAN DOING THE WHOLE SHIFT WITH
 1263            AD     MPAC            MULTIPLIES ASSUMING THAT FREQUENCY OF
 1264            AD     MPAC            SHIFT COUNTS GOES DOWN RAPIDLY AS A
 1265            TS     MPAC            FUNCTION OF THEIR MAGNITUDE.
 1266            TCF    +2
 1267            TS     OVFIND          OVERFLOW. (LEAVES OVERFLOW-CORRECTED
A1268                                   RESULT ANYWAY).
 1269            CCS    MPTEMP          LOOP ON DECREMENTED SHIFT COUNT.
 1270  2         TCF    TSSL +1
 1271            CCS    CYR             SEE IF ROUND WANTED.
 1272   ROUND    TC     ROUNDSUB        YES - ROUND AND EXIT.
 1273            TCF    DANZIG          SL LEAVES A ZERO IN CYR FOR NO ROUND.
 1274            TCF    DANZIG          NO - EXIT IMMEDIATL
P1275  2VECTOR SHIFTING ROUTINES.
 1276   SHORTV   CAF    LOW3            SAVE 3 BIT SHIFT COUNT - 1 WITHOUT
 1277            MASK   CYR             EDITING CYR.
 1278            TS     MPTEMP
 1279            CCS    CYR             SEE IF LEFT OR RIGHT SHIFT.
 1280            TCF    VSSL            VECTOR SHIFT LEFT.
 1281  2OCT176   OCT    176             USED IN PROCESSED SHIFTS WITH - COUNT.
 1282   VSSR     INDEX  MPTEMP          (ENTRY FROM SR). PICK UP SHIFTING BIT.
 1283            CAF    BIT14           MPTEMP CONTAINS THE SHIFT COUNT - 1.
 1284            TS     MPTEMP
 1285  2         TC     VSHRRND         SHIFT X COMPONENT.
 1286            DXCH   MPAC            SWAP X AND Y COMPONENTS.
 1287            DXCH   MPAC +3
 1288            DXCH   MPAC
 1289  2         TC     VSHRRND         SHIFT Y COMPONENT.
 1290            DXCH   MPAC            SWAP Y AND Z COMPONENTS.
 1291            DXCH   MPAC +5
 1292            DXCH   MPAC
 1293  2         TC     VSHRRND         SHIFT Z COMPONENT.
 1294            TCF    VROTATEX        RESTORE COMPONENTS TO PROPER PLACES.
P1295  2VECTOR SHIFT LEFT - DONE ONE PLACE AT A TIME.
 1296  2 -1      TS     MPTEMP          SHIFTING LOOP.
 1297   VSSL     EXTEND
 1298            DCA    MPAC
 1299            DAS    MPAC
 1300            EXTEND
 1301            BZF    +2
 1302  2         TC     OVERFLOW
 1303            EXTEND
 1304            DCA    MPAC +3
 1305            DAS    MPAC +3
 1306            EXTEND
 1307            BZF    +2
 1308  2         TC     OVERFLOW
 1309            EXTEND
 1310            DCA    MPAC +5
 1311            DAS    MPAC +5
 1312            EXTEND
 1313            BZF    +2
 1314  2         TC     OVERFLOW
 1315            CCS    MPTEMP          LOOP ON DECREMENTED SHIFT COUNTER.
 1316            TCF    VSSL -1
 1317            TCF    DANZIG          EXIT.
P1318            TSLC - TRIPLE SHIFT LEFT AND COUNT. SHIFTS MPAC LEFT UNTIL GREA
 1319  9TER THAN .5 IN MAGNITUDE, LEAVING
R1320  2THE COMPLEMENT OF THE NUMBER OF SHIFTS REQUIRED IN X.
 1321   TSLC2    TS     MPTEMP          START BY ZEROING SHIFT COUNT (IN A NOW).
 1322            TC     BRANCH          EXIT WITH NO SHIFTING IF ARGUMENT ZERO.
 1323            TCF    +2
 1324  2         TCF    ENDTSLC         STORES ZERO SHIFT COUNT IN THIS CASE.
 1325            CA     MPAC            BEGIN NORMALIZATION LOOP.
 1326  2         TCF    TSLCTEST
 1327   TSLCLOOP INCR   MPTEMP          INCREMENT SHIFT COUNTER.
 1328            EXTEND
 1329            DCA    MPAC +1
 1330            DAS    MPAC +1
 1331            AD     MPAC
 1332            ADS    MPAC
 1333   TSLCTEST DOUBLE                 SEE IF (ANOTHER) SHIFT IS REQUIRED.
 1334            OVSK
 1335  2         TCF    TSLCLOOP        YES - INCREMENT COUNT AND SHIFT AGAIN.
 1336   ENDTSLC  CS     MPTEMP
 1337            TCF    STORE1          STORE SHIFT COUNT AND RETURN TO DANZIG.
P1338            THE FOLLOWING ROUTINES PROCESSES THE GENERAL SHIFT INSTRUCTIONS
 1339  9 SR, SRR, SL, AND SLR.
R1340  2THE GIVEN ADDRESS IS DECODED AS FOLLOWS:
R1341            BITS 1-7    SHIFT COUNT (SUBADDRESS) LESS THAN 125 DECIMAL.
R1342            BIT 8       PSEUDO SIGN BIT (DETECTS CHANGE IN SIGN IN INDEXED
 1343  9SHIFTS).
R1344            BIT 9       0 FOR LEFT SHIFT, AND 1 FOR RIGHT SHIFT.
R1345            BIT 10      1 FOR TERMINAL ROUND ON SCALAR SHIFTS, 0 OTHERWISE.
R1346  2         BITS 11-15  0.
R1347  4THE ABOVE ENCODING IS DONE BY THE YUL SYSTEM.
 1348   GENSHIFT MASK   ADDRWD          GET SHIFT COUNT, TESTING FOR ZERO.
 1349            CCS    A               (ARRIVES WITH C(A) = LOW7).
 1350  2         TCF    GENSHFT2        IF NON-ZERO, PROCEED WITH DECREMENTED CT
 1351            CAF    BIT10           ZERO SHIFT COUNT. NO SHIFTS NEEDED BUT
 1352            MASK   ADDRWD          WE MIGHT HAVE TO ROUND MPAC ON SLR AND
 1353            CCS    A               SRR (SCALAR ONLY).
 1354            TC     ROUNDSUB
 1355  2         TCF    DANZIG
 1356   GENSHFT2 TS     MPTEMP          DECREMENTED SHIFT COUNT TO MPTEMP.
 1357            CAF    BIT8            TEST MEANING OF LOW SEVEN BIT COUNT IN
 1358            EXTEND                 MPTEMP NOW.
 1359            MP     ADDRWD
 1360            MASK   LOW2            JUMPS ON SHIFT DIRECTION (BIT8) AND
 1361            INDEX  A
 1362            TCF    +1              ORIGINAL SHIFT DIRECTION (BIT 9).
 1363            TCF    RIGHT-          NEGATIVE SHIFT COUNT FOR SL OR SLR.
 1364            TCF    LEFT            SL OR SLR.
 1365            TCF    LEFT-           NEGATIVE SHIFT COUNT WITH SR OR SRR.
P1366  2         GENERAL SHIFT RIGHT.
 1367   RIGHT    CCS    MODE            SEE IF VECTOR OR SCALAR.
 1368            TCF    GENSCR
 1369  2         TCF    GENSCR
 1370            CA     MPTEMP          SEE IF SHIFT COUNT GREATER THAN 13D.
 1371   VRIGHT2  AD     NEG12
 1372            EXTEND
 1373  2         BZMF   VSSR            IF SO, BRANCH AND SHIFT IMMEDIATELY.
 1374            AD     NEGONE          IF NOT, REDUCE MPTEMP BY A TOTAL OF 14,
 1375            TS     MPTEMP          AND DO A SHIFT RIGHT AND ROUND BY 14.
 1376            CAF    ZERO            THE ROUND AT THIS STAGE MAY INTRODUCE A
 1377            TS     L               ONE BIT ERROR IN A SHIFT RIGHT 15D.
 1378            XCH    MPAC
 1379            XCH    MPAC +1
 1380            TC     SETROUND        X COMPONENT NOW SHIFTED, SO MAKE UP THE
 1381            DAS    MPAC            ROUNDING QUANTITY (0 IN A AND 0 OR +-1
A1382                                   IN L).
 1383            XCH    MPAC +3         REPEAT THE ABOVE PROCESS FOR Y AND Z.
 1384            XCH    MPAC +4
 1385            TC     SETROUND
 1386  2         DAS    MPAC +3         NO OVERFLOW ON THESE ADDS.
 1387            XCH    MPAC +5
 1388            XCH    MPAC +6
 1389            TC     SETROUND
 1390  2         DAS    MPAC +5
 1391            CCS    MPTEMP          SEE IF DONE, DOING FINAL DECREMENT.
 1392            TCF    VRIGHT2
 1393   TCSUBTR  TCF    SUBTR
 1394  2BIASLO   DEC    .2974 B-1       SQRT CONSTANT
 1395  4         TCF    DANZIG
 1396   SETROUND DOUBLE                 MAKES UP ROUNDING QUANTITY FROM ARRIVING
 1397            TS     MPAC +2         C(A). L IS ZERO INITIALLY.
 1398            CAF    ZERO
 1399            XCH    L
 1400            TC     Q               RETURN AND DO THE DAS, RESETTING L TO 0.
P1401  2         PROCESS SR AND SRR FOR SCALARS.
 1402   GENSCR   CA     MPTEMP          SEE IF THE ORIGINAL SHIFT COUNT WAS LESS
 1403    +1      AD     NEG12           THAN 14D.
 1404            EXTEND
 1405  2         BZMF   DOSSHFT         DO THE SHIFT IMMEDIATELY IF SO.
 1406    +4      AD     NEGONE          IF NOT, DECREMENT SHIFT COUNT BY 14D AND
 1407            TS     MPTEMP          SHIFT MPAC RIGHT 14 PLACES.
 1408            CAF    ZERO
 1409            XCH    MPAC
 1410            XCH    MPAC +1
 1411            TS     MPAC +2
 1412            CCS    MPTEMP          SEE IF FINISHED, DO FINAL DECREMENT.
 1413            TC     GENSCR +1
 1414   NEG12    DEC    -12
 1415   SLOPEHI  DEC    .5884           SQRT CONSTANT.
 1416            CAF    BIT10           FINISHED WITH SHIFT. SEE IF ROUND
 1417            MASK   ADDRWD          WANTED.
 1418            CCS    A
 1419            TC     ROUNDSUB
 1420  2         TCF    DANZIG          DO SO AND/OR EXIT.
 1421   DOSSHFT  INDEX  MPTEMP          PICK UP SHIFTING BIT.
 1422            CAF    BIT14
 1423            TS     MPTEMP
 1424            CAF    BIT10           SEE IF TERMINAL ROUND DESIRED.
 1425            MASK   ADDRWD
 1426            CCS    A
 1427            TCF    RIGHTR          YES.
 1428            TCF    MPACSHR         JUST SHIFT RIGHT.
P1429  2         PROCESS THE RIGHT- (SL(R) WITH A NEGATIVE COUNT), LEFT-, AND LE
 1430  9FT OPTIONS.
 1431   RIGHT-   CS     MPTEMP          GET ABSOLUTE VALUE - 1 OF SHIFT COUNT
 1432            AD     OCT176          UNDERSTANDING THAT BIT8 (PSEUDO-SIGN)
 1433            TS     MPTEMP          WAS 1 INITIALLY.
 1434  2         TCF    RIGHT           DO NORMAL SHIFT RIGHT.
 1435   LEFT-    CS     MPTEMP          SAME PROLOGUE TO LEFT FOR INDEXED RIGHT
 1436            AD     OCT176          SHIFTS WHOSE NET SHIFT COUNT IS NEGATIVE
 1437  2         TS     MPTEMP
 1438   LEFT     CCS    MODE            SINCE LEFT SHIFTING IS SONE ONE PLACE AT
 1439            TCF    GENSCL          A TIME, NO COMPARISON WITH 14 NEED BE
 1440            TCF    GENSCL          DONE. FOR SCALARS, SEE IF TERMINAL ROUND
 1441  2         TCF    VSSL            DESIRED. FOR VECTORS, SHIFT IMMEDIATELY.
 1442   GENSCL   CAF    BIT6            PUT ROUNDING BIT (BIT10 OF ADDRWD) INTO
 1443            EXTEND                 BIT 15 OF CYR WHERE THE ROUNDING BIT OF
 1444            MP     ADDRWD          A SHORT SHIFT LEFT WOULD BE.
 1445            TS     CYR
 1446            TCF    TSSL +2         DO THE SHIFT.
P1447            SCALAR DIVISION INSTRUCTIONS, DDV AND BDDV, ARE EXECUTED HERE.
 1448  9AT THIS POINT, THE DIVIDEND IS IN MPAC
R1449  2AND THE DIVISOR IN BUF.
 1450   DDV/BDDV CS     ONE             INITIALIZATION.
 1451            TS     DVSIGN          +-1 FOR POSITIVE QUOTIENT - -0 FOR NEG.
 1452            TS     DVNORMCT        DIVIDEND NORMALIZATION COUNT.
 1453  2         TS     MAXDVSW         NEAR-ONE DIVIDE FLAG.
 1454            CCS    BUF             FORCE BUF POSITIVE WITH THE MAJOR PART
 1455            TCF    BUF+            NON-ZERO.
 1456            TCF    +2
 1457  2         TCF    BUF-
 1458            XCH    BUF +1          SHIFT DIVIDEND AND DIVISOR LEFT 14.
 1459            XCH    BUF
 1460            XCH    MPAC +1
 1461            XCH    MPAC
 1462            EXTEND                 CHECK FOR OVERFLOW.
 1463            BZF    +2
 1464  2         TCF    DVOVF
 1465            CCS    BUF             TRY AGAIN ON FORMER MINOR PART.
 1466            TCF    BUF+
 1467            TCF    DVOVF           OVERFLOW ON ZERO DIVISOR.
 1468  2         TCF    BUF-
 1469   DVOVF    CAF    POSMAX          ON DIVISION OVERFLOW OF ANY SORT, SET
 1470            TS     MPAC            SET DP MPAC TO +-POSMAX.
 1471            TC     FINALDV +3
 1472            CAF    ONE             SET OVERFLOW INDICATOR AND EXIT.
 1473  2         TCF    SETOVF
 1474   BUF-     EXTEND                 IF BUF IS NEGATIVE, COMPLEMENT IT AND
 1475            DCS    BUF             MAINTAIN DVSIGN FOR FINAL QUOTIENT SIGN.
 1476            DXCH   BUF
 1477  2         INCR   DVSIGN          NOW -0.
 1478   BUF+     CCS    MPAC            FORCE MPAC POSITIVE, CHECKING FOR ZERO
 1479            TCF    MPAC+           DIVIDEND IN THE PROCESS.
 1480            TCF    +2
 1481            TCF    MPAC-
 1482            CCS    MPAC +1
 1483            TCF    MPAC+
 1484            TCF    DANZIG          EXIT IMMEDIATELY ON ZERO DIVIDEND.
 1485            TCF    MPAC-
 1486  2         TCF    DANZIG
 1487   MPAC-    EXTEND                 FORCE MPAC POSITIVE AS BUF IN BUF-.
 1488            DCS    MPAC
 1489            DXCH   MPAC
 1490  8         INCR   DVSIGN          NOW +1 OR -0.
 1491   MPAC+    CS     MPAC            CHECK FOR DIVISION OVERFLOW. IF THE
 1492            AD     NEGONE          MAJOR PART OF THE DIVIDEND IS LESS THAN
 1493            AD     BUF             THE MAJOR PART OF THE DIVISOR BY AT
 1494            CCS    A               LEAST TWO, WE CAN PROCEED IMMEDIATELY
 1495            TCF    DVNORM          WITHOUT NORMALIZATION PRODUCING A DVMAX.
 1496  2-1/2+2   OCT    60001           USED IN SQRTSUB.
 1497            TCF    +1              IF THE ABOVE DOES NOT HOLD, FORCE SIGN
 1498            CAF    HALF            AGREEMENT IN NUMERATOR AND DENOMINATOR
 1499            DOUBLE                 TO FACILITATE OVERFLOW AND NEAR-ONE
 1500            AD     MPAC +1         CHECKING.
 1501            TS     MPAC +1
 1502            CAF    ZERO
 1503            AD     POSMAX
 1504  2         ADS    MPAC
 1505            CAF    HALF            SAME FOR BUF.
 1506            DOUBLE
 1507            AD     BUF +1
 1508            TS     BUF +1
 1509            CAF    ZERO
 1510            AD     POSMAX
 1511  2         ADS    BUF
 1512            CS     MPAC            CHECK MAGNITUDE OF SIGN-CORRECTED
 1513            AD     BUF             OPERANDS.
 1514            CCS    A
 1515            TCF    DVNORM          DIVIDE OK - WILL NOT BECOME MAXDV CASE.
 1516   LBUF2    ADRES  BUF2
 1517  2         TCF    DVOVF           DIVISOR NOT LESS THAN DIVIDEND - OVF.
 1518            TS     MAXDVSW         IF THE MAJOR PARTS OF THE DIVIDEND AND
 1519            CS     MPAC +1         DIVISOR ARE EQUAL, A SPECIAL APPROXIMA-
 1520            AD     BUF +1          TION IS USED (PROVIDED THE DIVISION IS
 1521            EXTEND                 POSSIBLE, OF COURSE).
 1522            BZMF   DVOVF
 1523  8         TCF    DVNORM          IF NO OVERFLOW.
 1524   BUFNORM  EXTEND                 ADD -1 TO AUGMENT SHIFT COUNT AND SHIFT
 1525            AUG    DVNORMCT        LEFT ONE PLACE.
 1526            EXTEND
 1527            DCA    BUF
 1528  2         DAS    BUF
 1529   DVNORM   CA     BUF             SEE IF DIVISOR NORMALIZED YET.
 1530            DOUBLE
 1531            OVSK
 1532  2         TCF    BUFNORM         NO - SHIFT LEFT ONE AND TRY AGAIN.
 1533            DXCH   MPAC            CALL DIVIDEND NORMALIZATION SEQUENCE
 1534            INDEX  DVNORMCT        PRIOR TO DOING THE DIVIDE.
 1535  2         TC     MAXTEST
 1536            TS     MPAC +2         RETURNS WITH DIVISION DONE AND C(A) = 0.
 1537            TCF    DANZIG
P1538  2         THE FOLLOWING ARE PROLOGUES TO SHIFT THE DIVIDEND ARRIVING IN A
 1539  9 AND L BEFORE THE DIVIDE.
 1540    -21D    LXCH   SR              SPECIAL PROLOGUE FOR UNIT WHEN THE
 1541            EXTEND                 LENGTH OF THE ARGUMENT WAS NOT LESS THAN
 1542            MP     HALF            .5. IN THIS CASE, EACH COMPONENT MUST BE
 1543            XCH    L               SHIFTED RIGHT ONE TO PRODUCE A HALF-UNIT
 1544            AD     SR              VECTOR.
 1545            XCH    L
 1546  2         TCF    GENDDV +1       WITH DP DIVIDEND IN A,L.
 1547            DDOUBL                 PROLOGUE WHICH NORMALIZES THE DIVIDEND
 1548            DDOUBL                 WHEN IT IS KNOWN THAT NO DIVISION
 1549            DDOUBL                 OVERFLOW WILL OCCUR.
 1550            DDOUBL
 1551            DDOUBL
 1552            DDOUBL
 1553            DDOUBL
 1554            DDOUBL
 1555            DDOUBL
 1556            DDOUBL
 1557            DDOUBL
 1558            DDOUBL
 1559            DDOUBL
 1560  2         DXCH   MPAC
 1561   MAXTEST  CCS    MAXDVSW         0 IF MAJORS MIGHT BE =, -1 OTHERWISE.
 1562  2BIASHI   DEC    .4192 B-1       SQRT CONSTANTS
 1563            TCF    MAXDV           CHECK TO SEE IF THEY ARE NOW EQUAL.
P1564            THE FOLLOWING IS A GENERAL PURPOSE DOUBLE PRECISION DIVISION RO
 1565  9UTINE. IT DIVIDES MPAC BY BUF AND LEAVES
R1566  2THE RESULT IN MPAC. THE FOLLOWING CONDITIONS MUST BE SATISFIED:
R1567  2         1.  THE DIVISOR (BUF) MUST BE POSITIVE AND NOT LESS THAN .5.
R1568            2.  THE DIVIDEND (MPAC) MUST BE POSITIVE WITH THE MAJOR PART OF
 1569  9 MPAC STRICTLY LESS THAN THAT OF BUF
R1570  2(A SPECIAL APPROXIMATION, MAXDV, IS USED WHEN THE MAJOR PARTS ARE EQUAL)
 1571  9.
R1572            UNDERSTANDING THAT A/B = Q + S(R/B) WHERE S = 2(-14) AND Q AND
 1573  9R ARE QUOTIENT AND REMAINDER, RESPEC-
R1574   TIVELY, THE FOLLOWING APPROXIMATION IS OBTAINED BY MULTIPLYING ABOVE AND
 1575  9 BELOW BY C - SD AND NEGLECTING TERMS OF
R1576  2ORDER S-SQUARED (POSSIBLY INTRODUCING ERROR INTO THE LOW TWO BITS OF THE
 1577  9 RESULT). SIGN AGREEMENT IS UNNECESSARY.
R1578            A + SB .      (R - QD)
 1579  9    A + SB
R1580            ------ = Q + S(------) WHERE Q AND R ARE QUOTIENT AND REMAINDER
 1581  9 OF ------ RESPECTIVELY.
R1582  4         C + SD        (  C   )
 1583  9      C
 1584   GENDDV   DXCH   MPAC            WE NEED A AND B ONLY FOR FIRST DV.
 1585    +1      EXTEND                 (SPECIAL UNIT PROLOGUE ENTERS HERE).
 1586            DV     BUF             A NOW CONTAINS Q AND L, R.
 1587  2         DXCH   MPAC
 1588            CS     MPAC            FORM DIVIDEND FOR MINOR PART OF RESULT.
 1589            EXTEND
 1590            MP     BUF +1
 1591            AD     MPAC +1         OVERFLOW AT THIS POINT IS POSITIVE SINCE
 1592            OVSK                   R IS POSITIVE IN EVERY CASE.
 1593  2         TCF    +5
 1594            EXTEND                 OVERFLOW CAN BE REMOVED BY SUBTRACTING C
 1595            SU     BUF             (BUF) ONCE SINCE R IS ALWAYS LESS THAN C
 1596            INCR   MPAC            IN THIS CASE. INCR COMPENSATES SUBTRACT.
 1597  2         TCF    +DOWN           (SINCE C(A) IS STILL POSITIVE).
 1598    +5      EXTEND                 C(A) CAN BE MADE LESS THAN C IN MAGNI-
 1599            BZMF   -UP             TUDE BY DIMINISHING IT BY C (SINCE C IS
A1600  8                                NOT LESS THAN .5) UNLESS C(A) = 0.
 1601   +DOWN    EXTEND
 1602            SU     BUF             IF POSITIVE, REDUCE ONLY IF NECESSARY
 1603            EXTEND                 SINCE THE COMPENSATING INCR MIGHT CAUSE
 1604            BZF    +3              OVERFLOW.
 1605            EXTEND                 DONT SUBTRACT UNLESS RESULT IS POSITIVE
 1606  2         BZMF   ENDMAXDV        OR ZERO.
 1607    +3      INCR   MPAC            KEEP SUBTRACT HERE AND COMPENSATE.
 1608  2         TCF    FINALDV
 1609   -UP      EXTEND                 IF ZERO, SET MINOR PART OF RESULT TO
 1610  2         BZF    FINALDV +3      ZERO.
 1611            EXTEND                 IF NEGATIVE, ADD C TO A, SUBTRACTING ONE
 1612            DIM    MPAC            TO COMPENSATE. DIM IS OK HERE SINCE THE
 1613  8ENDMAXDV AD     BUF             MAJOR PART NEVER GOES NEGATIVE.
 1614   FINALDV  ZL                     DO DV TO OBTAIN MINOR PART OF RESULT.
 1615            EXTEND
 1616            DV     BUF
 1617  2 +3      TS     MPAC +1
 1618            CCS    DVSIGN          LEAVE RESULT POSITIVE UNLESS C(DVSIGN)=
 1619            TC     Q               -0.
 1620            TC     Q
 1621  2         TC     Q
 1622            EXTEND
 1623            DCS    MPAC
 1624            DXCH   MPAC
 1625            CAF    ZERO            SO WE ALWAYS RETURN WITH C(A) = 0.
 1626            TC     Q
P1627            IF THE MAJOR PARTS OF THE DIVISOR AND DIVIDEND ARE EQUAL, BUT T
 1628  9HE MINOR PARTS ARE SUCH THAT THE
R1629   DIVIDEND IS STRICTLY LESS THAN THE DIVISOR IN MAGNITUDE, THE FOLLOWING A
 1630  9PPROXIMATION IS USED. THE ASSUMPTIONS
R1631  2ARE THE SAME AS THE GENERAL ROUTINE WITH THE ADDITION THAT SIGN AGREEMEN
 1632  9T IS NECESSARY (B, C, & D POSITIVE).
R1633                   C + SB .          (C + B - D)
R1634                   ------ = 37777 + S(---------)
R1635  2                C + SD            (    C    )
R1636  4         THE DIVISION MAY BE PERFORMED IMMEDIATELY SINCE B IS STRICTLY L
 1637  9ESS THAN D AND C IS NOT LESS THAN .5.
 1638   MAXDV    CS     MPAC            SEE IF MAXDV CASE STILL HOLDS AFTER
 1639            AD     BUF             NORMALIZATION.
 1640            EXTEND
 1641            BZF    +2
 1642  2         TCF    GENDDV          MPAC NOW LESS THAN BUF - DIVIDE AS USUAL
 1643    +2      CAF    POSMAX          SET MAJOR PART OF RESULT.
 1644  2         TS     MPAC
 1645            CS     BUF +1          FORM DIVIDEND OF MINOR PART OF RESULT.
 1646            AD     MPAC +1
 1647            TCF    ENDMAXDV        GO ADD C AND DO DIVIDE, ATTACHING SIGN
A1648                                   BEFORE EXITING.
P1649  2         VECTOR DIVIDED BY SCALAR, V/SC, IS EXECUTED HERE. THE VECTOR IS
 1650  9 NOW IN MPAC WITH SCALAR IN BUF.
 1651   V/SC2    CS     ONE             INITIALIZE DIVIDEND NORMALIZATION COUNT
 1652            TS     DVNORMCT        AND DIVISION SIGN REGISTER.
 1653  2         TS     VBUF +5
 1654            CCS    BUF             FORCE DIVISOR POSITIVE WITH MAJOR PART
 1655            TCF    /BUF+           NON-ZERO (IF POSSIBLE).
 1656            TCF    +2
 1657  2         TCF    /BUF-
 1658            XCH    BUF +1          SHIFT VECTOR AND SCALAR LEFT 14.
 1659            XCH    BUF
 1660            XCH    MPAC +1
 1661            XCH    MPAC
 1662            EXTEND                 CHECK FOR OVERFLOW IN EACH CASE.
 1663            BZF    +2
 1664  2         TCF    DVOVF
 1665            XCH    MPAC +4
 1666            XCH    MPAC +3
 1667            EXTEND
 1668            BZF    +2
 1669  2         TCF    DVOVF
 1670            XCH    MPAC +6
 1671            XCH    MPAC +5
 1672            EXTEND
 1673            BZF    +2
 1674  2         TCF    DVOVF
 1675            CCS    BUF
 1676            TCF    /BUF+
 1677            TCF    DVOVF           ZERO DIVISOR - OVERFLOW.
 1678            TCF    /BUF-
 1679  2         TCF    DVOVF
 1680   /BUF-    EXTEND                 ON NEGATIVE, COMPLEMENT BUF AND MAINTAIN
 1681            DCS    BUF             DVSIGN IN VBUF +5.
 1682            DXCH   BUF
 1683  8         INCR   VBUF +5
 1684   /BUF+    CAF    HALF            FORCE SIGN AGREEMENT IN DIVISOR.
 1685            DOUBLE
 1686            AD     BUF +1
 1687            TS     BUF +1
 1688            CAF    ZERO
 1689            AD     POSMAX
 1690  2         ADS    BUF
 1691            XCH    BUF2            LEAVE ABS(ORIGINAL DIVISOR) IN BUF2 FOR
 1692            CA     BUF +1          OVERFLOW TESTING.
 1693            TS     BUF2 +1
 1694  2         TCF    /NORM           NORMALIZE DIVISOR IN BUF.
 1695   /NORM2   EXTEND                 IF LESS THAN .5, AUGMENT DVNORMCT AND
 1696            AUG    DVNORMCT        DOUBLE DIVISOR.
 1697            EXTEND
 1698            DCA    BUF
 1699  2         DAS    BUF
 1700   /NORM    CA     BUF             SEE IF DIVISOR NORMALIZED.
 1701            DOUBLE
 1702            OVSK
 1703  2         TCF    /NORM2          DOUBLE AND TRY AGAIN IF NOT.
 1704            TC     V/SCDV          DO X COMPONENT DIVIDE.
 1705            DXCH   MPAC +3         SUPPLY ARGUMENTS IN USUAL SEQUENCE.
 1706            DXCH   MPAC
 1707  2         DXCH   MPAC +3
 1708            TC     V/SCDV          Y COMPONENT.
 1709            DXCH   MPAC +5
 1710            DXCH   MPAC
 1711  2         DXCH   MPAC +5
 1712            TC     V/SCDV          Z COMPONENT.
 1713            TCF    VROTATEX        GO RE-ARRANGE COMPONENTS BEFORE EXIT.
P1714  2         SUBROUTINE USED BY V/SC TO DIVIDE VECTOR COMPONENT IN MPAC,+1 B
 1715  9Y THE SCALAR GIVEN IN BUF.
 1716   V/SCDV   CA     VBUF +5         REFLECTS SIGN OF SCALAR.
 1717  2         TS     DVSIGN
 1718            CCS    MPAC            FORCE MPAC POSITIVE, EXITING ON ZERO.
 1719            TCF    /MPAC+
 1720            TCF    +2
 1721  2         TCF    /MPAC-
 1722            CCS    MPAC +1
 1723            TCF    /MPAC+
 1724            TC     Q
 1725            TCF    /MPAC-
 1726  2         TC     Q
 1727   /MPAC-   EXTEND                 USUAL COMPLEMENTING AND SETTING OF SIGN.
 1728            DCS    MPAC
 1729            DXCH   MPAC
 1730  2         INCR   DVSIGN
 1731   /MPAC+   CS     ONE             INITIALIZE NEAR-ONE SWITCH.
 1732  2         TS     MAXDVSW
 1733            CS     MPAC            CHECK POSSIBLE OVERFLOW.
 1734            AD     BUF2            UNNORMALIZED INPUT DIVISOR.
 1735            EXTEND
 1736  2         BZMF   /AGREE          CHECK FOR NEAR-ONE OR OVERFLOW.
 1737   DDVCALL  DXCH   MPAC            CALL PRE-DIVIDE NORMALIZATION.
 1738            INDEX  DVNORMCT
 1739  8         TCF    MAXTEST
 1740   /AGREE   CAF    HALF            FORCE SIGN AGREEMENT IN DIVIDEND
 1741            DOUBLE                 (ALREADY DONE FOR DIVISOR).
 1742            AD     MPAC +1
 1743            TS     MPAC +1
 1744            CAF    ZERO
 1745            AD     POSMAX
 1746  2         ADS    MPAC
 1747            CS     MPAC            CHECK TO SEE IF OVERFLOW GONE OR IF
 1748            AD     BUF2            NEAR-ONE CASE IS PRESENT.
 1749            CCS    A
 1750            TCF    DDVCALL         NOT NEAR-ONE.
 1751   SLOPELO  DEC    .8324
 1752  2         TCF    DVOVF           NO HOPE.
 1753            TS     MAXDVSW         SIGNAL POSSIBLE NEAR-ONE CASE.
 1754            CS     MPAC +1         SEE IF DIVISION CAN BE DONE.
 1755            AD     BUF2 +1
 1756            EXTEND
 1757            BZMF   DVOVF
 1758            TCF    DDVCALL         GOING TO MAXDV.
P1759  2         THE FOLLOWING ROUTINE EXECUTES THE UNIT INSTRUCTION, WHICH TAKE
 1760  9S THE UNIT OF THE VECTOR IN MPAC.
 1761   UNIT     TC     MPACVBUF        SAVE THE ARGUMENT IN VBUF.
 1762            CAF    ZERO            MUST SENSE OVERFLOW IN FOLLOWING DOT.
 1763            XCH    OVFIND
 1764            TS     TEM1
 1765            TC     VSQSUB          DOT MPAC WITH ITSELF.
 1766            CA     TEM1
 1767            XCH    OVFIND
 1768            EXTEND
 1769            BZF    +2
 1770            TCF    DVOVF
 1771            EXTEND
 1772            DCA    MPAC            LEAVE THE SQUARE OF THE LENGTH OF THE
 1773            INDEX  FIXLOC          ARGUMENT IN LVSQUARE.
 1774  2         DXCH   LVSQUARE
 1775  2         TC     SQRTSUB         GO TAKE THE NORMALIZED SQUARE ROOT.
 1776            CCS    MPAC            CHECK FOR UNIT OVERFLOW.
 1777            TCF    +5              MPAC IS NOT LESS THAN .5 UNLESS
 1778            TS     L
 1779            INDEX  FIXLOC
 1780            DXCH   LV
 1781  2         TCF    DVOVF           INPUT TO SQRTSUB WAS 0.
 1782            CS     FOURTEEN        SEE IF THE INPUT WAS SO SMALL THE THE
 1783            AD     MPTEMP          FIRST TWO REGISTERS OF THE SQUARE WERE 0
 1784            CCS    A
 1785            COM                    IF SO, SAVE THE NEGATIVE OF THE SHIFT
 1786  2         TCF    SMALL           COUNT -15D.
 1787  2         TCF    LARGE           (THIS IS USUALLY THE CASE.)
 1788            CS     THIRTEEN        IF THE SHIFT COUNT WAS EXACTLY 14, SET
 1789  2         TS     MPTEMP          THE PRE-DIVIDE NORM COUNT TO -13D.
 1790            CA     MPAC            SHIFT THE LENGTH RIGHT 14 BEFORE STORING
 1791   SMALL2   TS     L               (SMALL EXITS TO THIS POINT).
 1792            CAF    ZERO
 1793  2         TCF    LARGE2          GO TO STORE LENGTH AND PROCEED.
 1794   LARGE    CCS    MPTEMP          MOST ALL CASES COME HERE.
 1795  2         TCF    LARGE3          SEE IF NO NORMALIZATION WAS REQUIRED BY
 1796            CS     SRDDV           SQRT, AND IF SO, SET UP FOR A SHIFT
 1797            TS     MPTEMP          RIGHT 1 BEFORE DIVIDING TO PRODUCE
 1798            EXTEND                 THE DESIRED HALF UNIT VECTOR.
 1799            DCA    MPAC
 1800  8         TCF    LARGE2
 1801   LARGE3   COM                    LEAVE NEGATIVE OF SHIFT COUNT-1 FOR
 1802  2         TS     MPTEMP          PREDIVIDE LEFT SHIFT.
 1803            COM                    PICK UP REQUIRED SHIFTING BIT TO UNNORM-
 1804            INDEX  A               ALIZE THE SQRT RESULT.
 1805            CAF    BIT14
 1806            TS     BUF
 1807            EXTEND
 1808            MP     MPAC +1
 1809            XCH    BUF
 1810            EXTEND                 (UNNORMALIZE THE SQRT FOR LV).
 1811            MP     MPAC
 1812            XCH    L
 1813            AD     BUF
 1814  2         XCH    L
 1815   LARGE2   INDEX  FIXLOC
 1816  2         DXCH   LV              LENGTH NOW STORED IN WORK AREA.
 1817            CS     ONE
 1818  2         TS     MAXDVSW         NO MAXDV CASES IN UNIT.
 1819            DXCH   VBUF            PREPARE X COMPONENT FOR DIVIDE, SETTING
 1820            DXCH   MPAC            LENGTH OF VECTOR AS DIVISOR IN BUF.
 1821            DXCH   BUF
 1822  2         TC     UNITDV
 1823            DXCH   VBUF +2         DO Y AND Z IN USUAL FASHION SO WE CAN
 1824            DXCH   MPAC            EXIT THROUGH VROTATEX.
 1825            DXCH   MPAC +3
 1826  2         TC     UNITDV
 1827            DXCH   VBUF +4
 1828            DXCH   MPAC
 1829            DXCH   MPAC +5
 1830            TC     UNITDV
 1831            TCF    VROTATEX        AND EXIT.
P1832            IF THE LENGTH OF THE ARGUMENT VECTOR WAS LESS THAN 2(-28), EACH
 1833  9 COMPONENT MUST BE SHIFTED LEFT AT LEAST
R1834  214 PLACES BEFORE THE DIVIDE. NOTE THAT IN THIS CASE, THE MAJOR PART OF E
 1835  9ACH COMPONENT IS ZERO.
 1836  2SMALL    TS     MPTEMP          NEGATIVE OF PRE-DIVIDE SHIFT COUNT.
 1837            CAF    ZERO            SHIFT EACH COMPONENT LEFT 14.
 1838            XCH    VBUF +1
 1839            XCH    VBUF
 1840            XCH    VBUF +3
 1841            XCH    VBUF +2
 1842            XCH    VBUF +5
 1843  2         XCH    VBUF +4
 1844            CS     MPTEMP
 1845            INDEX  A
 1846            CAF    BIT14
 1847            EXTEND
 1848            MP     MPAC
 1849  2         TCF    SMALL2
 1850   THIRTEEN DEC    13
 1851   FOURTEEN DEC    14
P1852  2         THE FOLLOWING ROUTINE SETS UP THE CALL TO THE DIVIDE ROUTINES.
 1853   UNITDV   CCS    MPAC            FORCE MPAC POSITIVE IF POSSIBLE, SETTING
 1854            TCF    UMPAC+          DVSIGN ACCORDING TO THE SIGN OF MPAC
 1855            TCF    +2              SINCE THE DIVISOR IS ALWAYS POSITIVE
 1856  2         TCF    UMPAC-          HERE.
 1857            CCS    MPAC +1
 1858            TCF    UMPAC+
 1859            TC     Q               EXIT IMMEDIATELY ON ZERO.
 1860            TCF    UMPAC-
 1861  2         TC     Q
 1862   UMPAC-   CS     ZERO            IF NEGATIVE, SET -0 IN DVSIGN FOR FINAL
 1863            TS     DVSIGN          COMPLEMENT.
 1864            EXTEND
 1865            DCS    MPAC            PICK UP ABSOLUTE VALUE OF ARG AND JUMP.
 1866            INDEX  MPTEMP
 1867  2         TCF    MAXTEST -1
 1868   UMPAC+   TS     DVSIGN          SET DVSIGN FOR POSITIVE QUOTIENT.
 1869            DXCH   MPAC
 1870            INDEX  MPTEMP
 1871            TCF    MAXTEST -1
P1872  2         MISCELLANEOUS UNARY OPERATIONS.
 1873   DSQ      TC     DSQSUB          SQUARE THE DP CONTENTS OF MPAC.
 1874  2         TCF    DANZIG
 1875   ABVALABS CCS    MODE            ABVAL OR ABS INSTRUCTION.
 1876            TCF    ABS             DO ABS ON SCALAR.
 1877  2         TCF    ABS
 1878   ABVAL    TC     VSQSUB          DOT MPAC WITH ITSELF.
 1879  2         LXCH   MODE            MODE IS NOW DP (L ZERO AFTER DAS).
 1880            EXTEND                 STORE SQUARE OF LENGTH IN WORK AREA.
 1881            DCA    MPAC
 1882            INDEX  FIXLOC
 1883  2         DXCH   LVSQUARE
 1884   SQRT     TC     SQRTSUB         TAKE THE SQUARE ROOT OF MPAC.
 1885            CCS    MPTEMP          RETURNED NORMALIZED SQUARE ROOT. SEE IF
 1886            TCF    +2              ANY UN-NORMALIZATION REQUIRED AND EXIT
 1887  2         TCF    DANZIG          IF NOT.
 1888            AD     NEG12           A RIGHT SHIFT OF MORE THAN 13 COULD BE
 1889            EXTEND                 REQUIRED IF INPUT WAS ZERO IN MPAC,+1.
 1890            BZMF   SQRTSHFT        GOES HERE IN MOST CASES.
 1891            ZL                     IF A LONG SHIFT IS REQUIRED, GO TO
 1892            LXCH   ADDRWD          GENERAL RIGHT SHIFT ROUTINES.
 1893  2         TCF    GENSCR +4       ADDRWD WAS ZERO TO PREVENT ROUND.
 1894   SQRTSHFT INDEX  MPTEMP          SELECT SHIFTING BIT AND EXIT THROUGH
 1895            CAF    BIT15           SHIFT ROUTINES.
 1896            TS     MPTEMP
 1897            CAF    ZERO            TO ZERO MPAC +2 IN THE PROCESS.
 1898  2         TCF    MPACSHR +3
 1899   ABS      TC     BRANCH          TEST SIGN OF MPAC AND COMPLEMENT IF
 1900            TCF    DANZIG
 1901            TCF    DANZIG
 1902  8         TCF    COMP
 1903   VDEF     CS     FOUR            VECTOR DEFINE - ESSENTIALLY TREATS
 1904            ADS    PUSHLOC         SCALAR IN MPAC AS X COMPONENT, PUSHES UP
 1905            EXTEND                 FOR Y AND THEN AGAIN FOR Z.
 1906            INDEX  A
 1907            DCA    2
 1908            DXCH   MPAC +3
 1909            EXTEND
 1910            INDEX  PUSHLOC
 1911            DCA    0
 1912            DXCH   MPAC +5
 1913            CS     ONE             MODE IS NOW VECTOR.
 1914  2         TCF    NEWMODE
 1915   VSQ      TC     VSQSUB          DOT MPAC WITH ITSELF.
 1916            CAF    ZERO
 1917  2         TCF    NEWMODE         MODE IS NOW DP.
 1918   PUSH     EXTEND                 PUSH DOWN MPAC LEAVING IT LOADED.
 1919            DCA    MPAC
 1920            INDEX  PUSHLOC         PUSH DOWN FIRST TWO REGISTERS IN EACH
 1921  2         DXCH   0
 1922            INDEX  MODE            INCREMENT PUSHDOWN POINTER.
 1923            CAF    NO.WDS
 1924  2         ADS    PUSHLOC
 1925            CCS    MODE
 1926            TCF    TPUSH           PUSH DOWN MPAC +2.
 1927  2         TCF    DANZIG          DONE FOR DP.
 1928            EXTEND                 ON VECTOR, PUSH DOWN Y AND Z COMPONENTS.
 1929            DCA    MPAC +3
 1930            INDEX  PUSHLOC
 1931            DXCH   0 -4
 1932            EXTEND
 1933            DCA    MPAC +5
 1934            INDEX  PUSHLOC
 1935            DXCH   0 -2
 1936  2         TCF    DANZIG
 1937   TPUSH    CA     MPAC +2
 1938  2         TCF    ENDTPUSH +2
 1939   RVQ      INDEX  FIXLOC          RVQ - RETURN IVA QPRET.
 1940            CA     QPRET
 1941            TCF    GOTO +1
P1942            THE FOLLOWING SUBROUTINES ARE USED IN SQUARING MPAC, IN BOTH TH
 1943  9E SCALAR AND VECTOR SENSE. THEY ARE
R1944  2SPECIAL CASES OF DMPSUB AND DOTSUB, PUT IN TO SAVE SOME TIME.
 1945   DSQSUB   CA     MPAC +1         SQUARES THE SCALAR CONTENTS OF MPAC.
 1946            EXTEND
 1947            SQUARE
 1948            TS     MPAC +2
 1949            CAF    ZERO            FORM 2(CROSS TERM).
 1950            XCH    MPAC +1
 1951            EXTEND
 1952            MP     MPAC
 1953            DDOUBL                 AND MAYBE OVERFLOW.
 1954            DAS    MPAC +1         AND SET A TO NET OVERFLOW.
 1955            XCH    MPAC
 1956            EXTEND
 1957            SQUARE
 1958            DAS    MPAC
 1959  2         TC     Q
 1960   VSQSUB   EXTEND                 DOTS THE VECTOR IN MPAC WITH ITSELF.
 1961            QXCH   DOTRET
 1962            TC     DSQSUB          SQUARE THE X COMPONENT.
 1963            DXCH   MPAC +3
 1964            DXCH   MPAC
 1965            DXCH   BUF             SO WE CAN END IN DOTSUB.
 1966            CA     MPAC +2
 1967  2         TS     BUF +2
 1968            TC     DSQSUB          SQUARE Y COMPONENT.
 1969            DXCH   MPAC +1
 1970            DAS    BUF +1
 1971            AD     MPAC
 1972            AD     BUF
 1973            TS     BUF
 1974            TCF    +2
 1975  2         TS     OVFIND          IF OVERFLOW.
 1976            DXCH   MPAC +5
 1977            DXCH   MPAC
 1978            TC     DSQSUB          SQUARE Z COMPONENT.
 1979            TCF    ENDDOT          END AS IN DOTSUB.
P1980            DOUBLE PRECISION SQUARE ROOT ROUTINE. TAKE THE SQUARE ROOT OF T
 1981  9HE TRIPLE PRECISION (MPAC +2 USED ONLY
R1982   IN NORMALIZATION) CONTENTS OF MPAC AND LEAVE THE NORMALIZED RESULT IN MP
 1983  9AC (C(MPAC) GREATER THAN OR EQUAL TO
R1984  4.5). THE RIGHT SHIFT COUNT (TO UNNORMALIZE) IS LEFT IN MPTEMP.
 1985   SQRTSUB  CAF    ZERO            START BY ZEROING RIGHT SHIFT COUNT.
 1986  2         TS     MPTEMP
 1987            CCS    MPAC            CHECK FOR POSITIVE ARGUMENT, SHIFTING
 1988            TCF    SMPAC+          FIRST SIGNIFICANT MPAC REGISTER INTO
 1989            TCF    +2              MPAC ITSELF.
 1990  2         TCF    SQRTNEG         SEE IF MAG OF ARGUMENT LESS THAN 10(-4).
 1991            XCH    MPAC +2         MPAC IS ZERO - SHIFT LEFT 14.
 1992            XCH    MPAC +1
 1993            TS     MPAC
 1994            CAF    SEVEN           AUGMENT RIGHT SHIFT COUNTER.
 1995  2         TS     MPTEMP
 1996            CCS    MPAC            SEE IF MPAC NOW PNZ.
 1997            TCF    SMPAC+
 1998            TCF    +2
 1999  2         TCF    ZEROANS         NEGATIVE BUT LESS THAN 10(-4) IN MAG.
 2000            XCH    MPAC +1         ZERO - SHIFT LEFT 14 AGAIN.
 2001            TS     MPAC
 2002            CAF    SEVEN           AUGMENT RIGHT SHIFT COUNTER.
 2003  2         ADS    MPTEMP
 2004            CCS    MPAC
 2005            TCF    SMPAC+
 2006            TC     Q               SQRT(0) = 0.
 2007            TCF    ZEROANS
 2008  4         TC     Q
 2009   SQRTNEG  CCS    A               ARGUMENT IS NEGATIVE, BUT SEE IF SIGN-
 2010  2         TCF    SQRTABRT        CORRECTED ARGUMENT IS LESS THAN 10(-4)
 2011            CCS    MPAC +1         IN MAGNITUDE. IF SO, CALL ANSWER ZERO.
 2012   ZEROANS  CAF    ZERO            FORCE ANSWER TO ZERO HERE.
 2013            TCF    FIXROOT
 2014            TCF    SQRTABRT
 2015  2         TCF    FIXROOT
 2016   SQRTABRT TC     ABORT
 2017  8         OCT    1302
 2018   SMPAC+   AD     -1/2+2          SEE IF ARGUMENT GREATER THAN OR EQUAL TO
 2019            EXTEND                 .5.
 2020  2         BZMF   SRTEST          IF SO, SEE IF LESS THAN .25.
 2021            DXCH   MPAC            WE WILL TAKE THE SQUARE ROOT OF MPAC/2.
 2022            LXCH   SR              SHIFT RIGHT 1 AND GO TO THE SQRT ROUTINE
 2023            EXTEND
 2024            MP     HALF
 2025            DXCH   MPAC
 2026            XCH    SR
 2027  2         ADS    MPAC +1         GUARANTEED NO OVERFLOW.
 2028   ARGHI    CAF    SLOPEHI         ARGUMENT BETWEEN .25 AND .5. GET A
 2029            EXTEND                 LINEAR APPROXIMATION FOR THIS RANGE.
 2030            MP     MPAC
 2031  2         AD     BIASHI          X0/2 = (MPAC/2)(SLOPEHI) + BIASHI/2.
 2032    +4      TS     BUF             X0/2 (ARGLO ENTERS HERE).
 2033            CA     MPAC            SINGLE-PRECISION THROUGHOUT.
 2034            ZL
 2035            EXTEND
 2036            DV     BUF             (MPAC/2)/(X0/2)
 2037            EXTEND
 2038            MP     HALF
 2039  2         ADS    BUF             X1 = X0/2 + .5(MPAC/2)/(X0/2).
 2040            EXTEND
 2041            MP     HALF            FORM UP X1/2.
 2042            DXCH   MPAC            SAVE AND BRING OUT ARGUMENT.
 2043            EXTEND                 TAKE DP QUOTIENT WITH X1.
 2044            DV     BUF
 2045            TS     BUF +1          SAVE MAJOR PART OF QUOTIENT.
 2046            CAF    ZERO            FORM MINOR PART OF QUOTIENT USING
 2047            XCH    L               (REMAINDER,0).
 2048            EXTEND
 2049            DV     BUF
 2050            TS     L               IN PREPARATION FOR DAS.
 2051            CA     BUF +1
 2052  2         DAS    MPAC            X2 = X1/2 + (MPAC/2)X1
 2053            EXTEND                 OVERFLOWS IF ARG. NEAR POSMAX.
 2054            BZF    TCQBNK00
 2055            CAF    POSMAX
 2056   FIXROOT  TS     MPAC
 2057            TS     MPAC +1
 2058  8TCQBNK00 TC     Q               RETURN TO CALLER TO UNNORMALIZE, ETC.
 2059   SRTEST   AD     QUARTER         ARGUMENT WAS LESS THAN .5, SEE IF LESS
 2060            EXTEND                 THAN .25.
 2061  2         BZMF   SQRTNORM        IF SO, BEGIN NORMALIZATION.
 2062            DXCH   MPAC            IF BETWEEN .5 AND .25, SHIFT RIGHT 1 AND
 2063            LXCH   SR              START AT ARGLO.
 2064            EXTEND
 2065            MP     HALF
 2066            DXCH   MPAC
 2067            XCH    SR
 2068  2         ADS    MPAC +1         NO OVERFLOW.
 2069   ARGLO    CAF    SLOPELO         (NORMALIZED) ARGUMENT BETWEEN .125 AND
 2070            EXTEND                 .25
 2071            MP     MPAC
 2072            AD     BIASLO
 2073  2         TCF    ARGHI +4        BEGIN SQUARE ROOT.
 2074   SQRTNM2  EXTEND                 SHIFT LEFT 2 AND INCREMENT RIGHT SHIFT
 2075            DCA    MPAC +1         COUNT (FOR TERMINAL UNNORMALIZATION).
 2076            DAS    MPAC +1
 2077            AD     MPAC
 2078  2         ADS    MPAC            (NO OVERFLOW).
 2079   SQRTNORM INCR   MPTEMP          FIRST TIME THROUGH, JUST SHIFT LEFT 1
 2080            EXTEND                 (PUTS IN EFFECTIVE RIGHT SHIFT SINCE
 2081            DCA    MPAC +1         WE WANT MPAC/2).
 2082            DAS    MPAC +1
 2083            AD     MPAC
 2084            ADS    MPAC            (AGAIN NO OVERFLOW).
 2085            DOUBLE
 2086  2         TS     CYL
 2087   NORMTEST CCS    CYL             SEE IF ARGUMENT NOW NORMALIZED AT
 2088            CCS    CYL             GREATER THAN .125.
 2089            TCF    SQRTNM2         NO - SHIFT LEFT 2 MORE AND TRY AGAIN.
 2090            TCF    ARGHI           YES - NOW BETWEEN .5 AND .25.
 2091            TCF    ARGLO           ARGUMENT NOW BETWEEN .25 AND .125.
P2092  2TRIGONOMETRIC FUNCTION PACKAGE.
R2093  2         THE FOLLOWING TRIGONOMETRIC FUNCTIONS ARE AVAILABLE AS INTERPRE
 2094  9TIVE OPERATIONS:
R2095            1.  SIN                COMPUTES (1/2)SINE(2 PI MPAC).
R2096  2         2.  COS                COMPUTES (1/2)COSINE(2 PI MPAC).
R2097            3.  ASIN               COMPUTES (1/2PI)ARCSINE(2 MPAC).
R2098  2         4.  ACOS               COMPUTES (1/2PI)ARCCOSINE(2 MPAC).
R2099  4SIN-ASIN AND COS-ACOS ARE MUTUALLY INVERSE, IE SIN(ASIN(X)) = X.
 2100   COSINE   TC     BRANCH          FINDS COSINE USING THE IDENTITY
 2101            TCF    +3              COS(X) = SIN(PI/2 - ABS(X)).
 2102            TCF    PRESINE
 2103  2         TCF    PRESINE
 2104    +3      EXTEND
 2105            DCS    MPAC
 2106  2         DXCH   MPAC
 2107   PRESINE  CAF    QUARTER         PI/2 SCALED.
 2108  4         ADS    MPAC
 2109   SINE     DXCH   MPAC            DOUBLE ARGUMENT.
 2110            DDOUBL
 2111            OVSK                   SEE IF OVERFLOW PRESENT.
 2112  2         TCF    +3              IF NOT, ARGUMENT OK AS IS.
 2113            EXTEND                 IF SO, WE LOST (OR GAINED) PI, SO
 2114            DCOM                   COMPLEMENT MPAC USING THE IDENTITY
A2115                                   SIN(X-(+)PI) = SIN(-X).
 2116    +3      DXCH   MPAC
 2117            CA     MPAC            SEE IF ARGUMENT GREATER THAN .5 IN
 2118            DOUBLE                 MAGNITUDE. IF SO, REDUCE IT TO LESS THAN
 2119            TS     L               .5 (+-PI/2 SCALED) AS FOLLOWS:
 2120  2         TCF    SN1
 2121            INDEX  A               IF POSITIVE, FORM PI - X, IF NEGATIVE
 2122            CAF    NEG1/2 +1       USE -PI - X.
 2123            DOUBLE
 2124            EXTEND
 2125            SU     MPAC            GUARANTEED NO OVERFLOW.
 2126            TS     MPAC
 2127            CS     MPAC +1
 2128  8         TS     MPAC +1
 2129   SN1      EXTEND                 SET UP TO EVALUATE HASTINGS POLYNOMIAL
 2130            DCA    MPAC
 2131            DXCH   BUF2
 2132  2         TC     DSQSUB          SQUARE MPAC.
 2133            TC     POLY            EVALUATE FOURTH ORDER POLYNOMIAL.
 2134            DEC    3
 2135            2DEC   +.3926990796
 2136            2DEC   -.6459637111
 2137            2DEC   +.318758717
 2138            2DEC   -.074780249
 2139            2DEC   +.009694988
 2140            CAF    LBUF2           MULTIPLY BY ARGUMENT AND SHIFT LEFT 2.
 2141  2         TC     DMPSUB -1
 2142            EXTEND
 2143            DCA    MPAC +1
 2144            DAS    MPAC +1
 2145            AD     MPAC
 2146            ADS    MPAC            NEITHER SHIFT OVERFLOWS.
 2147            EXTEND
 2148            DCA    MPAC +1
 2149            DAS    MPAC +1
 2150            AD     MPAC
 2151            ADS    MPAC
 2152            TCF    DANZIG
P2153  2         ARCSIN/ARCCOS ROUTINE.
 2154   ARCSIN   CAF    LASINEX         COMPUTE ARCSIN BY USING THE IDENTITY
 2155  2         TCF    +2              ARCSIN(X) = PI/2 - ARCCOS(X).
 2156   ARCCOS   CAF    LDANZIG         (EXITS IMMEDIATELY).
 2157            TS     ESCAPE
 2158            TC     BRANCH          TEST SIGN OF INPUT.
 2159            TCF    ACOSST          START IMMEDIATELY IF POSITIVE.
 2160            TCF    ACOSZERO        ARCCOS(0) = PI/2 = .25.
 2161            EXTEND                 IF NEGATIVE, USE THE IDENTITY
 2162            DCS    MPAC            ARCCOS(X) = PI - ARCCOS(-X), FORCING
 2163            DXCH   MPAC            ARGUMENT POSITIVE.
 2164            CAF    TCSUBTR         SET EXIT  TO DO ABOVE BEFORE
 2165            XCH    ESCAPE          ARCSIN/ARCCOS CONSIDERATIONS.
 2166  2         TS     ESCAPE2
 2167   ACOSST   CS     HALF            TEST MAGNITUDE OF INPUT.
 2168            AD     MPAC
 2169            CCS    A
 2170  2         TCF    ACOSOVF         THIS IS PROBABLY AN OVERFLOW CASE.
 2171  2LASINEX  TCF    ASINEX
 2172  2         TCF    ACOSST2         NO OVERFLOW - PROCEED.
 2173            CCS    MPAC +1         IF MAJOR PART IS .5, CALL ANSWER 0
 2174            CAF    ZERO            UNLESS MINOR PART NEGATIVE.
 2175  2         TCF    ACOS=0
 2176  2         TCF    ACOSST2
 2177   ACOS=0   TS     MPAC +1
 2178            TS     MPAC
 2179  2         TC     ESCAPE
 2180   ACOSST2  EXTEND                 NOW THAT ARGUMENT IS IN PROPER RANGE,
 2181            DCS    MPAC            BEGIN COMPUTATION. USE HASTINGS
 2182            AD     HALF            APPROXIMATION ARCCOS(X) = SQRT(1-X)P(X)
 2183            DXCH   MPAC            IN A SCALED VERSION WHERE P(X) IS A
 2184  2         DXCH   BUF2            SEVENTH ORDER POLYNOMIAL.
 2185  2         TC     SQRTSUB         RETURNS WITH NORMALIZED SQUARE ROOT.
 2186            CCS    MPTEMP          SEE IF UN-NORMALIZATION REQUIRED.
 2187  8         TCF    ACOSSHR         IF SO.
 2188   ACOS3    DXCH   MPAC            SET UP FOR POLYNOMIAL EVALUATION.
 2189            DXCH   BUF2
 2190  2         DXCH   MPAC
 2191            TC     POLY
 2192            DEC    6
 2193            2DEC   +.353553385     COEFFICIENTS ARE C 2(+I)/PISQRT(2) WHERE
 2194            2DEC*  -.0483017006 B+1*                 I
 2195            2DEC*  +.0200273085 B+2*    WHERE C STANDS FOR ORIGINAL COEFFS.
 2196            2DEC*  -.0112931863 B+3*
 2197            2DEC*  +.00695311612 B+4*
 2198            2DEC*  -.00384617957 B+5*
 2199            2DEC*  +.001501297736 B+6*
 2200            2DEC*  -.000284160334 B+7*
 2201            CAF    LBUF2           DO FINAL MULTIPLY AND GO TO ANY
 2202            TC     DMPSUB -1       EPILOGUE SEQUENCES.
 2203  2         TC     ESCAPE
 2204   SUBTR    EXTEND                 EPILOGUE FOR NEGATIVE INPUTS TO ARCCOS.
 2205            DCS    MPAC
 2206            AD     HALF            FORMS PI - ARCCOS(-X) = ARCCOS(X).
 2207            DXCH   MPAC
 2208  2         TC     ESCAPE2         GO TO POSSIBLE ARCSIN EPILOGUE.
 2209   ASINEX   EXTEND
 2210            DCS    MPAC            ARCSIN EPILOGUE - GET ARCSIN(X)
 2211            AD     QUARTER         = PI/2 - ARCCOS(X).
 2212            DXCH   MPAC
 2213  8LDANZIG  TCF    DANZIG
 2214   ACOSSHR  INDEX  A               THE SHIFT RIGHT IS LESS THAN 14 SINCE
 2215            CAF    BIT14           THE INPUT WAS NON-ZERO DP.
 2216            TS     MPTEMP
 2217            TC     VSHRRND         DP SHIFT RIGHT AND ROUND.
 2218  2         TCF    ACOS3           PROCEED.
 2219   ACOSOVF  CCS    A               IF MAJOR PART WAS ONLY 1 MORE THAN .5,
 2220            TCF    +2              CALL ANSWER 0.
 2221            TCF    ACOS=0
 2222  2         TCF    ACOS=0
 2223   ACOSABRT TC     ABORT
 2224  2         OCT    1301
 2225   ACOSZERO CAF    QUARTER         ACOS(0) = PI/2.
 2226            TCF    ACOS=0 +1       SET MPAC AND EXIT VIA ESCAPE.
 2227   ENDINTS0 EQUALS
P2228  2         THE FOLLOWING INSTRUCTIONS ARE AVAILABLE FOR SETTING, MODIFYING
 2229  9, AND BRANCHING ON INDEX REGISTERS:
R2230            1.  AXT                ADDRESS TO INDEX TRUE.
R2231            1.  AXC                ADDRESS TO INDEX COMPLEMENTED.
R2232            3.  LXA                LOAD INDEX FROM ERASABLE.
R2233            4.  LXC                LOAD INDEX COMPLEMENTED FROM ERASABLE.
R2234            5.  SXA                STORE INDEX IN ERASABLE.
R2235  2         6.  XCHX               EXCHANGE INDEX REIGSTER WITH ERASABLE.
R2236            7.  INCR               INCREMENT INDEX REGISTER.
R2237            8.  XAD                ERASABLE ADD TO INDEX REGISTER.
R2238  2         9.  XSU                ERASABLE SUBTRACT FROM INDEX REGISTER.
R2239  4        10.  TIX                BRANCH ON INDEX REGISTER AND DECREMENT.
 2240  2         SETLOC 12000           SUFFIX CLASS 01 IS IN BANK 1.
 2241   AXT      TC     TAGSUB          SELECT APPROPRIATE INDEX REGISTER.
 2242            CA     POLISH
 2243   XSTORE   INDEX  INDEXLOC        CONTAINS C(FIXLOC) OR C(FIXLOC)+1.
 2244            TS     X1
 2245  2         TCF    DANZIG
 2246   AXC      TC     TAGSUB
 2247            CS     POLISH
 2248  2         TC     XSTORE
 2249   LXA      TC     TAGSUB          LOAD INDEX FROM ERASABLE.
 2250            INDEX  ADDRWD
 2251            CA     0
 2252  2         TCF    XSTORE
 2253   LXC      TC     TAGSUB          LOAD INDEX FROM ERASABLE COMPLEMENTED.
 2254            INDEX  ADDRWD
 2255            CS     0
 2256  2         TCF    XSTORE
 2257   SXA      TC     TAGSUB          STORE INDEX IN ERASABLE.
 2258            INDEX  INDEXLOC
 2259            CA     X1
 2260  2         TCF    STORE1          (STORE SINGLE PRECISION BEFORE EXIT).
 2261   XCHX     TC     TAGSUB          EXCHANGE INDEX REGISTER WITH ERASABLE.
 2262            INDEX  ADDRWD
 2263            CA     0
 2264            INDEX  INDEXLOC
 2265            XCH    X1
 2266  2         TCF    STORE1
 2267   XAD      TC     TAGSUB          ERASABLE ADD TO INDEX.
 2268            INDEX  ADDRWD
 2269            CA     0
 2270   XAD2     INDEX  INDEXLOC
 2271            ADS    X1              IGNORING OVERFLOWS.
 2272  2         TCF    DANZIG
 2273   INCR     TC     TAGSUB          INCREMENT INDEX REGISTER.
 2274            CA     POLISH
 2275  2         TCF    XAD2
 2276   XSU      TC     TAGSUB          ERASABLE SUBTRACT FROM INDEX.
 2277            INDEX  ADDRWD
 2278            CS     0
 2279  4         TCF    XAD2
 2280   TIX      TC     TAGSUB          BRANCH AND DECREMENT ON INDEX.
 2281            INDEX  INDEXLOC
 2282            CS     S1
 2283            INDEX  INDEXLOC
 2284            AD     X1
 2285            EXTEND                 NO OPERATION IF DECREMENTED INDEX IS
 2286  2         BZMF   DANZIG          NEGATIVE OR ZERO.
 2287   DOTIXBR  INDEX  INDEXLOC
 2288  2         XCH    X1              IGNORING OVERFLOWS.
 2289  4         TCF    GOTO            DO THE BRANCH USING THE CADR IN POLISH.
R2290  2         SUBROUTINE WHICH SETS THE ADDRESS OF THE SPECIFIED INDEX IN IND
 2291  9EXLOC. (ACTUALLY, THE ADDRESS -38D.)
 2292   TAGSUB   CA     FIXLOC
 2293  2         TS     INDEXLOC
 2294            CCS    CYR             BIT 15 SPECIFIES INDEX.
 2295            INCR   INDEXLOC        0 MEANS USE X2.
 2296            TC     Q
 2297            TC     Q               1 FOR X1.
P2298  2         MISCELLANEOUS OPERATION CODES WITH DIRECT ADDRESSES. INCLUDED H
 2299  9ERE ARE:
R2300            1.  ITA                STORE QPRET (RETURN ADDRESS) IN ERASABLE
 2301  9.
R2302            2.  CALL               CALL A SUBROUTINE, LEAVING RETURN IN QPR
 2303  9ET.
R2304            3.  RTB                RETURN TO BASIC LANGUAGE AT THE GIVEN AD
 2305  9DRESS.
R2306            4.  BHIZ               BRANCH IF THE HIGH ORDER OF MPAC IS ZERO
 2307  9 (SINGLE PRECISION).
R2308            5.  BOV                BRANCH ON OVERFLOW.
R2309  2         6.  GOTO               SIMPLE SEQUENCE CHANGE.
 2310   RTB/BHIZ CCS    CYR
 2311   RTB      CA     POLISH
 2312  2         TCF    BANKJUMP        CALL BASIC ROUTINE.
 2313   BHIZ     CCS    MPAC
 2314            TCF    DANZIG
 2315            TCF    GOTO
 2316            TCF    DANZIG
 2317  2         TCF    GOTO
 2318   BOV(B)   CCS    OVFIND          BRANCH ON OVERFLOW TO BASIC OR INTERP.
 2319            TCF    +2
 2320            TCF    DANZIG
 2321            TS     OVFIND
 2322            CCS    CYR
 2323            TCF    RTB             IF BASIC.
 2324   B5TOB8   OCT    360
 2325  8         TCF    GOTO
 2326   BZE/GOTO CCS    CYR             SEE WHICH OP-CODE IS DESIRED.
 2327            TC     BRANCH          DO BZE.
 2328            TCF    DANZIG
 2329            TCF    GOTO            DO GOTO.
 2330  2         TCF    DANZIG
 2331   BPL/BMN  CCS    CYR
 2332            TCF    BPL
 2333  25B10     DEC    5 B+10          SHIFTS OP CODE IN SWITCH INSTRUCTION ADR
 2334            TC     BRANCH          DO BMN.
 2335            TCF    DANZIG
 2336            TCF    DANZIG
 2337  2         TCF    GOTO            ONLY IF NNZ.
 2338   BPL      TC     BRANCH
 2339            TCF    GOTO            IF POSITIVE OR ZERO.
 2340            TCF    GOTO
 2341  2         TCF    DANZIG
 2342   CALL/ITA CCS    CYR
 2343  2         TCF    CALL
 2344            TC     CCSHOLE
 2345            INDEX  FIXLOC          STORE QPRET.
 2346            CA     QPRET
 2347            TCF    STORE1
P2348  2         THE FOLLOWING OPERATIONS ARE AVAILABLE FOR ALTERING AND TESTING
 2349  9 INTERPRETIVE SWITCHES:
R2350   00       BONSET                 SET A SWITCH AND DO A GOTO IF IT WAS ON.
R2351   01       SETGO                  SET A SWITCH AND DO A GOTO.
R2352   02       BOFSET                 SET A SWITCH AND DO A GOTO IF IT WAS OFF
R2353  203       SET                    SET A SWITCH.
R2354   04       BONINV                 INVERT A SWITCH AND BRANCH IF IT WAS ON.
R2355   05       INVGO                  INVERT A SWITCH AND DO A GOTO.
R2356   06       BOFINV                 INVERT A SWITCH AND BRANCH IF IT WAS OFF
R2357  207       INVERT                 INVERT A SWITCH.
R2358   10       BONCLR                 CLEAR A SWITCH AND BRANCH IF IT WAS ON.
R2359   11       CLRGO                  CLEAR A SWITCH AND DO A GOTO.
R2360   12       BOFCLR                 CLEAR A SWITCH AND BRANCH IF IT WAS OFF.
R2361  213       CLEAR                  CLEAR A SWITCH.
R2362   14       BON                    BRANCH IF A SWITCH WAS ON.
R2363  416       BOFF                   BRANCH IF A SWITCH WAS OFF.
R2364  2         THE ADDRESS SUPPLIED WITH THE SWITCH INSTRUCTION IS INTERPRETED
 2365  9 AS FOLLOWS:
R2366            BITS 1-4    SWITCH BIT NUMBER (1-15).
R2367            BITS 5-8    SWITCH OPERATION NUMBER.
R2368  2         BITS 9-     SWITCH WORD NUMBER (UP TO 64 SWITCH WORDS).
R2369            THE ADDRESS ITSELF IS MADE UP BY THE YUL SYSTEM ASSEMBLER. THE
 2370  9BRANCH INSTRUCTIONS REQUIRE TWO
R2371  4ADDRESSES, THE SECOND TAKEN AS THE DIRECT (OR INDIRECT IF IN ERASABLE) A
 2372  9DDRESS OF THE BRANCH.
 2373   SWITCHES CAF    LOW4            LEAVE THE SWITCH BIT IN  SWBIT  .
 2374            MASK   POLISH
 2375            INDEX  A
 2376            CAF    BIT15           (NUMBER FROM LEFT TO RIGHT.)
 2377  2         TS     SWBIT
 2378            CAF    BIT7            LEAVE THE SWITCH NUMBER IN SWWORD.
 2379            EXTEND
 2380            MP     POLISH
 2381  2         TS     SWWORD
 2382            INHINT                 DURING SWITCH CHANGE SO RUPT CAN USE TOO
 2383            INDEX  A               LEAVE THE SWITCH WORD ITSELF IN L.
 2384            CA     STATE
 2385  8         TS     Q               Q WILL BE USED AS A CHANNEL.
 2386            CAF    BIT11
 2387            EXTEND                 DISPATCH SWITCH BIT OPERATION AS IN BITS
 2388            MP     POLISH          7-8 OF POLISH.
 2389            MASK   B3TOB4          GETS 4X2-BIT CODE.
 2390            INDEX  A
 2391  2         TCF    +1
 2392    +1      CA     SWBIT           00 - SET SWITCH IN QUESTION.
 2393            EXTEND
 2394            ROR    Q
 2395  2         TCF    SWSTORE
 2396    +5      CA     SWBIT           01 - INVERT SWITCH.
 2397            EXTEND
 2398            RXOR   Q
 2399  2         TCF    SWSTORE
 2400    +9D     CS     SWBIT           10 - CLEAR.
 2401            MASK   Q
 2402   SWSTORE  INDEX  SWWORD
 2403  8         TS     STATE           NEW SWITCH WORD.
 2404    +13D    RELINT                 11 - NOOP.
 2405            CAF    BIT13
 2406            EXTEND                 DISPATCH SEQUCE CHANGING OR BRANCHING
 2407            MP     POLISH          CODE.
 2408            MASK   B3TOB4
 2409            INDEX  A
 2410  2         TCF    +1              ORIGINALLY STORED IN BITS 5-6.
 2411    +1      CS     Q               00 - BRANCH IF ON.
 2412   TEST     MASK   SWBIT
 2413            CCS    A
 2414  2         TCF    SWSKIP
 2415  2 +5      TCF    SWBRANCH        01 - GO TO.
 2416  2         TCF    SWSKIP          HERE ONLY ON BIT 15.
 2417            TC     CCSHOLE
 2418  2         TC     CCSHOLE
 2419    +9D     CA     Q               10 - BRANCH IF OFF.
 2420  2         TCF    TEST
 2421  2B3TOB4   OCT    14
 2422  2SWSKIP   INCR   LOC
 2423  2SW/      EQUALS SWITCHES
 2424  2 +13D    TCF    DANZIG          11 - NOOP.
 2425   ENDINTS1 EQUALS
L      2SINGLE PRECISION SUBROUTINES
 0001  2         SETLOC ENDIBNKF
R0002  2SINGLE PRECISION SINE AND COSINE
 0003   SPCOS    AD     HALF            ARGUMENTS SCALED AT PI
 0004   SPSIN    TS     TEMK
 0005            TCF    SPT
 0006            CS     TEMK
 0007   SPT      DOUBLE
 0008            TS     TEMK
 0009            TCF    POLLEY
 0010            XCH    TEMK
 0011            INDEX  TEMK
 0012            AD     LIMITS
 0013            COM
 0014            AD     TEMK
 0015            TS     TEMK
 0016            TCF    POLLEY
 0017            TCF    ARG90
 0018   POLLEY   EXTEND
 0019            MP     TEMK
 0020            TS     SQ
 0021            EXTEND
 0022            MP     C5/2
 0023            AD     C3/2
 0024            EXTEND
 0025            MP     SQ
 0026            AD     C1/2
 0027            EXTEND
 0028            MP     TEMK
 0029            DDOUBL
 0030            TS     TEMK
 0031            TC     Q
 0032   ARG90    INDEX  A
 0033            CS     LIMITS
 0034            TC     Q               RESULT SCALED AT 1
 0035   C1/2     DEC    .7853134
 0036   C3/2     DEC    -.3216146
 0037  8C5/2     DEC    .0363551
R0038   ENTER WITH ARGUMENT IN A, EXIT WITH ROOT IN A.  IF GIVEN A NEGATIVE ARGU
 0039  9MENT, THE RETURN SKIPS WITH CCS RESULT.
R0040   MINUS ZERO RETURNS LIKE PLUS ZERO.
R0041   MAXIMUM ERROR IN ANSWER IS NO GREATER THAN 2 BITS.
R0042  4INTERRUPT PROGRAMS USING SPROOT MUST SAVE AND RESTORE SR.
 0043   SPROOT   TS     SQRARG          ENTER WITH C(A) = Y
 0044            CCS    A
 0045            TCF    POSARG          IF PNZ, CONTINUE
 0046            TC     Q               RETURN WITH 0 FOR +0
 0047            INCR   Q
 0048  2         TC     Q               RETURN WITH 0 FOR -0
 0049   POSARG   EXTEND
 0050            QXCH   ROOTRET         WILL BE CALLING SPROOT1
 0051            AD     63/64+1         B(A) = Y - 1
 0052            OVSK
 0053            TCF    SPROOT2
 0054  2         XCH    SQRARG          ARG JUGGLING
 0055   SPROOT3  TS     SQRARG
 0056            TS     SR              C(A) = Y
 0057            XCH    SR              (LOSE 1 BIT)
 0058            TS     HALFY           HALFY = Y/2
 0059            AD     -1/8            FORM Y/2 - 1/8
 0060            CCS    A               TEST FOR FIRST GUESS
 0061            AD     5/8+1           Y .G. 1/4, X = Y/2 + 1/2
 0062            TC     HIGUESS         +0 IMPOSSIBLE FROM ADDITION
 0063            NOOP                   Y .LE. 1/4, X/2 = Y + 1/16
 0064            CAF    BIT11           1/16
 0065            AD     SQRARG          SQRARG = Y
 0066            DOUBLE                 X FROM X/2
 0067   HIGUESS  TC     SPROOT1
 0068            TC     SPROOT1         ITERATE TWICE
 0069            XCH    ROOTRET         SAVE ANSWER AND GET Q
 0070            CCS    A
 0071            XCH    ROOTRET         NO SHIFT NEEDED
 0072            TC     ROOTBCK
 0073            XCH    ROOTRET         Q NEG, SHIFT RIGHT THREE
 0074            EXTEND
 0075            MP     BIT12           EXP -3
 0076   ROOTBCK  INDEX  ROOTRET         ROOTRET = Q - 1
 0077  2         TC     1               RETURN, C(A) = SQRT(Y)
 0078   SPROOT1  XCH    SR              SR = X/2
 0079            CS     HALFY           NEWTON ITER  X = X/2 + (Y/2 / X/2) / 2
 0080            ZL
 0081            EXTEND
 0082            DV     SR              C(SR) = X/2 DV DOES NOT EDIT
 0083            XCH    SR
 0084            EXTEND
 0085            SU     SR
 0086  2         TC     Q               C(A) = X (NEXT)
 0087   SPROOT2  CS     ROOTRET         SET RETURN Q NEG, AS FLAG
 0088            TS     ROOTRET
 0089            CAF    BIT7            SHIFT FOR SIGNIFCANCE
 0090            EXTEND
 0091            MP     SQRARG
 0092            CA     L               B(A) = 0
 0093  2         TC     SPROOT3
 0094   -1/8     OCTAL  73777
 0095   5/8+1    OCTAL  24001
 0096  463/64+1  OCTAL  37401
 0097   ENDSUBSF EQUALS
L      2EXECUTIVE
 0001  2         SETLOC ENDSUBSF
R0002            TO ENTER A JOB REQUEST REQUIRING NO VAC AREA:
 0003   NOVAC    TS     NEWPRIO         SAVE PRIORITY OF NEW JOB.
 0004            EXTEND
 0005            INDEX  Q               Q WILL BE UNDISTURBED THROUGHOUT.
 0006            DCA    0               2CADR OF JOB ENTERED.
 0007            DXCH   NEWLOC
 0008            CAF    EXECBANK
 0009            XCH    FBANK
 0010            TS     EXECTEM1
 0011  2         TCF    NOVAC2          ENTER EXECUTIVE BANK.
R0012  2         TO ENTER A JOB REQUEST REQUIRING A VAC AREA - E.G., ALL (PARTIA
 0013  9LLY) INTERPRETIVE JOBS.
 0014   FINDVAC  TS     NEWPRIO
 0015            EXTEND
 0016            INDEX  Q
 0017            DCA    0
 0018            DXCH   NEWLOC
 0019            CAF    EXECBANK
 0020            XCH    FBANK
 0021  2         TCF    FINDVAC2        OFF TO EXECUTIVE SWITCHED-BANK.
R0022  2         TO SUSPEND A BASIC JOB SO A HIGHER PRIORITY JOB MAY BE SERVICED
 0023  9:
 0024   CHANG1   CAF    EXECBANK
 0025            TS     L
 0026            CA     Q
 0027    +3      LXCH   BBANK
 0028            INHINT
 0029  2         TCF    CHANJOB
R0030  2         TO SUSPEND AN INTERPRETIVE JOB:
 0031   CHANG2   CAF    EXECBANK
 0032            TS     L
 0033            CS     LOC             NEGATIVE LOC SHOWS JOB INTERPRETIVE.
 0034            TCF    CHANG1 +3
P0035  2         TO VOLUNTARILY SUSPEND A JOB UNTIL THE COMPLETION OF SOME ANTIC
 0036  9IPATED EVENT (I/O EVENT ETC.):
 0037   JOBSLEEP TS     LOC
 0038            CAF    EXECBANK
 0039            TS     FBANK
 0040  2         TCF    JOBSLP1
R0041  2         TO AWAKEN A JOB PUT TO SLEEP IN THE ABOVE FASHION:
 0042   JOBWAKE  TS     NEWLOC
 0043            CS     TWO             EXIT IS VIA FINDVAC/NOVAC PROCEDURES.
 0044            ADS    Q
 0045            CAF    EXECBANK
 0046            XCH    FBANK
 0047  2         TCF    JOBWAKE2
R0048  2         TO CHANGE THE PRIORITY OF A JOB CURRENTLY UNDER EXECUTION:
 0049   PRIOCHNG INHINT                 NEW PRIORITY ARRIVES IN A. RETURNS TO
 0050            TS     NEWPRIO         CALLER AS SOON AS NEW JOB PRIORITY IS
 0051            CAF    EXECBANK        HIGHEST. PREPARE FOR POSSIBLE BASIC-
 0052            XCH    BBANK           STYLE CHANGE-JOB.
 0053            TS     BANKSET
 0054            CA     Q
 0055  2         TCF    PRIOCH2
R0056  2         TO FREE THE DISPLAY BEFORE ENDOFJOB:
 0057  2EJFREE   TC     FREEDSP
R0058  2         TO REMOVE A JOB FROM EXECUTIVE CONSIDERATIONS:
 0059   ENDOFJOB CAF    EXECBANK
 0060            TS     FBANK
 0061  2         TCF    ENDJOB1
 0062   ENDFIND  CA     EXECTEM1        RETURN TO CALLER AFTER JOB ENTRY
 0063            TS     FBANK           COMPLETE.
 0064            INDEX  Q
 0065  2         TC     2
 0066   EXECBANK CADR   FINDVAC2
P0067  2         LOCATE AN AVAILABLE VAC AREA.
 0068  2         SETLOC ENDINTS1
 0069   FINDVAC2 TS     EXECTEM1        (SAVE CALLER'S BANK FIRST.)
 0070            CCS    VAC1USE
 0071            TCF    VACFOUND
 0072            CCS    VAC2USE
 0073            TCF    VACFOUND
 0074            CCS    VAC3USE
 0075            TCF    VACFOUND
 0076            CCS    VAC4USE
 0077            TCF    VACFOUND
 0078            CCS    VAC5USE
 0079            TCF    VACFOUND
 0080            TC     ABORT
 0081  2         OCT    1201            NO VAC AREAS.
 0082   VACFOUND AD     TWO             RESERVE THIS VAC AREA BY STORING A ZERO
 0083            ZL                     IN ITS VAC USE REGISTER AND STORE THE
 0084            INDEX  A               ADDRESS OF THE FIRST WORD OF IT IN THE
 0085            LXCH   0 -1            LOW NINE BITS OF THE PRIORITY WORD.
 0086  2         ADS    NEWPRIO
 0087   NOVAC2   CAF    ZERO            NOVAC ENTERS HERE. FIND A CORE SET.
 0088            TS     LOCCTR
 0089            CAF    NO.CORES        SEVEN SETS OF ELEVEN REGISTERS EACH.
 0090   NOVAC3   TS     EXECTEM2
 0091            INDEX  LOCCTR
 0092            CCS    PRIORITY        EACH PRIORITY REGISTER CONTAINS -0 IF
 0093            TCF    NEXTCORE        THE CORRESPONDING CORE SET IS AVAILABLE.
 0094   NO.CORES DEC    6
 0095            TCF    NEXTCORE        AN ACTIVE JOB HAS A POSITIVE PRIORITY
A0096  8                                BUT A DORMANT JOB'S PRIORITY IS NEGATIVE
 0097   CORFOUND CA     NEWPRIO         SET THE PRIORITY OF THIS JOB IN THE CORE
 0098            INDEX  LOCCTR          SET'S PRIORITY REGISTER AND SET THE
 0099            TS     PRIORITY        JOB'S PUSH-DOWN POINTER AT THE BEGINNING
 0100            MASK   LOW9            OF THE WORK AREA AND OVERFLOW INDICATOR
 0101            INDEX  LOCCTR
 0102  2         TS     PUSHLOC         OFF TO PREPARE FOR INTERPRETIVE PROGRAMS
 0103            CCS    LOCCTR          IF CORE SET ZERO IS BEING LOADED, SET UP
 0104            TCF    SETLOC          OVFIND AND FIXLOC IMMEDIATELY .
 0105            TS     OVFIND
 0106            CA     PUSHLOC
 0107  2         TS     FIXLOC
 0108   SPECTEST CCS    NEWJOB          SEE IF ANY ACTIVE JOBS WAITING (RARE).
 0109            TCF    SETLOC          MUST BE AWAKENED BUT UNCHANGED JOB.
 0110            TC     CCSHOLE
 0111            TC     CCSHOLE
 0112            TS     NEWJOB          +0 SHOWS ACTIVE JOB ALREADY SET.
 0113            DXCH   NEWLOC
 0114            DXCH   LOC
 0115  2         TCF    ENDFIND
 0116   SETLOC   DXCH   NEWLOC          SET UP THE LOCATION REGISTERS FOR THIS
 0117            INDEX  LOCCTR
 0118            DXCH   LOC
 0119            INDEX  NEWJOB          THIS INDEX INSTRUCTION INSURES THAT THE
 0120            CS     PRIORITY        HIGHEST ACTIVE PRIORITY WILL BE COMPARED
 0121            AD     NEWPRIO         WITH THE NEW PRIORITY TO SEE IF NEWJOB
 0122            EXTEND                 SHOULD BE SET TO SIGNAL A SWITCH.
 0123            BZMF   ENDFIND
 0124            CA     LOCCTR          LOCCTR IS LEFT SET AT THIS CORE SET IF
 0125            TS     NEWJOB          THE CALLER WANTS TO LOAD ANY MPAC
 0126  2         TCF    ENDFIND         REGISTERS, ETC.
 0127   NEXTCORE CAF    COREINC
 0128            ADS    LOCCTR
 0129            CCS    EXECTEM2
 0130            TCF    NOVAC3
 0131            TC     ABORT           NO CORE SETS.
 0132            OCT    1202
P0133  2         THE FOLLOWING ROUTINE SWAPS CORE SET 0 WITH THAT WHOSE RELATIVE
 0134  9 ADDRESS IS IN NEWJOB.
 0135    -1      DXCH   LOC
 0136   CHANJOB  INDEX  NEWJOB          LOC ARRIVES IN A AND BBANK IN L.
 0137            DXCH   LOC
 0138  2         DXCH   LOC
 0139            DXCH   MPAC            SWAP MULTI-PURPOSE ACCUMULATOR AREAS.
 0140            INDEX  NEWJOB
 0141            DXCH   MPAC
 0142            DXCH   MPAC
 0143            DXCH   MPAC +2
 0144            INDEX  NEWJOB
 0145            DXCH   MPAC +2
 0146            DXCH   MPAC +2
 0147            DXCH   MPAC +4
 0148            INDEX  NEWJOB
 0149            DXCH   MPAC +4
 0150            DXCH   MPAC +4
 0151            DXCH   MPAC +6
 0152            INDEX  NEWJOB
 0153            DXCH   MPAC +6
 0154  2         DXCH   MPAC +6
 0155            CAF    ZERO
 0156            XCH    OVFIND          MAKE PUSHLOC NEGATIVE IF OVFIND NZ.
 0157            EXTEND
 0158            BZF    +3
 0159            CS     PUSHLOC
 0160  2         TS     PUSHLOC
 0161            DXCH   PUSHLOC
 0162            INDEX  NEWJOB
 0163            DXCH   PUSHLOC
 0164            DXCH   PUSHLOC         SWAPS PUSHLOC AND PRIORITY.
 0165            CAF    LOW9            SET FIXLOC TO BASE OF VAC AREA.
 0166            MASK   PRIORITY
 0167  2         TS     FIXLOC
 0168            CCS    PUSHLOC         SET OVERFLOW INDICATOR ACCORDING TO
 0169            CAF    ZERO
 0170            TCF    ENDPRCHG -1
 0171            CS     PUSHLOC
 0172            TS     PUSHLOC
 0173            CAF    ONE
 0174            XCH    OVFIND
 0175  2         TS     NEWJOB
 0176   ENDPRCHG RELINT
 0177            DXCH   LOC             BASIC JOBS HAVE POSITIVE ADDRESSES, SO
 0178            EXTEND                 DISPATCH WITH A DTCB.
 0179            BZMF   +2              IF INTERPRETIVE, SET UP EBANK, ETC.
 0180  8         DTCB
 0181            COM                    EPILOGUE TO JOB CHANGE FOR INTERPRETIVE
 0182            AD     ONE
 0183            TS     LOC             RESUME.
 0184            CAF    FBANKMSK
 0185            MASK   L
 0186  2         TCF    INTRSM
R0187  2         COMPLETE JOBSLEEP PREPARATIONS.
 0188   JOBSLP1  INHINT
 0189            CS     PRIORITY        NNZ PRIORITY SHOWS JOB ASLEEP.
 0190            TS     PRIORITY
 0191            CAF    LOW7
 0192            MASK   BBANK
 0193            TS     BANKSET
 0194            CS     ZERO
 0195   JOBSLP2  TS     BUF +1          HOLDS - HIGHEST PRIORITY.
 0196            TCF    EJSCAN          SCAN FOR HIGHEST PRIORITY ALA ENDOFJOB.
P0197            TO WAKE UP A JOB, EACH CORE SET IS FOUND TO LOCATE ALL JOBS WHI
 0198  9CH ARE ASLEEP. IF THE FCADR IN THE
R0199   LOC REGISTER OF ANY SUCH JOB MATCHES THAT SUPPLIED BY THE CALLER, THAT J
 0200  9OB IS AWAKENED. IF NO JOB IS FOUND,
R0201  2LOCCTR IS SET TO -1 AND NO FURTHER ACTION TAKES PLACE.
 0202   JOBWAKE2 TS     EXECTEM1
 0203            CAF    ZERO            BEGIN CORE SET SCAN.
 0204            TS     LOCCTR
 0205            CAF    NO.CORES
 0206   JOBWAKE4 TS     EXECTEM2
 0207            INDEX  LOCCTR
 0208            CCS    PRIORITY
 0209            TCF    JOBWAKE3        ACTIVE JOB - CHECK NEXT CORE SET.
 0210   COREINC  DEC    12              12 REGISTERS PER CORE SET.
 0211  2         TCF    WAKETEST        SLEEPING JOB - SEE IF CADR MATCHES.
 0212   JOBWAKE3 CAF    COREINC
 0213            ADS    LOCCTR
 0214            CCS    EXECTEM2
 0215            TCF    JOBWAKE4
 0216            CS     ONE             EXIT IF SLEEPING JOB NOT FOUND.
 0217            TS     LOCCTR
 0218  2         TCF    ENDFIND
 0219   WAKETEST CS     NEWLOC
 0220            INDEX  LOCCTR
 0221            AD     LOC
 0222            EXTEND
 0223            BZF    +2              IF MATCH.
 0224  2         TCF    JOBWAKE3        EXAMINE NEXT CORE SET IF NO MATCH.
 0225            INDEX  LOCCTR          RE-COMPLEMENT PRIORITY TO SHOW JOB AWAKE
 0226            CS     PRIORITY
 0227            TS     NEWPRIO
 0228            INDEX  LOCCTR
 0229  2         TS     PRIORITY
 0230            CS     FBANKMSK        MAKE UP THE 2CADR OF THE WAKE ADDRESS
 0231            MASK   NEWLOC          USING THE CADR IN NEWLOC AND THE EBANK
 0232            AD     2K              HALF OF BBANK SAVED IN BANKSET.
 0233            XCH    NEWLOC
 0234            MASK   FBANKMSK
 0235            INDEX  LOCCTR
 0236            AD     BANKSET
 0237  2         TS     NEWLOC +1
 0238            CCS    LOCCTR          SPECIAL TREATMENT IF THIS JOB WAS
 0239            TCF    SETLOC          ALREADY IN THE RUN (0) POSITION.
 0240            TCF    SPECTEST
P0241  2         PRIORITY CHANGE. CHANGE THE CONTENTS OF PRIORITY AND SCAN FOR T
 0242  9HE JOB OF HIGHEST PRIORITY.
 0243   PRIOCH2  TS     LOC
 0244            CAF    ZERO            SET FLAG TO TELL ENDJOB SCANNER IF THIS
 0245            TS     BUF             JOB IS STILL HIGHEST PRIORITY.
 0246            CAF    LOW9
 0247            MASK   PRIORITY
 0248            AD     NEWPRIO
 0249            TS     PRIORITY
 0250            COM
 0251            TCF    JOBSLP2         AND TO EJSCAN.
P0252  2         RELEASE THIS CORE SET AND VAC AREA AND SCAN FOR THE JOB OF HIGH
 0253  9EST ACTIVE PRIORITY.
 0254   ENDJOB1  INHINT
 0255            CS     ZERO
 0256            TS     BUF +1
 0257            XCH    PRIORITY
 0258            MASK   LOW9
 0259            CCS    A
 0260            INDEX  A
 0261  2         TS     0
 0262   EJSCAN   CCS    PRIORITY +12D
 0263            TC     EJ1
 0264            TC     CCSHOLE
 0265  2         TCF    +1
 0266            CCS    PRIORITY +24D   EXAMINE EACH PRIORITY REGISTER TO FIND
 0267            TC     EJ1             THE JOB OF HIGHEST ACTIVE PRIORITY.
 0268            TC     CCSHOLE
 0269  2         TCF    +1
 0270            CCS    PRIORITY +36D
 0271            TC     EJ1
 0272   -CCSPR  -CCS    PRIORITY
 0273  2         TCF    +1
 0274            CCS    PRIORITY +48D
 0275            TC     EJ1
 0276            TC     CCSHOLE
 0277  2         TCF    +1
 0278            CCS    PRIORITY +60D
 0279            TC     EJ1
 0280            TC     CCSHOLE
 0281  2         TCF    +1
 0282            CCS    PRIORITY +72D
 0283            TC     EJ1
 0284            TC     CCSHOLE
 0285            TCF    +1
P0286  2         EVALUATE THE RESULTS OF THE SCAN.
 0287            CCS    BUF +1          SEE IF THERE ARE ANY ACTIVE JOBS WAITING
 0288            TC     CCSHOLE
 0289  2         TC     CCSHOLE
 0290            TCF    +2
 0291            TCF    DUMMYJOB
 0292            CCS    BUF             BUF IS ZERO IF THIS IS A PRIOCHNG AND
 0293            TCF    +2              CHANGED PRIORITY IS STILL HIGHEST.
 0294  2         TCF    ENDPRCHG
 0295            INDEX  A               OTHERWISE, SET NEWJOB TO THE RELATIVE
 0296            CAF    0 -1            ADDRESS OF THE NEW JOB'S CORE SET.
 0297            AD     -CCSPR
 0298            TS     NEWJOB
 0299  2         TCF    CHANJOB -1
 0300   EJ1      TS     BUF +2
 0301            AD     BUF +1          - OLD HIGH PRIORITY.
 0302            CCS    A
 0303            CS     BUF +2
 0304            TCF    EJ2             NEW HIGH PRIORITY.
 0305            NOOP
 0306            INDEX  Q
 0307  2         TC     2               PROCEED WITH SEARCH.
 0308   EJ2      TS     BUF +1
 0309            EXTEND
 0310            QXCH   BUF             FOR LOCATING CCS PRIORITY + X INSTR.
 0311            INDEX  BUF
 0312  2         TC     2
 0313   ENDEXECS EQUALS
P0314            IDLING AND COMPUTER ACTIVITY (GREEN) LIGHT MAINTENANCE. THE IDL
 0315  9ING ROUTINE IS NOT A JOB IN ITSELF,
R0316  2BUT RATHER A SUBROUTINE OF THE EXECUTIVE.
 0317  2         SETLOC EXECBANK +1
 0318  2         EBANK= SELFRET         SELF-CHECK STORAGE IN EBANK.
 0319   DUMMYJOB CS     ZERO            SET NEWJOB TO -0 FOR IDLING.
 0320            TS     NEWJOB
 0321            RELINT
 0322            CS     TWO             TURN OFF THE ACTIVITY LIGHT.
 0323            EXTEND
 0324            WAND   DSALMOUT
 0325  2         TCF    CHECKNJ +2
 0326   CHECKNJ  EXTEND                 SPECIAL NEWJOB TEST FOR SELF-CHECK,
 0327            QXCH   SELFRET         WHICH RUNS UNDER EXECUTIVE CONTROL,
 0328    +2      CCS    NEWJOB          BUT DOES NOT HAVE A JOBS CORE REGISTERS.
 0329            TCF    NUCHANGE        NEW JOB REQUIRING A CHANGE JOB.
 0330            CAF    TWO             NEW JOB ALREADY IN POSITION FOR
 0331  2         TCF    NUDIRECT        EXECUTION.
 0332   ADVAN    CAF    SELFBANK        (SIMULATOR ADVAN IF NEWJOB = 77777).
 0333            TS     BBANK
 0334  2         TC     SELFRET
 0335   NUDIRECT EXTEND                 TURN THE GREEN LIGHT BACK ON.
 0336            WOR    DSALMOUT
 0337            DXCH   LOC             JOBS STARTED IN THIS FASHION MUST BE
 0338  2         DTCB                   BASIC.
 0339   NUCHANGE CAF    TWO
 0340            EXTEND
 0341            WOR    DSALMOUT
 0342            CAF    EXECBANK        SWAP CORE SETS.
 0343            TS     FBANK
 0344            INHINT                 CHANGE JOBS
 0345  2         TCF    CHANJOB -1
 0346   SELFBANK BBCON  SELFCHK
P0347  2         PRIORITY CONSTANTS (NOTE IN FIXED-FIXED).
 0348   PRIO1    EQUALS BIT10
 0349   PRIO2    EQUALS BIT11
 0350   PRIO3    OCT    03000
 0351   PRIO4    EQUALS BIT12
 0352   PRIO5    OCT    05000
 0353   PRIO6    OCT    06000
 0354   PRIO7    OCT    07000
 0355   PRIO10   EQUALS BIT13
 0356   PRIO11   OCT    11000
 0357   PRIO12   OCT    12000
 0358   PRIO13   OCT    13000
 0359   PRIO14   OCT    14000
 0360   PRIO15   OCT    15000
 0361   PRIO16   OCT    16000
 0362   PRIO17   OCT    17000
 0363   PRIO20   EQUALS BIT14
 0364   PRIO21   OCT    21000
 0365   PRIO22   OCT    22000
 0366   PRIO23   OCT    23000
 0367   PRIO24   OCT    24000
 0368   PRIO25   OCT    25000
 0369   PRIO26   OCT    26000
 0370   PRIO27   OCT    27000
 0371   PRIO30   OCT    30000
 0372   PRIO31   OCT    31000
 0373   PRIO32   OCT    32000
 0374   PRIO33   OCT    33000
 0375   PRIO34   OCT    34000
 0376   PRIO35   OCT    35000
 0377   PRIO36   OCT    36000
 0378   PRIO37   OCT    37000
 0379   ENDEXECF EQUALS
L      2WAITLIST
R0001  2GROUNDRULE....DELTA T SHOULD NOT EXCEED 12000 (= 2 MINUTES)
 0002  2         SETLOC ENDEXECF
 0003  2         EBANK= LST1            TASK  LISTS IN SWITCHED E BANK.
 0004   WAITLIST XCH    Q                SAVE DELTA T IN Q AND RETURN IN
 0005            TS     WAITEXIT        WAITEXIT.
 0006            EXTEND
 0007            INDEX  A
 0008            DCA    0               PICK UP 2CADR OF TASK.
 0009            TS     WAITADR         BBCON WILL REMAIN IN L.
 0010   DLY2     CAF    WAITBB          ENTRY FROM FIXDELAY AND VARDELAY.
 0011            XCH    BBANK
 0012  2         TCF    WAIT2
R0013  2         RETURN TO CALLER AFTER TASK INSERTION:
 0014   LVWTLIST CA     WAITBANK
 0015            TS     BBANK
 0016            INDEX  WAITEXIT
 0017  2         TC     2
 0018  2WAITBB   BBCON  WAIT2
R0019  2         RETURN TO CALLER +2 AFTER WAITING DT SPECIFIED AT CALLER +1.
 0020   FIXDELAY INDEX  Q               BOTH ROUTINES MUST BE CALLED UNDER
 0021            CAF    0               WAITLIST CONTROL AND TERMINATE THE TASK
 0022  2         INCR   Q               IN WHICH THEY WERE CALLED.
R0023  2         RETURN TO CALLER +1 AFTER WAITING THE DT AS ARRIVING IN A.
 0024   VARDELAY XCH    Q               DT TO Q. TASK ADRES TO WAITADR.
 0025            TS     WAITADR
 0026            CA     BBANK           BBANK IS SAVED DURING DELAY.
 0027            TS     L
 0028            CAF    DELAYEX
 0029            TS     WAITEXIT        GO TO TASKOVER AFTER TASK ENTRY.
 0030  2         TCF    DLY2
 0031  8DELAYEX  TCF    TASKOVER -2     RETURNS TO TASKOVER
R0032  2ENDTASK MUST BE ENTERED IN FIXED-FIXED SO IT IS DISTINGUISHABLE BY ITS A
 0033  9DRES ALONE.
 0034   ENDTASK -2CADR  SVCT3
 0035   SVCT3    CCS    STATE +2        DRIFT FLAG
 00351           TCF    TASKOVER
 00352           TCF    TASKOVER
 00353 2         TCF    +1
 00354           CAF    PRIO35          COMPENSATE FOR NBD COEFFICIENTS ONLY
 00355           TC     NOVAC               ENABLE EVERY 81.93 SECONDS
 00356           2CADR  NBDONLY         EBANK IS SET TO 3
 00357           TCF    TASKOVER
P0036  2         BEGIN TASK INSERTION.
 0037  2         SETLOC ENDEXECS
 0038   WAIT2    TS     WAITBANK        BBANK OF CALLING PROGRAM.
 0039            CS     TIME3
 0040            AD     +1              CCS  A  = + 1/4
 0041            CCS    A               TEST  1/4 - C(TIME3).  IF POSITIVE,
A0042   IT MEANS THAT TIME3 OVERFLOW HAS OCCURRED PRIOR TO CS  TIME3 AND THAT
A0043   C(TIME3) = T - T1, INSTEAD OF 1.0 - (T1 - T).  THE FOLLOWING FOUR
A0044  2ORDERS SET C(A) = TD - T1 + 1 IN EITHER CASE.
 0045            AD     OCT40001        OVERFLOW HAS OCCURRED.  SET C(A) =
 0046  2         CS     A               T - T1 + 3/4 - 1
R0047  2NORMAL CASE (C(A) MINUS) YIELDS SAME C(A)  -(-(1.0-(T1-T))+1/4)-1
 0048            AD     OCT50001
 0049  2         AD     Q               RESULT = TD - T1 + 1.
 0050  2         CCS    A               TEST TD - T1 + 1
 0051            AD     LST1            IF TD - T1 POS, GO TO WTLST5 WITH
 0052  2         TCF    WTLST5          C(A) = (TD - T1) + C(LST1) = TD-T2+1
 0053            NOOP
 0054  2         CS     Q
R0055   NOTE THAT THIS PROGRAM SECTION IS NEVER ENTERED WHEN T-T1 G/E -1,
R0056   SINCE TD-T1+1 = (TD-T) + (T-T1+1), AND DELTA T = TD-T G/E +1 .  (G/E
R0057   SYMBOL MEANS GREATER THAN OR EQUAL TO).  THUS THERE NEED BE NO CON-
R0058  2CERN OVER A PREVIOUS OR IMMINENT OVERFLOW OF TIME3 HERE.
 0059            AD     POS1/2          WHEN TD IS NEXT, FORM QUANTITY
 0060            AD     POS1/2            1.0 - DELTA T = 1.0 - (TD - T)
 0061            XCH    TIME3
 0062            AD     NEGMAX
 0063            AD     Q               1.0 - DELTAT T NOW COMPLETE.
 0064            EXTEND                 ZERO INDEX Q.
 0065  8         QXCH   7               (ZQ)
 0066   WTLST4   XCH    LST1
 0067            XCH    LST1 +1
 0068            XCH    LST1 +2
 0069            XCH    LST1 +3
 0070            XCH    LST1 +4
 0071            XCH    LST1 +5
 0072            XCH    LST1 +6
 0073  2         XCH    LST1 +7
 0074            CA     WAITADR         (MINOR PART OF TASK CADR HAS BEEN IN L.)
 0075            INDEX  Q
 0076  2         TCF    +1
 0077            DXCH   LST2
 0078            DXCH   LST2 +2
 0079            DXCH   LST2 +4
 0080            DXCH   LST2 +6
 0081            DXCH   LST2 +8D
 0082            DXCH   LST2 +10D       AT END, CHECK THAT C(LST2+10) IS STD
 0083            DXCH   LST2 +12D
 0084            DXCH   LST2 +14D
 0085            DXCH   LST2 +16D
 0086            AD     ENDTASK           END ITEM, AS CHECK FOR EXCEEDING
A0087                                     THE LENGTH OF THE LIST.
 0088            EXTEND                 DUMMY TASK ADRES SHOULD BE IN FIXED-
 0089            BZF    LVWTLIST        FIXED SO ITS ADRES ALONE DISTINGUISHES
 0090  8         TCF    WTABORT         IT.
 0091   WTLST5   CCS    A               TEST  TD - T2 + 1
 0092            AD     LST1 +1
 0093            TCF    +4
 0094            AD     ONE
 0095            TC     WTLST2
 0096  2         OCT    1
 0097   +4       CCS    A               TEST  TD - T3 + 1
 0098            AD     LST1 +2
 0099            TCF    +4
 0100            AD     ONE
 0101            TC     WTLST2
 0102  2         OCT    2
 0103   +4       CCS    A               TEST  TD - T4 + 1
 0104            AD     LST1 +3
 0105            TCF    +4
 0106            AD     ONE
 0107            TC     WTLST2
 0108  2         OCT    3
 0109   +4       CCS    A               TEST  TD - T5 + 1
 0110            AD     LST1 +4
 0111            TCF    +4
 0112            AD     ONE
 0113            TC     WTLST2
 0114  2         OCT    4
 0115   +4       CCS    A               TEST  TD - T6 + 1
 0116            AD     LST1 +5
 0117            TCF    +4
 0118            AD     ONE
 0119            TC     WTLST2
 0120  2         OCT    5
 0121    +4      CCS    A               TEST TD - T7 + 1
 0122            AD     LST1 +6
 0123            TCF    +4
 0124            AD     ONE
 0125            TC     WTLST2
 0126  8         OCT    6
 0127    +4      CCS    A
 0128            AD     LST1 +7
 0129            TCF    +4
 0130            AD     ONE
 0131            TC     WTLST2
 0132  2         OCT    7
 0133    +4      CCS    A
 0134   WTABORT  TC     ABORT           NO ROOM IN THE INN.
 0135  2         OCT    1203
 0136            AD     ONE
 0137            TC     WTLST2
 0138  2         OCT    10
 0139   OCT50001 OCT    50001
P0140   THE ENTRY TO WTLST2 JUST PRECEDING OCT  N  IS FOR T  LE TD LE T   -1.
R0141  2                                                   N           N+1
R0142   (LE MEANS LESS THAN OR EQUAL TO).  AT ENTRY, C(A) = -(TD - T   + 1)
R0143  2                                                            N+1
R0144   THE LST1 ENTRY -(T   - T +1) IS TO BE REPLACED BY -(TD - T + 1), AND
R0145  2                  N+1   N                                 N
R0146   THE ENTRY -(T   - TD + 1) IS TO BE INSERTED IMMEDIATELY FOLLOWING.
R0147  2             N+1
 0148   WTLST2   TS     WAITTEMP            C(A) = -(TD - T   + 1)
 0149            INDEX  Q
 0150            CAF    0
 0151  2         TS     Q               INDEX VALUE INTO Q.
 0152            CAF    ONE
 0153            AD     WAITTEMP
 0154            INDEX  Q               C(A) = -(TD - T ) + 1.
 0155  2         ADS    LST1 -1                        N
 0156            CS     WAITTEMP
 0157            INDEX  Q
 0158  2         TCF    WTLST4
R0159  2C(TIME3) = 1.0 - (T1 - T)
R0160   C(LST1  ) = - (T2 - T1) + 1
R0161   C(LST1+1) = - (T3 - T2) + 1
R0162   C(LST1+2) = - (T4 - T3) + 1
R0163   C(LST1+3) = - (T5 - T4) + 1
R0164  2C(LST1+4) = - (T6 - T5) + 1
R0165   C(LST2   ) = 2CADR  TASK1
R0166   C(LST2+2 ) = 2CADR  TASK2
R0167   C(LST2+4 ) = 2CADR  TASK3
R0168   C(LST2+6 ) = 2CADR  TASK4
R0169   C(LST2+8 ) = 2CADR  TASK5
R0170   C(LST2+10) = 2CADR  TASK6
P0171  2         ENTERS HERE ON T3 RUPT TO DISPATCH WAITLISTED TASK.
 0172   T3RUPT   TS     BANKRUPT
 0173            EXTEND
 0174  2         QXCH   QRUPT
 0175   T3RUPT2  CAF    NEG1/2          DISPATCH WAITLIST TASK.
 0176            XCH    LST1 +7
 0177            XCH    LST1 +6
 0178            XCH    LST1 +5
 0179            XCH    LST1 +4         1.  MOVE UP LST1 CONTENTS, ENTERING
 0180            XCH    LST1 +3             A VALUE OF 1/2 +1 AT THE BOTTOM
 0181            XCH    LST1 +2             FOR T6-T5, CORRESPONDING TO THE
 0182            XCH    LST1 +1             INTERVAL 81.91 SEC FOR ENDTASK.
 0183            XCH    LST1
 0184            AD     POSMAX          2. SET T3 = 1.0 - T2 -T USING LIST 1.
 0185            ADS    TIME3           SO T3 WONT TICK DURING UPDATE.
 0186            TS     RUPTAGN
 0187            CS     ZERO
 0188  2         TS     RUPTAGN         SETS RUPTAGN TO +1 ON OVERFLOW.
 0189            EXTEND                 DISPATCH TASK.
 0190            DCS    ENDTASK
 0191            DXCH   LST2 +16D
 0192            DXCH   LST2 +14D
 0193            DXCH   LST2 +12D
 0194            DXCH   LST2 +10D
 0195            DXCH   LST2 +8D
 0196            DXCH   LST2 +6
 0197            DXCH   LST2 +4
 0198            DXCH   LST2 +2
 0199  2         DXCH   LST2
 0200  2         DTCB
 0201   ENDWAITS EQUALS
P0202  2         RETURN, AFTER EXECUTION OF T3 OVERFLOW TASK:
 0203            BLOCK  02
 0204   TASKOVER CCS    RUPTAGN         IF +1 RETURN TO T3RUPT, IF -0 RESUME.
 0205            CAF    WAITBB
 0206            TS     BBANK
 0207  2         TCF    T3RUPT2         DISPATCH NEXT TASK IF IT WAS DUE.
 0208   RESUME   EXTEND
 0209            QXCH   QRUPT
 0210   NOQRSM   CA     BANKRUPT
 0211            TS     BBANK
 0212   NOQBRSM  DXCH   ARUPT
 0213  2         RESUME
 0214   ENDWAITF EQUALS                 LAST FIXED-FIXED LOCATION OF T3RUPT.
L      2PHASE TABLE MAINTENANCE
R0001  2         THE FOLLOWING ROUTINES ARE PROVIDED TO MAINTAIN THE PHASE TABLE
 0002  9. TWO ROUTINES ARE AVAILABLE:
A0003            TC     PHASCHNG        SLOWER BUT LESS STORAGE.
A0004            OCT    PPPGG           CHANGE RESTART GROUP GG TO PHASE PPP
A0005  2                                (PPP IS A SIGNED 8 BIT NUMBER).
A0006            CA     PPPPP           NEW PHASE ARRIVES IN A.
A0007            TC     NEWPHASE
A0008  2         OCT    000GG           UPDATES GG.
R0009            IN ALL CASES THE OLD PHASE RETURNS IN A. IF THE OLD PHASE WAS N
 0010  9EGATIVE, CALL A ROUTINE USING THE
R0011  2CORRESPONDING TERMCADR.
 0012  2         SETLOC ENDWAITF
 0013   PHASCHNG INHINT
 0014            INDEX  Q
 0015            CAF    0               GET PARAMETER WORD.
 0016            TS     RUPTREG4
 0017            MASK   LOW5            GROUP NUMBER 0 - 37.
 0018            DOUBLE
 0019            XCH    RUPTREG4
 0020            EXTEND
 0021            MP     BIT9            SIGNED NEW PHASE.
 0022  2         TCF    PHASCH2
 0023   NEWPHASE INHINT                 NEW PHASE ARRIVES IN A.
 0024            TS     RUPTREG4
 0025            INDEX  Q
 0026            CAF    0               GROUP NUMBER.
 0027            DOUBLE
 0028  2         XCH    RUPTREG4
 0029   PHASCH2  TS     L               DIRECT VERSION.
 0030            COM                    COMPLEMENTED VERSION IMMEDIATELY PRE-
 0031            INDEX  RUPTREG4        CEDES THE DIRECT ONE.
 0032            DXCH   -PHASE0         COPIES DISAGREE FOR MINIMUM TIME.
 0033            EXTEND
 0034  8         BZMF   PHASEXIT        IF NO DERAIL.
 0035            TS     RUPTREG1        IF NEGATIVE, SAVE ABSOLUTE VALUE OF
 0036            EXTEND                 OLD PHASE AND RETURN Q.
 0037            QXCH   RUPTREG2
 0038            CA     RUPTREG4        GET BACK GROUP NUMBER.
 0039            EXTEND
 0040            MP     HALF
 0041            INDEX  A               SELECT TERMCADR.
 0042            CAF    TERMCADR
 0043  2         TC     ISWCALL
 0044            DXCH   RUPTREG1        -OLD PHASE BITS TO A - RETURN -1 TO L.
 0045  2         LXCH   Q
 0046   PHASEXIT COM                    RETURN OLD PHASE IN A.
 0047            RELINT
 0048            INDEX  Q
 0049  2         TC     1
 0050   TERMCADR CADR   10000           FILLED IN AS NEEDED.
 0051            CADR   10000
 0052            CADR   10000
 0053            CADR   10000
 0054            CADR   10000
 0055            CADR   10000
P0056  2         SUBROUTINE TO UPDATE THE PROGRAM NUMBER DISPLAY ON THE DSKY.
 0057   NEWMODEX INDEX  Q               UPDATE MODREG.
 0058            CAF    0
 0059            INCR   Q
 0060            XCH    MODREG
 0061            COM                    IF NO CHANGE IN MODE, RETURN IMMEDIATELY
 0062            AD     MODREG
 0063            EXTEND
 0064  2         BZF    TCQ
 0065            CAF    +2              CALL PINBALL SUBROUTINE.
 0066  2         TCF    SWCALL          WITH Q SET TO CALLERS RETURN.
 0067  2         CADR   DSPMM
R0068  2         RETURN TO CALLER +3 IF MODE = THAT AT CALLER +1. OTHERWISE RETU
 0069  9RN TO CALLER +2.
 0070   CHECKMM  INDEX  Q
 0071            CS     0
 0072            AD     MODREG
 0073            EXTEND
 0074  2         BZF    +3
 0075            INDEX  Q
 0076  2         TC     1               NO MATCH.
 0077            INDEX  Q
 0078  2TCQ      TC     2               (ALWAYS AVAILABLE TO BZF & BZMF)
 0079   ENDPHMNF EQUALS
L      2FRESH START AND RESTART
 0001            BANK   12
 0002  2         EBANK= LST1
 0003   SLAP1    INHINT                 FRESH START. COMES HERE FROM PINBALL.
 0008  2         TC     STARTSUB        SUBROUTINE DOES MOST OF THE WORK.
 0009            CAF    BIT15           TURN OFF ALL DSPTAB +11D LAMPS ONLY ON
 0010  2         TS     DSPTAB +11D     REQUESTED FRESH START.
 0011            CAF    ZERO            SAME STORY ON ZEROING FAILREG.
 0012  2         TS     FAILREG
 0019   DOFSTART CAF    ZERO            DO A FRESH START.
 0020            TS     SMODE
 0021            TS     MODREG
 0022            TS     AGSWORD         ALLOW AGS INITIALIZATION
 0023  2         TS     UPLOCK          FREE UPLINK INTERLOCK
 00231           TS     CDUX            ZERO CDUS SO MATRIX COMPUTATION IN T4
 00232           TS     CDUY            WONT OVERFLOW.
 00233 2         TS     CDUZ
 0024            TS     PHASE0          INITIALIZE PHASE TABLE - NO MISSION
 0025            TS     PHASE1          PROGRAMS RUNNING.
 0026            TS     PHASE2
 0027            TS     PHASE3
 0028            TS     PHASE4
 0029  2         TS     PHASE5
 0030            COM
 0031            TS     -PHASE0
 0032            TS     -PHASE1
 0033            TS     -PHASE2
 0034            TS     -PHASE3
 0035            TS     -PHASE4
 0036  2         TS     -PHASE5
 0037            CAF    IM30INIF        FRESH START IMU INITIALIZATION.
 0038  2         TS     IMODES30
 0039            CAF    BIT10           REMOVE IMU FAIL INHIBIT IN 5 SECS.
 0040            TC     WAITLIST
 0041            2CADR  IFAILOK
 0042            EXTEND                 SETTING T5RUPT FOR SETIDLER PROGRAM
 0043            DCA    SETADR          THE SETIDLER PROGRAM ASSURES 1 SECOND
 0043012         DXCH   T5ADR           DELAY BEFORE THE DAPIDLER BEGINS.
 004401          CAF    OCT04012        INITIALIZE DAPBOOLS
 0044022         TS     DAPBOOLS
 0045            EXTEND                 INITIALIZE SWITCHES ONLY ON FRESH START.
 0046            DCA    SWINIT
 0047            DXCH   STATE
 0048            EXTEND
 0049            DCA    SWINIT +2
 0050  2         DXCH   STATE +2
 0051   ENDRSTRT CAF    BIT6            IF GIMBAL LOCK LAMP IS STILL ON,
 0052            MASK   DSPTAB +11D     IMU WAS FOUND IN GIMBAL LOCK IN RESTART
 0053            CCS    A               AND LEFT IN COARSE ALIGN. IN THIS CASE
 0054            CS     BIT9            SET ISS OPERATE BIT IN IMODES30 TO
 0055  2         ADS    IMODES30        OPERATE SO T4 INBIT MONITOR WONT ZERO
 0056            RELINT                 THE CDUS AS IT DOES IN FRESH START.
 0057            TC     BANKCALL        DISPLAY MAJOR MODE.
 0058  2         CADR   DSPMM
 0059  2STARTSW  TCF    DUMMYJOB +2     PATCH FOR SIMULATION.
 0060   STARTSIM CAF    BIT14
 0061            TC     FINDVAC
 0062            OCT    77777           FATAL IF NOT PATCHED AS ABOVE.
 0063  2         OCT    77777
 0064            TCF    DUMMYJOB +2     DONT ZERO NEWJOB
P0065  2         COMES HERE FROM LOCATION 4000, GOJAM. RESTART ANY PROGRAMS WHIC
 0066  9H MAY HAVE BEEN RUNNING AT THE TIME.
 0067  2GOPROG   INCR   REDOCTR         ADVANCE RESTART COUNTER.
 0068  2         TC     STARTSUB        COMMON INITIALIZATION ROUTINE.
 0069            CAF    9,6             LEAVE PROGRAM ALARM AND GIMBAL LOCK
 0070            MASK   DSPTAB +11D     LAMPS INTACT ON RESTART.
 0071            AD     BIT15
 0072            XCH    DSPTAB +11D
 0073            MASK   BIT6
 0074            CCS    A               IF GIMBAL LOCK LAMP WAS ON, LEAVE ISS IN
 0075            CAF    BIT4            COARSE ALIGN.
 0076            EXTEND
 0077  2         WOR    12
 007701          EXTEND                 SETTING T5RUPT FOR DAPIDLER PROGRAM
 007702          DCA    IDLEADR
 007703          DXCH   T5ADR
 0078            CAF    PRIO37          DISPLAY FAILREG AS INDICATION OF RESTART
 0079            TC     NOVAC           OR TO DISPLAY ABORT CODE AS ABOVE.
 0080            2CADR  DOALARM
 0081            EXTEND                 DONT TRY TO RESTART IF ERROR LIGHT RESET
 0082            READ   15              AND MARK REJECT BUTTONS DEPRESSED.
 0083            AD     -ELR
 0084            EXTEND
 0085            BZF    +2
 0086  2         TCF    PCLOOP -1       VERIFY PHASE TABLE.
 0087            CAF    BIT5
 0088            EXTEND
 0089            RAND   16
 0090            AD     -MKREJ
 0091            EXTEND
 0092  2         BZF    DOFSTART
 0093    -1      CAF    NUMGRPS         VERIFY PHASE TABLE AGREEMENT.
 0094   PCLOOP   TS     MPAC +5
 0095            DOUBLE
 0096            EXTEND
 0097            INDEX  A
 0098            DCA    -PHASE0         COMPLEMENT INTO A - DIRECT INTO L.
 0099            EXTEND
 0100            RXOR   L               RESULT MUST BE -0 FOR AGREEMENT.
 0101            CCS    A
 0102            TCF    PTBAD           RESTART FAILURE.
 0103            TCF    PTBAD
 0104  2         TCF    PTBAD
 0105            CCS    MPAC +5         PROCESS ALL RESTART GROUPS.
 0106  2         TCF    PCLOOP
 0107            TS     MPAC +6         SET TO +0.
 0108            CAF    NUMGRPS         SEE IF ANY GROUPS RUNNING.
 0109   NXTRST   TS     MPAC +5
 0110            DOUBLE
 0111            INDEX  A
 0112            CCS    PHASE0
 0113            TCF    PACTIVE         PNZ - GROUP ACTIVE.
 0114  2         TCF    PINACT          +0 - GROUP NOT RUNNING.
 0115   PTERM    TS     MPAC            NNZ - TERMINATE REQUEST.
 0116            INDEX  MPAC +5         PICK UP RESTART TERMINATE CADR.
 0117  2         CAF    RTERMCAD
 0118   PACT2    TS     L
 0119            INCR   MPAC            ABS OF PHASE.
 0120            CS     LOW7            SEE THAT MAG IS LESS THAN 128.
 0121            MASK   MPAC
 0122            CCS    A
 0123  2         TCF    PTBAD           BAD DATA.
 0124            INCR   MPAC +6         INDICATE GROUP DEMANDS PRESENT.
 0125            CA     L
 0126  2         TC     SWCALL          MUST RETURN TO SWRETURN.
 0127   PINACT   CCS    MPAC +5         PROCESS ALL RESTART GROUPS.
 0128  2         TCF    NXTRST
 0142   TSTMPAC6 CCS    MPAC +6         IF NO GROUPS ACTIVE THIS REQUEST, DO A
 0143            TCF    DORSTART
 0144  2         TCF    DOFSTART        FRESH START
 0145   PACTIVE  TS     MPAC
 0146            INDEX  MPAC +5         SELECT RESTART ACTIVE CADR.
 0147            CAF    RACTCADR
 0148  2         TCF    PACT2
 0149   PTBAD    CAF    OCT1107         SET ADDITIONAL FAILURE TO SHOW PHASE
 0150            TS     SFAIL           TABLE DISAGREEMENT (WILL BE DISPLAYED
 0151  2         TCF    DOFSTART        IN R2).
 0152  2OCT1107  OCT    1107            ADDITIONAL ALARM CODE.
 0153   DORSTART CAF    IFAILINH        LEAVE IMU FAILURE INHIBITS INTACT ON
 0154            MASK   IMODES30        RESTART, RESETTING ALL FAILURE CODES.
 0155            AD     IM30INIR
 0156  2         TS     IMODES30
 0157            TCF    ENDRSTRT
P0164  2         INITIALIZATION COMMON TO BOTH FRESH START AND RESTART.
 0165   STARTSUB XCH    Q
 0166  2         TS     BUF             EXEC TEMPS ARE AVAILABLE TO US.
 0167            CAF    ZERO            ZERO OUTBITS WITHIN 3MS OF RESTART.
 0168            EXTEND
 0169            WRITE  12
 0170            EXTEND
 0171            WRITE  14
 0172            EXTEND
 0173            WRITE  11
 0174            CAF    PRIO34          ENABLE INTERRUPTS.
 0175            EXTEND
 0176  2         WRITE  13
 0177            CAF    POSMAX          T3 AND T4 OVERFLOW AS SOON AS POSSIBLE.
 0178            TS     TIME5           SO DOES T5.
 0179            TS     TIME3             (POSMAX IS PSEUDO INTERRUPT SIGNAL IN
 0180  2         TS     TIME4             CASE RUPT SIGNALLED BEFORE TS TIME3).
 0181            CAF    STARTEB
 0182  2         TS     EBANK           SET FOR E3
 0183            CAF    NEG1/2          INITIALIZE WAITLIST DELTA-TS.
 0184            TS     LST1 +7
 0185            TS     LST1 +6
 0186            TS     LST1 +5
 0187            TS     LST1  +4
 0188            TS     LST1  +3
 0189            TS     LST1  +2
 0190            TS     LST1  +1
 0191  2         TS     LST1
 0192            CS     ENDTASK
 0193            TS     LST2
 0194            TS     LST2 +2
 0195            TS     LST2 +4
 0196            TS     LST2 +6
 0197            TS     LST2 +8D
 0198            TS     LST2 +10D
 0199            TS     LST2 +12D
 0200            TS     LST2 +14D
 0201            TS     LST2 +16D
 0202            CS     ENDTASK +1
 0203            TS     LST2 +1
 0204            TS     LST2 +3
 0205            TS     LST2 +5
 0206            TS     LST2 +7
 0207            TS     LST2 +9D
 0208            TS     LST2 +11D
 0209            TS     LST2 +13D
 0210            TS     LST2 +15D
 0211  2         TS     LST2 +17D
 0212            CS     ZERO            MAKE ALL EXECUTIVE REGISTER SETS
 0213            TS     PRIORITY        AVAILABLE.
 0214            TS     PRIORITY +12D
 0215            TS     PRIORITY +24D
 0216            TS     PRIORITY +36D
 0217            TS     PRIORITY +48D
 0218            TS     PRIORITY +60D
 0219  2         TS     PRIORITY +72D
 0220  2         TS     NEWJOB          SHOWS NO ACTIVE JOBS.
 0221            CAF    VAC1ADRC        MAKE ALL VAC AREAS AVAILABLE.
 0222            TS     VAC1USE
 0223            AD     LTHVACA
 0224            TS     VAC2USE
 0225            AD     LTHVACA
 0226            TS     VAC3USE
 0227            AD     LTHVACA
 0228            TS     VAC4USE
 0229            AD     LTHVACA
 0230  2         TS     VAC5USE
 0231            CAF    TEN             TURN OFF ALL DISPLAY SYSTEM RELAYS.
 0232            TS     DIDFLG          DISPLAY INERTIAL DATA FLAG.
 0233   DSPOFF   TS     MPAC
 0234            CS     BIT12
 0235            INDEX  MPAC
 0236            TS     DSPTAB
 0237            CCS    MPAC
 0238  2         TC     DSPOFF
 0239            TS     INLINK
 0240            TS     DSPCNT
 0241            TS     LMPCMD
 0242            TS     CADRSTOR
 0243            TS     REQRET
 0244            TS     CLPASS
 0245            TS     DSPLOCK
 0246            TS     MONSAVE         KILL MONITOR
 0247            TS     MONSAVE1
 0248            TS     GRABLOCK
 0249            TS     VERBREG
 0250            TS     NOUNREG
 0251            TS     DSPLIST
 0252            TS     DSPLIST +1
 0253  2         TS     DSPLIST +2
 0254            TS     MARKSTAT
 0255            TS     EXTVBACT        MAKE EXTENDED VERBS AVAILABLE
 0256            TS     IMUCADR
 0257            TS     OPTCADR
 0258            TS     RADCADR
 0259            TS     LGYRO
 0260            TS     DSRUPTSW
 0261            CAF    NOUTCON
 0262  2         TS     NOUT
 0263            CS     ONE             NO RADAR DESIGNATION.
 0264  2         TS     SAMPLIM         NO RADAR RUPTS EXPECTED.
 0265            CAF    T4LINIT
 0266  2         TS     T4LOC
 0267            CAF    IM33INIT        NO PIP OR TM FAILS.
 0268  2         TS     IMODES33
 0269            CAF    BIT6            SET LR POS.
 0270            EXTEND
 0271            RAND   33
 0272            AD     RMODINIT
 0273  2         TS     RADMODES
 0274            CAF    LESCHK          SELF CHECK GO-TO REGISTER.
 0275            TS     SELFRET
 0276            CS     VD1
 0277            TS     DSPCOUNT
 0278  2         EBANK= DNTMGOTO
 0279            CAF    LDNTMGO         SET UP TM PROGRAM.
 0280  2         TS     EBANK
 0281            CAF    LDNPHAS1
 0282  2         TS     DNTMGOTO
 0283            CAF    NOMTMLST        SET UP NOMINAL DOWNLINK LIST.
 0284  2         TS     DNLSTADR
 0285  2         TC     BUF
 0289   IFAILINH OCT    35              ISS FAILURE INHIBIT BITS.
 0290   LDNPHAS1 GENADR DNPHASE1
 0291   LDNTMGO  ECADR  DNTMGOTO
 0292   NOMTMLST GENADR NOMDNLST
 0293   LESCHK   GENADR SELFCHK
 0294   T4LINIT  ADRES  DSKYRSET
 0295   VAC1ADRC ADRES  VAC1USE
 0296  2LTHVACA  DEC    44
 0297   STARTEB  ECADR  LST1
 0298  2NUMGRPS  EQUALS FIVE            SIX GROUPS CURRENTLY.
R0299  2         WHERE TO GO ON RESTART IF GROUP ACTIVE:
 0300   RACTCADR CADR   10000           AVAILABLE FOR USE-NEXT ONE USED
 0301            CADR   OPTMSTRT         RESTARTS DURING OPTM ALIGN CALIBRATION
 0302            CADR   10000
 0303            CADR   10000
 0304            CADR   10000
 0305  2         CADR   10000
R0306  2         WHERE TO GO ON RESTART IF TERMINATE REQUESTED.
 0307   RTERMCAD CADR   10000
 0308            CADR   10000
 0309            CADR   10000
 0310            CADR   10000
 0311            CADR   10000
 0312  2         CADR   10000
 0313   -ELR     OCT    -22             -ERROR LIGHT RESET KEY CODE.
 0314   -MKREJ   OCT    -20             - MARK REJECT.
 0315   IM30INIF OCT    37411           INHIBITS IMU FAIL FOR 5 SEC AND PIP ISSW
 0316   IM30INIR OCT    37400           LEAVE FAIL INHIBITS ALONE.
 0317   IM33INIT OCT    16000           NO PIP OR TM FAIL SIGNALS.
 0318   9,6      OCT    440             MASK FOR PROG ALARM AND GIMBAL LOCK.
 0319  2RMODINIT OCT    00102
 031911          EBANK= DT
 031912 IDLEADR  2CADR  DAPIDLER
 031913          EBANK= DT
 031914 SETADR   2CADR  SETIDLE
 0320   SWINIT   OCT    0
 0321            OCT    0
 0322            OCT    0
 0323  2         OCT    0
 0324   OCT04012 OCTAL  04012           INITIAL VALUE OF DAPBOOLS
 0325   ENDFRESS EQUALS
L      2T4RUPT PROGRAM
 0001  2         SETLOC ENDPHMNF
 0002            EBANK= M11
 0003   T4RUPT   EXTEND                 ZERO OUT0 EVERY T4RUPT.
 0004  2         WRITE  OUT0            (COMES HERE WITH +0 IN A)
 0005            INDEX  T4LOC           NORMALLY TO NORMT4, BUT TO LMPRESET OR
 0006  2         TCF    0               DSKYRSET AFTER OUT0 COMMAND.
 0007   NORMT4   CCS    DSRUPTSW        GOES 7(-1)0.
 0008            TCF    +2
 0009            CAF    SEVEN
 0010  2         TS     DSRUPTSW
 0011            CAF    T4RPTBB         OFF TO SWITCHED BANK
 0012            XCH    BBANK
 0013  2         TCF    T4RUPTA
 0014   LMPRESET CAF    90MRUPT         30 MS ON / 90 MS OFF.
 0015  2         TCF    +2
 0016   DSKYRSET CAF    100MRUPT        20 MS ON / 100 MS OFF.
 0017            TS     TIME4
 0018            CAF    LNORMT4
 0019            TS     T4LOC
 0020  2         TCF    NOQBRSM
 0021   90MRUPT  DEC    16375
 0022   100MRUPT DEC    16374
 0023   LNORMT4  ADRES  NORMT4
 0024  274K      OCT    74000
R0025   RELTAB IS A PACKED TABLE. RELAYWORD CODE IN UPPER 4 BITS, RELAY CODE
R0026  2IN LOWER 5 BITS.
 0027   RELTAB   OCT    04025
 0028            OCT    10003
 0029            OCT    14031
 0030            OCT    20033
 0031            OCT    24017
 0032            OCT    30036
 0033            OCT    34034
 0034            OCT    40023
 0035            OCT    44035
 0036            OCT    50037
 0037            OCT    54000
 0038  4RELTAB11 OCT    60000
 0039  4ENDT4FF  EQUALS
P0040  2         SWITCHED-BANK PORTION.
 0041  2         SETLOC ENDFRESS
 0042   T4RUPTA  TS     BANKRUPT
 0043            EXTEND
 0044  2         QXCH   QRUPT
 0045   LMPOUT   CCS    LMPCMD          SEE IF LMP COMMAND TO BE SENT. IF SO,
 0046            TCF    CDRVE           BIT 15 = 1 AND (UP TO) BITS 1 - 11
 0047  2         TCF    CDRVE           CONTAIN THE COMMAND.
 0048            CAF    LOW11
 0049            MASK   LMPCMD          LEAVE COMMAND PORTION INTACT.
 0050            TS     LMPCMD
 0051            AD     74K
 0052            EXTEND
 0053  2         WRITE  OUT0
 0054            CAF    LLMPRS
 0055            TS     T4LOC
 0056            CAF    30MRUPT
 0057  2         TCF    SETTIME4
 0058   CDRVE    CCS    DSPTAB +11D
 0059            TC     DSPOUT
 0060  2         TC     DSPOUT
 0061            XCH    DSPTAB +11D
 0062            MASK   LOW11
 0063            TS     DSPTAB +11D
 0064            AD     RELTAB11
 0065            TC     DSPLAYC
P0066  2DSPOUT PROGRAM. PUTS OUT DISPLAYS.
 0067   DSPOUT   CCS    NOUT            DRIVE DISPLAY SYSTEM RELAYS.
 0068  2         TCF    +3
 0069   NODSPOUT CAF    120MRUPT        SET FOR RUPT IN 120 MS IF NO RELAYS.
 0070  2         TCF    SETTIME4
 0071            TS     NOUT
 0072            CS     ZERO
 0073            TS     DSRUPTEM        SET TO -0 FOR 1ST PASS THRU DSPTAB
 0074            XCH    DSPCNT
 0075            AD     NEG0            TO PREVENT +0
 0076            TS     DSPCNT
 0077   DSPSCAN  INDEX  DSPCNT
 0078            CCS    DSPTAB
 0079            CCS    DSPCNT          IF DSPTAB ENTRY +, SKIP
 0080            TC     DSPSCAN -2      IF DSPCNT +, AGAIN
 0081            TC     DSPLAY          IF DSPTAB ENTRY -, DISPLAY
 0082   TABLNTH  OCT    12              DEC 10   LENGTH OF DSPTAB
 0083            CCS    DSRUPTEM        IF DSRUPTEM=+0,2ND PASS THRU DSPTAB
 0084   120MRUPT DEC    16372           (DSPCNT = 0). +0 INTO NOUT.
 0085            TS     NOUT
 0086            TCF    NODSPOUT
 0087            TS     DSRUPTEM        IF DSRUPTEM=-0,1ST PASS THRU DSPTAB
 0088            CAF    TABLNTH         (DSPCNT=0). +0 INTO DSRUPTEM. PASS AGAIN
 0089  2         TC     DSPSCAN -1
 0090   DSPLAY   AD     ONE
 0091            INDEX  DSPCNT
 0092            TS     DSPTAB          REPLACE POSITIVELY
 0093            MASK   LOW11           REMOVE BITS 12 TO 15
 0094            TS     DSRUPTEM
 0095            CAF    HI5
 0096            INDEX  DSPCNT
 0097            MASK   RELTAB          PICK UP BITS 12 TO 15 OF RELTAB ENTRY
 0098            AD     DSRUPTEM
 0099   DSPLAYC  EXTEND
 0100  2         WRITE  OUT0
 0101            CAF    LDSKYRS
 0102            TS     T4LOC
 0103  2         CAF    20MRUPT
 0104   SETTIME4 TS     TIME4
P0105  2         JUMP TO APPROPRIATE ONCE-PER SECOND (.96 SEC ACTUALLY) ACTIVITY
 0106   T4JUMP   INDEX  DSRUPTSW
 0107  2         TCF    +1
 0108  2         TC     ALTOUT
 0109            TCF    RRAUTCHK
 0110            TCF    IMUMON
 0111            TCF    GPMATRIX
 0112            TC     ALTROUT
 0113            TCF    RRAUTCHK
 0114            TCF    IMUMON
 0115            TCF    GPMATRIX
 0116   LDSKYRS  ADRES  DSKYRSET
 0117  2LLMPRS   ADRES  LMPRESET
 0118   30MRUPT  DEC    16381
 0119   20MRUPT  DEC    16382
P0120  4THIS ROUTINE SERVICES THE METER OUTPUTS.
R0121   DIDFLG INDICATES THE STATE OF THE PROGRAM..............
R0122   IF GREATER THAN ZERO, THEN UNABLE TO DISPLAY DATA
R0123   IF EQUAL TO ZERO, THEN THE PROGRAM IS IN USE
R0124  2IF LESS THAN ZERO, THEN THE PROGRAM IS ABLE TO BE USED............
 0125   ALTOUT   TC     DISINDAT
 0126            CS     BIT2
 0127            EXTEND
 0128            WAND   14              SET UP OUTPUT FOR ALTITUDE
 0129            CCS    ALT             -1 IF OLD DATA TO BE EXTRAPOLATED.
 0130            TCF    +4              NEW DATA.
 0131            TCF    +3
 0132  2         TCF    OLDDATA
 0133            TS     ALT             CHANGE -0 IN ALT TO +0.
 0134            CS     ONE             RESET ALTSAVE.
 0135            DXCH   ALT
 0136   ZDATA2   DXCH   ALTSAVE
 0137  2         TCF    NEWDATA
 0138   OLDDATA  CA     ALTRATE         USE ALTRATE TO EXTRAPOLATE.
 0139            EXTEND
 0140            MP     ARTOA           RATE APPLIES FOR .96 SEC.
 0141            AD     ALTSAVE +1
 0142            TS     ALTSAVE +1      AND MAYBE SKIP.
 0143            CAF    ZERO
 0144  2         ADS    ALTSAVE
 0145            CAF    POSMAX          FORCE SIGN AGREEMENT ASSUMING ALTSAVE IS
 0146            AD     ONE             NOT NEGATIVE. IF IT IS, THE FINAL TS
 0147            AD     ALTSAVE +1      WILL NOT SKIP AND WE CAN SET ALTSAVE TO
 0148            TS     ALTSAVE +1      ZERO IN THAT CASE.
 0149            CAF    ZERO
 0150            AD     POSMAX
 0151            AD     ALTSAVE
 0152            TS     ALTSAVE
 0153  2         TCF    ZERODATA        ALTSAVE NEGATIVE - SET TO ZERO.
 0154   NEWDATA  CCS    ALTSAVE         MAKE UP 15 BIT UNSIGNED OUTPUT.
 0155            CAF    BIT15           MAJOR PART +1 OR +0.
 0156            AD     ALTSAVE +1
 0157   METEROUT TS     ALTM
 0158            CAF    BITSET
 0159            EXTEND
 0160            WOR    14
 0161  2         TCF    DONEDID
 0162   ALTROUT  TC     DISINDAT
 0163            CAF    BIT2
 0164            EXTEND
 0165            WOR    14              SET UP OUTPUT FOR ALT. RATE
 0166            CA     ALTRATE
 0167  2         TCF    METEROUT
 0168   DISINDAT CCS    DIDFLG
 0169            TCF    DONEDID
 0170            NOOP
 0171            CAF    BIT6
 0172            EXTEND
 0173            RAND   30              CHECK DISPLAY INERTIAL DATA BIT
 0174            CCS    A
 0175            TCF    ALLDONE
 0176            CCS    DIDFLG
 0177            NOOP
 0178  2         TCF    GOAGN
 0179   FIRSTIME CAF    BIT8
 0180            EXTEND
 0181            WOR    12              ENABLE DISPLAY INERTIAL DATA
 0182            CAF    ZERO
 0183            TS     DIDFLG
 0184            TS     LASTXCMD
 0185            TS     LASTYCMD
 0186            CAF    SIX
 0187            TC     WAITLIST
 0188            2CADR  INTLZE
 0189  2         TC     DONEDID
 0190   INTLZE   CAF    BIT2
 0191            EXTEND
 0192            WOR    12              ENABLE RR ERROR COUNTER
 0193  2         TC     TASKOVER
 0194   GOAGN    CS     LASTXCMD
 0195            AD     FORVEL
 0196            TS     OPTXCMD
 0197            CA     FORVEL
 0198            TS     LASTXCMD
 0199            CS     LASTYCMD
 0200            AD     LATVEL
 0201            TS     OPTYCMD
 0202            CA     LATVEL
 0203            TS     LASTYCMD
 0204  2         TC     Q
 0205   ALLDONE  CS     DIDRESET        REMOVE DISPLAY INERTIAL DATA AND ECTR.
 0206            EXTEND
 0207            WAND   12              RESET RR ERROR COUNTER
 0208   DONEDID  TCF    RCSMONIT
 0209   ZERODATA CAF    ZERO
 0210            TS     L
 0211  2         TCF    ZDATA2
 0212   ARTOA    DEC    .20469          ALT DUE TO ALTRATE FOR .96 SEC.
 0213  2BITSET   OCT    6004
 0214   DIDRESET OCT    202
P0215  2         IMU INBIT MONITOR - ENTERED EVERY 480 MS BY T4RUPT.
 0216   IMUMON   CA     IMODES30        SEE IF THERE HAS BEEN A CHANGE IN THE
 0217            EXTEND                 RELEVANT BITS OF CHAN 30.
 0218            RXOR   30
 0219            MASK   30RDMSK
 0220            EXTEND
 0221  2         BZF    TNONTEST        NO CHANGE IN STATUS.
 0222            TS     RUPTREG1        SAVE BITS WHICH HAVE CHANGED.
 0223            LXCH   IMODES30        UPDATE IMODES30.
 0224            EXTEND
 0225            RXOR   L
 0226  2         TS     IMODES30
 0227            CS     ONE
 0228            XCH    RUPTREG1
 0229            EXTEND
 0230            BZMF   TLIM            CHANGE IN IMU TEMP.
 0231  2         TCF    NXTIFBIT        BEGIN BIT SCAN.
 0232    -1      AD     ONE             (RE-ENTERS HERE FROM NXTIFAIL.)
 0233   NXTIFBIT INCR   RUPTREG1        ADVANCE BIT POSITION NUMBER.
 0234    +1      DOUBLE
 0235            TS     A               SKIP IF OVERFLOW.
 0236  2         TCF    NXTIFBIT        LOOK FOR BIT.
 0237            XCH    RUPTREG2        SAVE OVERFLOW-CORRECTED DATA.
 0238            INDEX  RUPTREG1        SELECT NEW VALUE OF THIS BIT.
 0239            CAF    BIT14
 0240            MASK   IMODES30
 0241            INDEX  RUPTREG1
 0242  2         TC     IFAILJMP
 0243   NXTIFAIL CCS    RUPTREG2        PROCESS ANY ADDITIONAL CHANGES.
 0244  2         TCF    NXTIFBIT -1
 0245   TNONTEST CS     IMODES30        AFTER PROCESSING ALL CHANGES, SEE IF IT
 0246            MASK   BIT7            IS TIME TO ACT ON A TURN-ON SEQUENCE.
 0247            CCS    A
 0248  2         TCF    C33TEST         NO - EXAMINE CHANNEL 33.
 0249            CAF    BIT8            SEE IF FIRST SAMPLE OR SECOND.
 0250            MASK   IMODES30
 0251            CCS    A
 0252  2         TCF    PROCTNON        REACT AFTER SECOND SAMPLE.
 0253            CAF    BIT8            IF FIRST SAMPLE, SET BIT TO REACT NEXT
 0254            ADS    IMODES30        TIME.
 0255            TCF    C33TEST
P0256  2         PROCESS IMU TURN-ON REQUESTS AFTER WAITING 1 SAMPLE FOR ALL SIG
 0257  9NALS TO ARRIVE.
 0258   PROCTNON CS     BITS7&8
 0259            MASK   IMODES30
 0260            TS     IMODES30
 0261            MASK   BIT14           SEE IF TURN-ON REQUEST.
 0262            CCS    A
 0263  2         TCF    OPONLY          OPERATE ON ONLY.
 0264            CS     IMODES30        IF TURN-ON REQUEST, WE SHOULD HAVE IMU
 0265            MASK   BIT9            OPERATE.
 0266            CCS    A
 0267  2         TCF    +3
 0268            TC     ALARM           ALARM IF NOT.
 0269  2         OCT    213
 0270    +3      TC     CAGESUB
 0271            CAF    90SECS
 0272            TC     WAITLIST
 0273            2CADR  ENDTNON
 0274  2         TCF    C33TEST
 0275   RETNON   CAF    90SECS
 0276  2         TC     VARDELAY
 0277   ENDTNON  CS     BIT2            RESET TURN-ON REQUEST FAIL BIT.
 0278            MASK   IMODES30
 0279            XCH    IMODES30
 0280            MASK   BIT2            IF IT WAS OFF, SEND ISS DELAY COMPLETE.
 0281            EXTEND
 0282  2         BZF    ENDTNON2
 0283            CAF    BIT14           IF IT WAS ON AND TURN-ON REQUEST NOW
 0284            MASK   IMODES30        PRESENT, RE-ENTER 90 SEC DELAY IN WL.
 0285            EXTEND
 0286  2         BZF    RETNON
 0287            CS     STATE           IF IT IS NOT ON NOW, SEE IF A PROG WAS
 0288            MASK   IMUSEFLG        WAITING.
 0289            CCS    A
 0290            TCF    TASKOVER
 0291            TC     POSTJUMP
 0292  2         CADR   IMUBAD          UNSUCCESSFUL TURN-ON.
 0293   ENDTNON2 CAF    BIT15           SEND ISS DELAY COMPLETE.
 0294            EXTEND
 0295  2         WOR    12
 0296  2UNZ2     TC     ZEROICDU
 0297            CS     BITS4&5         REMOVE ZERO AND COARSE.
 0298            EXTEND
 0299  2         WAND   12
 0300            CAF    3SECS           ALLOW 3 SECS FOR COUNTER TO FIND GIMBAL.
 0301  2         TC     VARDELAY
 0302   ISSUP    CS     OCT54           REMOVE CAGING, IMU FAIL INHIBIT, AND
 0303            MASK   IMODES30        ICDUFAIL INHIBIT FLAGS.
 0304  2         TS     IMODES30
 0305  2         TC     SETISSW         ISS WARNING MIGHT HAVE BEEN INHIBITED.
 0306            CS     BIT15           REMOVE IMU DELAY COMPLETE DISCRETE.
 0307            EXTEND
 0308  2         WAND   12
 0309            CAF    BIT11           DONT ENABLE PROG ALARM ON PIP FAIL FOR
 0310            TC     WAITLIST        ANOTHER 10 SECS.
 0311            2CADR  PFAILOK
 0312            CS     STATE           SEE IF ANYONE IS WAITING FOR THE IMU AT
 0313            MASK   IMUSEFLG        IMUZERO. IF SO, WAKE THEM UP.
 0314            CCS    A
 0315  2         TCF    TASKOVER
 0316            TC     POSTJUMP
 0317  2         CADR   ENDIMU
 0318   OPONLY   CAF    IMUSEFLG        IF OPERATE ON ONLY, ZERO THE COUNTERS
 0319            MASK   STATE           UNLESS SOMEONE IS USING THE IMU.
 0320            CCS    A
 0321  2         TCF    C33TEST
 0322  2         TC     CAGESUB2        SET TURNON FLAGS.
 0323            CAF    BIT5
 0324            EXTEND
 0325  2         WOR    12
 0326            CAF    BIT6            WAIT 300 MS FOR AGS TO RECEIVE SIGNAL.
 0327            TC     WAITLIST
 0328            2CADR  UNZ2
 0329            TCF    C33TEST
P0330  2         MONITOR CHANNEL 33 FLIP-FLOP INPUTS.
 0331   C33TEST  CA     IMODES33        SEE IF RELEVANT CHAN 33 BITS HAVE
 0332            MASK   33RDMSK
 0333            TS     L               CHANGED.
 0334            CAF    33RDMSK
 0335            EXTEND
 0336            WAND   33              RESETS FLIP-FLOP INPUTS.
 0337            EXTEND
 0338            RXOR   L
 0339            EXTEND
 0340  2         BZF    GLOCKMON        ON NO CHANGE.
 0341            TS     RUPTREG1        SAVE BITS WHICH HAVE CHANGED.
 0342            LXCH   IMODES33
 0343            EXTEND
 0344            RXOR   L
 0345  2         TS     IMODES33        UPDATED IMODES33.
 0346            CAF    ZERO
 0347            XCH    RUPTREG1
 0348            DOUBLE
 0349  2         TCF    NXTIBT +1       SCAN FOR BIT CHANGES.
 0350    -1      AD     ONE
 0351   NXTIBT   INCR   RUPTREG1
 0352    +1      DOUBLE
 0353            TS     A               (CODING IDENTICAL TO CHAN 30).
 0354  2         TCF    NXTIBT
 0355            XCH    RUPTREG2
 0356            INDEX  RUPTREG1        GET NEW VALUE OF BIT WHICH CHANGED.
 0357            CAF    BIT13
 0358            MASK   IMODES33
 0359            INDEX  RUPTREG1
 0360  2         TC     C33JMP
 0361   NXTFL33  CCS    RUPTREG2        PROCESS POSSIBLE ADDITIONAL CHANGES.
 0362            TCF    NXTIBT -1
P0363  2         MONITOR FOR GIMBAL LOCK.
 0364   GLOCKMON CCS    CDUZ
 0365            TCF    GLOCKCHK        SEE IF MAGNITUDE OF MGA IS GREATER THAN
 0366            TCF    SETGLOCK        70 DEGREES.
 0367            TCF    GLOCKCHK
 0368  2         TCF    SETGLOCK
 0369   GLOCKCHK AD     -70DEGS
 0370            EXTEND
 0371  2         BZMF   SETGLOCK -1     NO LOCK.
 0372            CAF    BIT6            GIMAL LOCK.
 0373  2         TCF    SETGLOCK
 0374    -1      CAF    ZERO
 0375   SETGLOCK AD     DSPTAB +11D     SEE IF PRESENT STATE OF GIMBAL LOCK LAMP
 0376            MASK   BIT6            AGREES WITH DESIRED STATE BY HALF ADDING
 0377            EXTEND                 THE TWO.
 0378  2         BZF    GLOCKOK         OK AS IS.
 0379            MASK   DSPTAB +11D     IF OFF, DONT TURN ON IF IMU BEING CAGED.
 0380            CCS    A
 0381  2         TCF    GLAMPTST        TURN OFF UNLESS LAMP TEST IN PROGRESS.
 0382            CAF    BIT6
 0383            MASK   IMODES30
 0384            CCS    A
 0385  2         TCF    GLOCKOK
 0386   GLINVERT CS     DSPTAB +11D     INVERT GIMBAL LOCK LAMP.
 0387            MASK   BIT6
 0388            AD     BIT15           TO INDICATE CHANGE IN DSPTAB +11D.
 0389            XCH    DSPTAB +11D
 0390            MASK   OCT37737
 0391            ADS    DSPTAB +11D
 0392  2         TCF    GLOCKOK
 0393   GLAMPTST TC     LAMPTEST        TURN OFF UNLESS LAMP TEST IN PROGRESS.
 0394            TCF    GLOCKOK
 0395  2         TCF    GLINVERT
 0396   -70DEGS  DEC    -.38888         -70 DEGREES SCALED IN HALF-REVOLUTIONS.
 0397   OCT37737 OCT    37737
P0398  2         SUBROUTINES TO PROCESS INBIT CHANGES. NEW VALUE OF BIT ARRIVES
 0399  9IN A, EXCEPT FOR TLIM.
 0400   TLIM     MASK   POSMAX          REMOVE BIT FROM WORD OF CHANGES AND SET
 0401  2         TS     RUPTREG2        DSKY TEMP LAMP ACCORDINGLY.
 0402            CCS    IMODES30
 0403            TCF    TEMPOK
 0404  2         TCF    TEMPOK
 0405            CAF    BIT4            TURN ON LAMP.
 0406            EXTEND
 0407            WOR    11
 0408  2         TCF    NXTIFAIL
 0409   TEMPOK   TC     LAMPTEST        IF TEMP NOW OK, DONT TURN OFF LAMP IF
 0410  2         TCF    NXTIFAIL        LAMP TEST IN PROGRESS.
 0411            CS     BIT4
 0412            EXTEND
 0413            WAND   11
 0414  2         TCF    NXTIFAIL
 0415   ITURNON  CAF    BIT2            IF DELAY REQUEST HAS GONE OFF
 0416            MASK   IMODES30        PREMATURELY, DO NOT PROCESS ANY CHANGES
 0417            CCS    A               UNTIL THE CURRENT 90 SEC WAIT EXPIRES.
 0418  2         TCF    NXTIFAIL
 0419            CAF    BIT14           SEE IF JUST ON OR OFF.
 0420            MASK   IMODES30
 0421            EXTEND
 0422  2         BZF    ITURNON2        IF JUST ON.
 0423            CAF    BIT15
 0424            EXTEND                 SEE IF DELAY PRESENT DISCRETE HAS BEEN
 0425            RAND   12              SENT. IF SO, ACTION COMPLETE.
 0426            EXTEND
 0427            BZF    +2
 0428  2         TCF    NXTIFAIL
 0429            CAF    BIT2            IF NOT, SET BIT TO INDICATE REQUEST NOT
 0430            ADS    IMODES30        PRESENT FOR FULL DURATION.
 0431            TC     ALARM
 0432            OCT    207
 0433  2         TCF    NXTIFAIL
 0434   ITURNON2 CS     BIT7            SET BIT 7 TO INITIATE WAIT OF 1 SAMPLE.
 0435            MASK   IMODES30
 0436            AD     BIT7
 0437            TS     IMODES30
 0438  2         TCF    NXTIFAIL
 0439   IMUCAGE  CCS    A               NO ACTION IF GOING OFF.
 0440  2         TCF    NXTIFAIL
 0441            CS     OCT71000        TERMINATE ICDU AND GYRO PULSE TRAINS.
 0442            EXTEND
 0443  2         WAND   14
 0444  2         TC     CAGESUB
 0445            CAF    ZERO            ZERO COMMAND OUT-COUNTERS.
 0446            TS     CDUXCMD
 0447            TS     CDUYCMD
 0448            TS     CDUZCMD
 0449  2         TS     GYROCMD
 0450            CS     OCT1700         HAVING WAITED AT LEAST 27 MCT FROM
 0451            EXTEND                 GYRO PULSE TRAIN TERMINATION, WE CAN
 0452  2         WAND   14              DE-SELECT THE GYROS.
 0453  2         TCF    NXTIFAIL
 0454   IMUOP    EXTEND
 0455  2         BZF    IMUOP2
 0456            CS     STATE           IF GOING OFF, ALARM IF PROG USING IMU.
 0457            MASK   IMUSEFLG
 0458            CCS    A
 0459  2         TCF    NXTIFAIL
 0460            TC     ALARM
 0461            OCT    214
 0462  2         TCF    NXTIFAIL
 0463   IMUOP2   CAF    BIT2            SEE IF FAILED ISS TURN-ON SEQ IN PROG.
 0464            MASK   IMODES30
 0465            CCS    A
 0466            TCF    NXTIFAIL        IF SO, DONT PROCESS UNTIL PRESENT 90
 0467  2         TCF    ITURNON2        SECONDS EXPIRES.
 0468   PIPFAIL  CCS    A               SET BIT10 IN IMODES30 SO ALL ISS WARNING
 0469            CAF    BIT10           INFO IS IN ONE REGISTER.
 0470            XCH    IMODES30
 0471            MASK   -BIT10
 0472  2         ADS    IMODES30
 0473  2         TC     SETISSW
 0474            CS     IMODES30        IF PIP FAIL DOESNT LIGHT ISS WARNING, DO
 0475            MASK   BIT1            A PROGRAM ALARM IF IMU OPERATING BUT NOT
 0476            CCS    A               CAGED OR BEING TURNED ON.
 0477  2         TCF    NXTFL33
 0478            CA     IMODES30
 0479            MASK   OCT1720
 0480            CCS    A
 0481  2         TCF    NXTFL33         ABOVE CONDITION NOT MET.
 0482            TC     ALARM
 0483            OCT    212
 0484  2         TCF    NXTFL33
 0485   DNTMFAST CCS    A               DO PROG ALARM IF TM TOO FAST.
 0486  2         TCF    NXTFL33
 0487            TC     ALARM
 0488            OCT    1105
 0489  2         TCF    NXTFL33
 0490   UPTMFAST CCS    A               SAME AS DNLINK TOO FAST WITH DIFFERENT
 0491  2         TCF    NXTFL33         ALARM CODE.
 0492            TC     ALARM
 0493            OCT    1106
 0494            TCF    NXTFL33
P0495  2         CLOSED SUBROUTINES FOR IMU MONITORING.
 0496   SETISSW  CAF    OCT15           SET ISS WARNING USING THE FAIL BITS IN
 0497            MASK   IMODES30        BITS 13, 12, AND 10 OF IMODES30 AND THE
 0498            EXTEND                 FAILURE INHIBIT BITS IN POSITIONS
 0499            MP     BIT10           4, 3, AND 1.
 0500            CA     IMODES30
 0501            EXTEND
 0502            ROR    L               0 INDICATES FAILURE.
 0503            COM
 0504            MASK   OCT15000
 0505            CCS    A
 0506  2         TCF    ISSWON          FAILURE.
 0507   ISSWOFF  CAF    BIT1            DONT TURN OFF ISS WARNING IF LAMP TEST
 0508            MASK   IMODES33        IN PROGRESS.
 0509            CCS    A
 0510  2         TC     Q
 0511            CS     BIT1
 0512            EXTEND
 0513            WAND   11
 0514  2         TC     Q
 0515   ISSWON   CAF    BIT1
 0516            EXTEND
 0517            WOR    11
 0518  2         TC     Q
 0519   CAGESUB  CS     BITS6&15        SET OUTBITS AND INTERNAL FLAGS FOR
 0520            EXTEND                 SYSTEM TURN-ON OR CAGE. DISABLE THE
 0521            WAND   12              ERROR COUNTER AND REMOVE IMU DELAY COMP.
 0522            CAF    BITS4&5         SEND ZERO AND COARSE.
 0523            EXTEND
 0524  2         WOR    12
 0525   CAGESUB2 CS     OCT75           SET FLAGS TO INDICATE CAGING OR TURN-ON,
 0526            MASK   IMODES30        AND TO INHIBIT ALL ISS WARNING INFO.
 0527            AD     OCT75
 0528  2         TS     IMODES30
 0529  2         TC     Q
 0530   IMUFAIL  EQUALS SETISSW
 0531   ICDUFAIL EQUALS SETISSW
P0532  2         JUMP TABLES AND CONSTANTS.
 0533   IFAILJMP TCF    ITURNON         CHANNEL 30 DISPATCH.
 0534            TCF    IMUFAIL
 0535            TCF    ICDUFAIL
 0536            TCF    IMUCAGE
 0537   30RDMSK  OCT    76400           (BIT 10 NOT SAMPLED HERE).
 0538  2         TCF    IMUOP
 0539   C33JMP   TCF    PIPFAIL         CHANNEL 33 DISPATCH.
 0540            TCF    DNTMFAST
 0541  2         TCF    UPTMFAST
R0542            SUBROUTINE TO SKIP IF LAMP TEST NOT IN PROGRESS.
 0543   LAMPTEST CS     IMODES33        BIT 1 OF IMODES33 = 1 IF LAMP TEST IN
 0544            MASK   BIT1            PROGRESS.
 0545            CCS    A
 0546            INCR   Q
 0547  2         TC     Q
 0548   33RDMSK  EQUALS PRIO16
 0549   OCT15    OCT    15
 0550   BITS4&5  OCT    30
 0551   OCT54    OCT    54
 0552   OCT75    OCT    75
 0553   BITS7&8  OCT    300
 0554   OCT1720  OCT    1720
 0555   OCT1700  OCT    1700
 0556   OCT15000 EQUALS PRIO15
 0557   OCT71000 OCT    71000
 0558   BITS6&15 OCT    40040
 0559  2-BIT10   OCT    -1000
 0560   90SECS   DEC    9000
 0561  2120MS    DEC    12
 0562   GLOCKOK  EQUALS RCSMONIT
 0563   NOIMUMON EQUALS GLOCKOK
P0564  2         RR INBIT MONITOR.
 0565   RRAUTCHK CA     RADMODES        SEE IF CHANGE IN RR AUTO MODE BIT.
 0566            EXTEND
 0567            RXOR   33
 0568            MASK   BIT2
 0569            EXTEND
 0570  2         BZF    RRCDUCHK
 0571            LXCH   RADMODES        UPDATE RADMODES.
 0572            EXTEND
 0573            RXOR   L
 0574            TS     RADMODES
 0575            MASK   BIT2            SEE IF JUST ON.
 0576            CCS    A
 0577  2         TCF    RROFF           OFF.
 0578            CAF    BIT7            IF JUST ON AND SOME PROGRAM IS USING THE
 0579            MASK   STATE           RR, DONT ZERO THE CDUS.
 0580            CCS    A
 0581  2         TCF    RRCDUCHK
 0582            CS     OCT10001        SET BITS TO INDICATE ZERO AND TURNON
 0583            MASK   RADMODES        IN PROGRESS.
 0584            AD     OCT10001
 0585  2         TS     RADMODES
 0586            CAF    ONE
 0587            TC     WAITLIST
 0588            2CADR  RRTURNON
 0589  2         TCF    NORRGMON
 0590  2OCT10001 OCT    10001
 0591   RROFF    CS     STATE           IF SOMEONE WAS USING THE RR, DISPLAY AN
 0592            MASK   BIT7            ALARM IF THE RR GOES OUT OF AUTO MODE.
 0593            CCS    A
 0594  2         TCF    RRCDUCHK
 0595            TC     ALARM
 0596            OCT    514
P0597  2         CHECK FOR RR CDU FAIL.
 0598   RRCDUCHK CA     RADMODES        LAST SAMPLED BIT IN RADMODES.
 0599            EXTEND
 0600            RXOR   30
 0601            MASK   BIT7
 0602            EXTEND
 0603  2         BZF    RRGIMON
 0604            CAF    BIT2            IF RR NOT IN AUTO MODE, DONT CHANGE BIT
 0605            MASK   RADMODES        7 OF RADMODES. IF THIS WERE NOT DONE,
 0606            CCS    A               THE TRACKER FAIL MIGHT COME ON WHEN
 0607  2         TCF    NORRGMON        JUST READING LR DATA.
 0608            CAF    BIT7            SET BIT 7 OF RADMODES FOR SETTRKF.
 0609            LXCH   RADMODES        UPDATE RADMODES.
 0610            EXTEND
 0611            RXOR   L
 0612  2         TS     RADMODES
 0613   TRKFLCDU TC     SETTRKF         UPDATE TRACKER FAIL LAMP ON DSKY.
P0614            THE RR GIMBAL LIMIT MONITOR IS ENABLED WHENEVER THE RR IS IN TH
 0615  9E AUTO MODE EXCEPT WHEN THE RR CDUS ARE
R0616   BEING ZEROED, OR DURING A REMODE OR MONITOR REPOSITION OPERATION. THE LA
 0617  9TTER IS INITIATED BY THIS MONITOR WHEN
R0618   THE GIMBALS EXCEED THE LIMITS FOR THE CURRENT MODE. A ROUTINE IS INITIAT
 0619  9ED TO DRIVE THE GIMBALS TO T = 0 AND
R0620  2S = 0 IF IN MODE 1 AND T = 180 WITH S = -90 FOR MODE 2.
 0621   RRGIMON  CAF    OCT32002        INHIBITED BY REMODE, ZEROING, MONITOR,
 0622            MASK   RADMODES        OR RR NOT IN AUTO.
 0623            CCS    A
 0624  2         TCF    NORRGMON
 0625            TC     RRLIMCHK        SEE IF ANGLES IN LIMITS.
 0626  2         ADRES  OPTY
 0627  2         TCF    MONREPOS
 0628  2         TCF    NORRGMON        (ADDITIONAL CODING MAY GO HERE).
 0629   MONREPOS CAF    BIT11           SET FLAG TO SHOW REPOSITION IN PROGRESS.
 0630  2         ADS    RADMODES
 0631            CS     OCT20002        DISABLE TRACKER AND ERROR COUNTER.
 0632            EXTEND
 0633  2         WAND   12
 0634            CAF    TWO
 0635            TC     WAITLIST
 0636            2CADR  DORREPOS
 0637  2         TCF    NORRGMON
 0638   OCT32002 OCT    32002
 0639   OCT20002 OCT    20002
P0640  2PROGRAM NAME: GPMATRIX          MOD. NO. 0  DATE: OCTOBER 20, 1966
R0641  2AUTHOR: JONATHAN D. ADDELSTON (ADAMS ASSOCIATES)
R0642   THIS PROGRAM CALCULATES ALL THE SINGLE-PRECISION MATRIX ELEMENTS WHICH A
 0643  9RE USED BY LEM DAP TO TRANSFORM VECTORS
R0644   FROM GIMBAL TO PILOT (BODY) AXES AND BACK AGAIN.  THESE ELEMENTS ARE USE
 0645  9D EXCLUSIVELY BY BASIC LANGUAGE ROUTINES
R0646  2AND THEREFORE ARE NOT ARRAYED FOR USE BY INTERPRETIVE PROGRAMS.
R0647   CALLING SEQUENCE: GPMATRIX IS ALWAYS EXECUTED 4 TIMES A SECOND BY T4RUPT
 0648  9 PROGRAM.  IT IS LISTED EXPLICITLY TWICE
R0649  2IN THE T4JUMP TABLE, BUT IT ALSO OCCURS AFTER RRAUTCHK (TWICE).
R0650  2SUBROUTINES CALLED: SPSIN, SPCOS.
R0651  2NORMAL EXIT MODE: CONTROL IS ALWAYS TRANSFERRED TO DBSELECT.
R0652   ALARM/ABORT MODE: THERE ARE NO REAL ALARMS OR ABORTS.  HOWEVER, WHEN THE
 0653  9 MIDDLE GIMBAL ANGLE NEARS GIMBAL LOCK,
R0654   A DIVISION BY COS(MG) W2LL CAUSE OVERFLOW (I.E. A BAD QUOTIENT).  THIS C
 0655  99NDITION IS PREVENTED BY TESTING COS(MG)
R0656  2AND SUBSTITUTING POSMAX/NEGMAX FOR THE INCALCULABLE QUANTITITIES.
R0657   INPUT: CDUX,CDUY,CDUZ.          OUTPUT: M11,M21,M31,M22,M32,MR12,MR13.
R0658  2                                        (ALSO MR22=M22,MR23=M32)
 0659  9AM DOES NOT DETECT IT.
R0660  2*** WARNING ** IT DIES ON DV OVERFLOW.
R0661  2AOG = CDUX, AIG = CDUY, AMG = CDUZ: MNEMONIC IS: OIM = XYZ
R0662      *       *    SIN(MG)        0         1  *
R0663      M   =   *    COS(MG)COS(OG) SIN(OG)   0  *
R0664  2    GP     *   -COS(MG)SIN(OG) COS(OG)   0  *
R0665      *       *  0    COS(OG)/COS(MG)        -SIN(OG)/COS(MG)         *
R0666      M   =   *  0    SIN(OG)                 COS(OG)                 *
R0667  2    PG     *  1   -SIN(MG)COS(OG)/COS(MG)  SIN(MG)SIN(OG)/COS(MG)  *
 0668   GPMATRIX CAE    CDUZ            SINGLE ENTRY POINT
 0669            TC     SPSIN           SIN(CDUZ) = SIN(MG)
 0670  2         TS     M11             SCALED AT 1
 0671            CAE    CDUZ
 0672            TC     SPCOS           COS(CDUZ) = COS(MG)
 0673  2         TS     COSMG           SCALED AT 1 (ONLY A FACTOR)
 0674            CAE    CDUX
 0675            TC     SPSIN           SIN(CDUX) = SIN(OG)
 0676  2         TS     M22             SCALED AT 1 (ALSO IS MR22)
 0677            CS     M22
 0678            EXTEND
 0679            MP     COSMG           -SIN(OG)COS(MG)
 0680            TS     M31             SCALED AT 1
 0681            CAE    CDUX
 0682            TC     SPCOS           COS(CDUX) = COS(OG)
 0683  2         TS     M32             SCALED AT 1 (ALSO IS MR23)
 0684            EXTEND
 0685            MP     COSMG           COS(OG)COS(MG)
 0686  2         TS     M21             SCALED AT 1
 0687            CAE    COSMG           TEST FOR GIMBAL LOCK (OVERFLOW) REGION
 0688            AD     NEG1/2          BY TESTING MIDDLE GIMBAL ANGLE FOR
 0689            EXTEND                 VALUES EQUAL TO OR GREATER THAN 60 DEGS.
 0690  2         BZMF   GPGLOCK
 0691            CAE    M32
 0692            EXTEND
 0693            MP     BIT14           SCALE FOR DIVISION
 0694            EXTEND
 0695            DV     COSMG           COS(OG)/COS(MG)
 0696  2         TS     MR12            SCALED AT 2
 0697            CS     M22
 0698            EXTEND
 0699            MP     BIT14           SCALE FOR DIVISION
 0700            EXTEND
 0701            DV     COSMG           -SIN(OG)/COS(MG)
 0702  2         TCF    MR13STOR
 0703   GPGLOCK  CCS    M32             SINCE DIVISION BY COS(MG) MIGHT CREATE
 0704            CAF    POSMAX
 0705            TCF     +2             OVERFLOW (I.E. A NUMBER GREATER THAN 2)
 0706            CAF    NEGMAX
 0707  2         TS     MR12            USE THE VALUE SGN(NUMERATOR)*POSMAX AS
 0708            CCS    M22
 0709            CAF    POSMAX          THE CLOSEST APPROXIMATION
 0710            TCF     +2
 0711            CAF    NEGMAX
 0712   MR13STOR TS     MR13            SCALED AT 2
P0713   THE FOLLOWING SECTION TESTS THE ATTITUDE HOLD BIT TO DETERMINE WHICH DEA
P0714  2PROGRAM NAME: DB SELECT         MOD. NO. 1  DATE: OCTOBER 24, 1966
R0715  2AUTHOR: JONATHAN D. ADDELSTON (ADAMS ASSOCIATES)
R0716   THIS PROGRAM SETS THE ERASABLE REGISTER DB TO ONE OF THE THREE VALUES:
R0717            1) O.3 DEGREES IF IN ATTITUDE HOLD MODE OR IF IN AUTO WITH THE
 0718  9DEADBAND SELECT BIT OF DAPBOOLS SET
R0719               TO MINIMUM.
R0720            2) 5.0 DEGREES IF IN AUTO WITH DEADBAND SELECT BIT SET TO MAXIM
 0721  9UM.
R0722            3) 1.0 DEGREES IF IN POWERED FLIGHT (ASCENT OR DESCENT) AND OVE
 0723  9RRIDING ANY SETTITING OF SCSMODE OR THE
R0724  2            DEADBAND SELECT BIT.  (*** SEE COMMENT AFTER CODING. ***)
R0725  2***** NOTICE *****
R0726   THE ABOVE CAPABILITY FULFILLS ALL THE KNOWN DEADBAND REQUIREMENTS FOR AS
 0727  9206, AS208B, AND AS278 (GIVEN THE
R0728  2APPROPRIATE MISSION PROGRAMS).
R0729   (ALSO FOR MANNED FLIGHTS A DSKY ENTRY MUST BE SET UP TO SET THE DEADBAND
 0730  9 SELECT BIT OF DAPBOOLS. - NOT DONE AS
R0731  2OF 10/24/66.)
R0732   ***** DEADBAND SELECT BIT IS BIT13 OF DAPBOOLS. *****
R0733            0: MEANS MINIMUM DEADBAND
R0734  2         1: MEANS MAXIMUM DEADBAND
R0735  2CALLING SEQUENCE: CONTROL FALLS THROUGH FROM GPMATRIX. (4 TIMES/SECOND)
R0736  2SUBROUTINES CALLED: NONE.
R0737  2NORMAL EXIT MODE: CONTROL IS ALWAYS TRANSFERRED TO UP/DOWN.
R0738  2ALARM/ABORT MODE: NONE.
R0739  2INPUT: BIT13/CHNL11,BIT13/CHNL31,BIT13/DAPBOOLS.  (SPOOKY, ISN'T IT?)
R0740  2OUTPUT: DB (SCALED AT PI RADIANS).     (NO DEBRIS EXCEPT A)
 0741   DBSELECT CAF    BIT13           ATTITUDE HOLD BIT OF CHANNEL 31
 0742            EXTEND                 0 MEANS ATTITUDE HOLD
 0743            RAND   31              1 MEANS EITHER OFF OR AUTO
 0744            EXTEND
 0745  2         BZF    ATTHLDDB        (ATTITUDE HOLD BRANCH)
 0746            CS     DAPBOOLS        DEADBAND SELECT BIT OF DAPBOOLS
 0747            MASK   BIT13           0 MEANS MINIMUM DEADBAND
 0748            CCS    A               1 MEANS MAXIMUM DEADBAND
 0749  2         TCF    ATTHLDDB        (MINIMUM DEADBAND BRANCH)
 0750            CAF    DBMAXUM         SET MAXIMUM DEADBAND
 0751  2         TCF     +2
 0752   ATTHLDDB CAF    DBATTHLD        SET MINUMUM (ATTITUDE HOLD) DEADBAND
 0753  2         TS     DB
R0754  2***** IMPORTANT NOTICE *****
R0755   FOR EFFICIENCY, THE OVERRIDING 1 DEGREE DEADBAND DURING POWERED FLIGHT I
 0756  9S NOT TESTED FOR ABOVE.  THE PROGRAM
R0757   FOLLOWING (I.E. UP/DOWN) PERFORMS THIS FUNCTION AFTER THE APPROPRIATE TE
 0758  9STS.  THEREFORE, DB MAY TRANSIENTLY  BEP
R0759   INVALID, BUT THE DAP CANNOT USE IT THEN DUE TO T4RUPT MODE.
P0760  2PROGRAM NAME: UP/DOWN           MOD. NO. 1  DATE: OCTOBER 25, 1966
R0761  2AUTHOR: JONATHAN D. ADDELSTON (ADAMS ASSOCIATES)
R0762   THIS PROGRAM MONITORS THE STAGE OF THE LEM AND THE ENGINE ON BIT IN ORDE
 0763  9R TO DETERMINE WHEN ASCENT, DESCENT, AND
R0764  2COAST PHASES MUST BE SET UP FOR THE DAP.  (DONE 4 TIMES A SECOND.)
R0765  2CALLING SEQUENCE: NONE.         SUBROUTINES CALLED: WAITLIST.
R0766  2NORMAL EXIT MODE: CONTROL IS ALWAYS TRANSFERRED TO ENDDAPT4.
R0767  2ALARM/ABORT MODE: NONE.
R0768  2INPUT: BIT2/CHNL30,BIT13/CHNL11,BIT8/DAPBOOLS.
R0769   OUTPUT:  A) ASCENT COAST:
R0770                   1) BIT8/DAPBOOLS SET TO ZERO, MEANING COAST.
R0771                   2) MINIMPDB AND DBMINIMP SET TO 0.3 DEGREES.
R0772            B) ASCENT BURN:
R0773                   1) INITIALIZATION PASS:
R0774                          I) BIT8/DAPBOOLS SET FROM 0 TO 1, MEANING THAT TH
 0775  9E AOSTASK HAS BEEN STARTED UP AND THAT
R0776                             INITIALIZATION HAS OCCURRED.
R0777                         II) MINIMPDB SET TO -DB.
R0778                        III) DBMINIMP SET TO ZERO.
R0779                         IV) SUMRATEQ AND SUMRATER ZEROED FOR FIRST TWO SEC
 0780  9OND AOSTASK SAMPLE PERIOD.
R0781                          V) KCOEFCTR ZEROED TO RECORD INITIAL TIME.
R0782                         VI) OMEGAQ AND OMEGAR RECORDED IN OLDWFORQ AND OLD
 0783  9WFORR AS LAST OMEGA VECTOR FOR AOSTASK.
R0784                        VII) AOSTASK SET IN WAITLIST FOR TWO SECONDS.
R0785                       VIII) DB SET TO DBAUTO.
R0786                         IX) ****** CHECKOUT ONLY **** IXXTASK, IYYTASK, AN
 0787  9D IZZTASK SET IN WAITLIST FOR TEN MS.
R0788                   2) NORMAL PASS VOID.
R0789            C) DESCENT COAST:
R0790                   1) BIT2/DAPBOOLS SET TO 1, MEANING THAT TRIM GIMBAL CONT
 0791  9ROL OF DESCENT IS IMPOSSIBLE SINCE
R0792                      DESCENT ENGINE OFF.
R0793                   2) AOSQTERM AND AOSRTERM ZEROED.
R0794            D) DESCENT BURN:
R0795                   1) DB SET TO DBAUTO.
R0796                   2) BIT2/DAPBOOLS CANNOT NOW BE ZEROED (EVEN THOUGH THE D
 0797  9ESCENT ENGINE IS ON), SINCE IT IS NOT
R0798  2                   NECESSARILY TRUE THAT THIS IMPLIES AN OPERATIVE TRIM
 0799  9GIMBAL SYSTEM.
 0800   UP/DOWN  CAF    BIT2            STAGE VERIFY BIT OF CHANNEL 30: INVERTED
 0801            EXTEND                 0 MEANS ASCENT STAGE
 0802            RAND   30              1 MEANS DESCENT STAGE
 0803            CCS    A
 0804  2         TCF    DESCLEM         (DESCENT STAGE BRANCH)
 0805   ASCLEM   CAF    BIT13           ENGINE ON BIT OF CHANNEL 11
 0806            EXTEND                 0 MEANS OFF
 0807            RAND   11              1 MEANS ON
 0808            CCS    A
 0809  2         TCF    ASCDAP          (ASCENT BURN BRANCH)
 0810   ASCCOAST CS     BIT8            SET BIT8 OF DAPBOOLS TO COAST DAP LOGIC
 0811            MASK   DAPBOOLS        LEM IS STAGED FOR ASCENT, BUT THE ASCENT
 0812  2         TS     DAPBOOLS        ENGINE IS NOT ON.
 0813            CAF    DBATTHLD        FOR ASCENT COAST SET BOTH MINIMUM PULSE
 0814            TS     MINIMPDB        DEADBANDS TO THE DESCENT PHASE VALUE OF
 0815  2         TS     DBMINIMP        0.3 DEGREES SCALED AT PI RADIANS.
 0816  2         TCF    ENDDAPT4        (END OF UP/DOWN)
 0817   ASCDAP   CAF    BIT8            CHECK AOSTASK BIT OF DAPBOOLS
 0818            MASK   DAPBOOLS        IF 0, SET BIT AND INITIATE WAITLIST TASK
 0819            CCS    A               IF 1, THEN TASK LOOP ALREADY BEGUN
 0820  2         TCF    ENDDAPT4        (END OF UP/DOWN)
 0821            CAF    DBAUTO          SINCE ASCENT ENGINE IS ON -
 0822  2         TS     DB              SET DEADBAND TO 1.0 DEGREES
 0823            CAF    BIT8            SET BIT TO INDICATE AOSTASK SET UP AND
 0824  2         ADS    DAPBOOLS        ASCENT LOGIC.  BIT CLEARLY NOT SET YET.
 0825            CS     DB              MODIFY THE TJETLAW FOR ASCENT:
 0826            TS     MINIMPDB        (IN ONE EQUATION DELETE MINIMPDB AND
 0827            CAF    ZERO            SHIFT THE SWITCHING CURVE TO THE ORIGIN)
 0828  2         TS     DBMINIMP        MINIMPDB = -DB, DBMINIMP = 0
 0829            CAF    ZERO            INITIALIZE SUM RATES
 0830            TS     SUMRATEQ
 0831            TS     SUMRATER
 0832            TS     KCOEFCTR        INITIALIZE TIME COUNTER
 0833            CAE    OMEGAQ          CREATE OLD OMEGAQ
 0834            TS     OLDWFORQ
 0835            CAE    OMEGAR          CREATE OLD OMEGAR
 0836  2         TS     OLDWFORR
R0837  2***** EVENTUALLY, USE 2SECWLT4 FROMM FIXED-FIXED AND NEW NAME. *****
 0838            CAF    2SECWLT4        SET UP AOSTASK TO BEGIN IN 2 SECONDS
 0839            TC     WAITLIST        IT THEN SETS UP A LOOP ON WAITLIST FOR
 0840            2CADR  AOSTASK         2 SECOND INTERVALS AND CHECKS FOR THE
A0841  2                                SHUTDOWN CONDITION IN BIT8 OF DAPBOOLS
R0842  2************************************************************************
 0843  9****************************************
R0844  2REMOVE THIS AND THE TASKS WHEN THE INERTIA ESTIMATOR WORKS.
 0845            CAF    ONE             *** SPECIAL DAP CHECKOUT SEQUENCE ***
 0846            TC     WAITLIST        THESE THREE CALLS TO WAITLIST BEGIN A
 0847            2CADR  IXXTASK         COMPLICATED PROCEDURE TO DECREMENT THE
 0848            CAF    ONE             INERTIA MATRIX DIAGONAL ELEMENTS (EACH
 0849            TC     WAITLIST        SCALED AT 2(+18) SLUG FEET(2) ) BY ONE
 0850            2CADR  IYYTASK         BIT AS SOON AS APPROPRIATE BY A NOMINAL
 0851            CAF    ONE             LINEAR APPROXIMATION TO INERTIAL CHANGE.
 0852            TC     WAITLIST
 0853            2CADR  IZZTASK         *** NOT TO BE USED IN MISSIONS ***
R0854  2************************************************************************
 0855  9****************************************
 0856  2         TCF    ENDDAPT4        (END OF UP/DOWN)
 0857   DESCLEM  CAF    BIT13           ENGINE ON BIT OF CHANNEL 11
 0858            EXTEND                 0 MEANS OFF
 0859            RAND   11              1 MEANS ON
 0860            CCS    A
 0861  2         TCF    DESCDAP         (DESCENT BURN BRANCH)
 0862   DESCOAST CS     BIT2            SET BIT2 OF DAPBOOLS TO INDICATE THAT
 0863            MASK   DAPBOOLS        TRIM GIMBAL CANNOT BE USED SINCE THE
 0864            AD     BIT2            STAGE IS DESCENT, BUT THE ENGINE IS NOT
 0865  2         TS     DAPBOOLS        ON.
 0866            CAF    ZERO            ZERO TRIM GIMBAL OFFSET ACCELERATION
 0867            TS     AOSQTERM        TERMS IN THE DESCENT RATE DERIVATION
 0868  2         TS     AOSRTERM        SINCE THE THRUST IS ZERO (ENGINE OFF).
 0869  2         TCF    ENDDAPT4        (END OF UP/DOWN)
 0870   DESCDAP  CAF    DBAUTO          SINCE DESCENT ENGINE IS ON -
 0871  2         TS     DB              SET DEADBAND TO 1.0 DEGREES
 0872  2         TCF    ENDDAPT4        (END OF UP/DOWN)
 0873  4         TCF    ENDDAPT4
 0874   2SECWLT4 DEC    200             2 SECONDS WAITLIST DT
 0875   DBMAXUM  DEC    0.02778         5.0 DEGREES SCALED AT PI RADIANS
 0876   DBAUTO   DEC    0.00555         1.0 DEGREES SCALED AT PI RADIANS
 0877  4DBATTHLD DEC    0.00167         0.3 DEGREES SCALED AT PI RADIANS
 0878   NORRGMON EQUALS GPMATRIX
 0879   ENDDAPT4 EQUALS RESUME
L      2IMU MODE SWITCHING ROUTINES
 0001            SETLOC ENDT4FF
 0002  2         EBANK= COMMAND
R0003  2         FIXED-FIXED ROUTINES.
 0004   ZEROICDU CAF    ZERO            ZERO ICDU COUNTERS.
 0005            TS     CDUX
 0006            TS     CDUY
 0007            TS     CDUZ
 0008  2         TC     Q
 0009  23SECS    DEC    300
 0010   ENDIMODF EQUALS
P0011  2         IMU ZEROING ROUTINE.
 0012  2         BANK   13
 0013   IMUZERO  INHINT                 ROUTINE TO ZERO ICDUS.
 0014            CS     IMUSEFLG        SET INDICATION THAT A MISSION OR TEST
 0015            MASK   STATE           PROGRAM IS USING THE IMU.
 0016            AD     IMUSEFLG
 0017  2         TS     STATE
 0018            TC     CAGETSTQ        IF IMU COMING UP, TURN-ON PROGRAM WILL
 0019  2         TCF    MODEEXIT        DO ALL THE WORK.
 0020            CS     BITS3&4         INHIBIT ICDUFAIL AND IMUFAIL (IN CASE WE
 0021            MASK   IMODES30        JUST CAME OUT OF COARSE ALIGN).
 0022            AD     BITS3&4
 0023  2         TS     IMODES30
 0024            CS     BITS4&6         SEND ZERO ENCODE WITH COARSE AND ERROR
 0025            EXTEND                 COUNTER DISABLED.
 0026  2         WAND   12
 0027            CAF    BIT5
 0028            EXTEND
 0029  2         WOR    12
 0030            CAF    BIT6            WAIT 320 MS TO GIVE AGS ADEQUATE TIME TO
 0031            TC     WAITLIST        RECEIVE ITS PULSE TRAIN.
 0032            2CADR  IMUZERO2
 0033            CS     IMODES30        SEE IF IMU OPERATING AND ALARM IF NOT.
 0034            MASK   BIT9
 0035            CCS    A
 0036  2         TCF    MODEEXIT
 0037            TC     ALARM
 0038  2         OCT    210
 0039   MODEEXIT RELINT                 GENERAL MODE-SWITCHING EXIT.
 0040  8         TCF    SWRETURN
 0041   IMUZERO2 TC     CAGETSTQ        POSSIBLY SWITCH TO TURN-ON PROGRAM.
 0042  2         TCF    TASKOVER
 0043            TC     ZEROICDU        ZERO COUNTERS.
 0044            CS     BIT5            REMOVE ZERO DISCRETE.
 0045            EXTEND
 0046  2         WAND   12
 0047            CAF    3SECSM          WAIT FOR COUNTERS TO SYNCRONIZE.
 0048  2         TC     VARDELAY
 0049   IMUZERO3 TC     CAGETSTQ
 0050  2         TCF    TASKOVER
 0051            CS     BITS3&4         REMOVE IMUFAIL AND ICDUFAIL INHIBIT.
 0052            MASK   IMODES30
 0053  2         TS     IMODES30
 0054            TC     IBNKCALL        SET ISS WARNING IF EITHER OF ABOVE ARE
 0055  2         CADR   SETISSW         PRESENT.
 0056            TCF    ENDIMU
P0057  2         IMU COARSE ALIGN MODE.
 0058   IMUCOARS CAF    BIT4            SEND COARSE ALIGN ENABLE DISCRETE
 0059            INHINT
 0060            EXTEND
 0061  2         WOR    CHAN12
 0062            CS     BIT4            INHIBIT IMU FAIL.
 0063            MASK   IMODES30
 0064            AD     BIT4
 0065  2         TS     IMODES30
 0066            CAF    SIX
 0067            TC     WAITLIST
 0068            2CADR  COARS
 0069  2         TCF    MODEEXIT
 0070   COARS    TC     CAGETEST
 0071            CAF    BIT6            ENABLE ALL THREE ISS CDU ERROR COUNTERS
 0072            EXTEND
 0073  2         WOR    CHAN12
 0074            CAF    TWO             SET CDU INDICATOR
 0075  2COARS1   TS     CDUIND
 0076            INDEX  CDUIND          COMPUTE THETAD - THETAA IN 1:S
 0077            CA     THETAD            COMPLEMENT FORM
 0078            EXTEND
 0079            INDEX  CDUIND
 0080            MSU    CDUX
 0081            EXTEND
 0082            MP     BIT13           SHIFT RIGHT 2
 0083            XCH    L               ROUND
 0084            DOUBLE
 0085            TS     ITEMP1
 0086            TCF    +2
 0087  2         ADS    L
 0088            INDEX  CDUIND          DIFFERENCE TO BE COMPUTED
 0089            LXCH   COMMAND
 0090            CCS    CDUIND
 0091  2         TC     COARS1
 0092            CAF    TWO             MINIMUM OF 4 MS WAIT
 0093  8         TC     VARDELAY
 0094   COARS2   TC     CAGETEST        DONT CONTINUE IF CAGED.
 0095            TS     ITEMP1          SETS TO +0.
 0096            CAF    TWO             SET CDU INDICATOR
 0097  2 +3      TS     CDUIND
 0098            INDEX  CDUIND
 0099            CCS    COMMAND         NUMBER OF PULSES REQUIRED
 0100            TC     COMPOS          GREATER THAN MAX ALLOWED
 0101            TC     NEXTCDU +1
 0102            TC     COMNEG
 0103  2         TC     NEXTCDU +1
 0104   COMPOS   AD     -COMMAX         COMMAX = MAX NUMBER OF PULSES ALLOWED
 0105            EXTEND                   MINUS ONE
 0106            BZMF   COMZERO
 0107            INDEX  CDUIND
 0108            TS     COMMAND         REDUCE COMMAND BY MAX NUMBER OF PULSES
 0109  2         CS     -COMMAX-          ALLOWED
 0110   NEXTCDU  INCR   ITEMP1
 0111            INDEX  CDUIND
 0112  2         TS     CDUXCMD         SET UP COMMAND REGISTER.
 0113            CCS    CDUIND
 0114  2         TC     COARS2 +3
 0115            CCS    ITEMP1          SEE IF ANY PULSES TO GO OUT.
 0116  2         TCF    SENDPULS
 0117            TC     FIXDELAY        WAIT FOR GIMBALS TO SETTLE.
 0118  8         DEC    150
 0119            CAF    TWO             AT END OF COMMAND, CHECK TO SEE THAT
 0120   CHKCORS  TS     ITEMP1          GIMBALS ARE WITHIN 2 DEGREES OF THETAD.
 0121            INDEX  A
 0122            CA     CDUX
 0123            EXTEND
 0124            INDEX  ITEMP1
 0125            MSU    THETAD
 0126            CCS    A
 0127            TCF    COARSERR
 0128            TCF    CORSCHK2
 0129  2         TCF    COARSERR
 0130   CORSCHK2 CCS    ITEMP1
 0131            TCF    CHKCORS
 0132            TS     GCOMP           ZERO GYRO COMPENSATION REGISTERS IN
 0133            TS     GCOMP +1        PREPARATION FOR COMPENSATION.
 0134            TS     GCOMP +2
 0135            TS     GCOMP +3
 0136            TS     GCOMP +4
 0137  2         TS     GCOMP +5
 0138  2         TCF    ENDIMU          END OF COARSE ALIGNMENT.
 0139   COARSERR AD     COARSTOL        2 DEGREES.
 0140            EXTEND
 0141  2         BZMF   CORSCHK2
 0142            TC     ALARM           COARSE ALIGN ERROR.
 0143  2         OCT    211
 0144  2         TCF    IMUBAD
 0145  8COARSTOL DEC    -.01111         2 DEGREES SCALED AT HALF-REVOLUTIONS.
 0146   COMNEG   AD     -COMMAX
 0147            EXTEND
 0148            BZMF   COMZERO
 0149            COM
 0150            INDEX  CDUIND
 0151            TS     COMMAND
 0152            CA     -COMMAX-
 0153  2         TC     NEXTCDU
 0154   COMZERO  CAF    ZERO
 0155            INDEX  CDUIND
 0156            XCH    COMMAND
 0157  2         TC     NEXTCDU
 0158   SENDPULS CAF    13,14,15
 0159            EXTEND
 0160            WOR    CHAN14
 0161            CAF    600MS
 0162            TCF    COARS2 -1       AND THEN TO VARDELAY.
P0163  2         IMU FINE ALIGN MODE SWITCH.
 0164   IMUFINE  INHINT
 0165  2         TC     CAGETSTJ        SEE IF IMU BEING CAGED.
 0166            CS     BITS4-6         RESET ZERO, COARSE, AND ECTR ENABLE.
 0167            EXTEND
 0168  2         WAND   12
 0169            CAF    BIT10           IMU FAIL WAS INHIBITED DURING THE
 0170            TC     WAITLIST        PRESUMABLY PRECEDING COARSE ALIGN. LEAVE
 0171            2CADR  IFAILOK         IT ON FOR THE FIRST 5 SECS OF FINE ALIGN
 0172            CAF    90SEC           GYRO RE-CENTERING TIME.
 0173            TC     WAITLIST
 0174            2CADR  IMUFINED
 0175  2         TCF    MODEEXIT
 0176   IMUFINED TC     CAGETEST        SEE THAT NO ONE HAS CAGED THE IMU.
 0177  2         TCF    ENDIMU
 0178   IFAILOK  TC     CAGETSTQ        ENABLE IMU FIAL UNLESS IMU BEING CAGED.
 0179  2         TCF    TASKOVER        IT IS.
 0180            CAF    BIT4            DONT RESET IMU FAIL INHIBIT IF SOMEONE
 0181            EXTEND                 HAS GONE INTO COARSE ALIGN.
 0182            RAND   12
 0183            CCS    A
 0184  2         TCF    TASKOVER
 0185            CS     BIT4
 0186   PFAILOK2 MASK   IMODES30
 0187            TS     IMODES30
 0188  2         TCF    TASKOVER
 0189   PFAILOK  TC     CAGETSTQ        ENABLE PIP FAIL PROG ALARM.
 0190  2         TCF    TASKOVER
 0191            CS     BIT5
 0192            TCF    PFAILOK2
P0193  2         ROUITNES TO INITIATE AND TERMINATE PROGRAM USE OF THE PIPAS. NO
 0194  9 IMUSTALL REQUIRED IN EITHER CASE.
 0195   PIPUSE   TC     CAGETSTQ        DONT ENABLE PIPA FAIL IF IMU BEING CAGED
 0196  2         TCF    SWRETURN
 0197            INHINT
 0198            CAF    ZERO            ZERO COUNTERS.
 0199            TS     PIPAX
 0200            TS     PIPAY
 0201  2         TS     PIPAZ
 0202            CS     BIT1            IF PIPA FAILS FROM NOW ON (UNTIL
 0203            MASK   IMODES30        PIPFREE), LIGHT ISS WARNING.
 0204  2         TS     IMODES30
 0205   PIPFREE2 TC     IBNKCALL        ISS WARNING MIGHT COME ON NOW.
 0206  2         CADR   SETISSW         (OR GO OFF ON PIPFREE).
 0207  2         TCF    MODEEXIT
 0208   PIPFREE  INHINT                 PROGRAM DONE WITH PIPAS. DONT LIGHT
 0209            CS     BIT1            ISS WARNING.
 0210            MASK   IMODES30
 0211            AD     BIT1
 0212  2         TS     IMODES30
 0213            MASK   BIT10           IF PIP FAIL ON, DO PROG ALSRM AND RESET
 0214            CCS    A               ISS WARNING.
 0215  2         TCF    MODEEXIT
 0216            TC     ALARM
 0217  2         OCT    212
 0218  2         INHINT
 0219            TCF    PIPFREE2
P0220            THE FOLLOWING ROUTINE TORQUES THE IRIGS ACCORDING TO DOUBLE PRE
 0221  9CISION INPUTS IN THE SIX REGISTERS
R0222   BEGINNING AT THE ECADR ARRIVING IN A. THE MINIMUM SIZE OF ANY PULSE TRAI
 0223  9N IS 16 PULSES (.25 CDU COUNTS). THE
R0224  2UNSENT PORTION OF THE COMMAND IS LEFT INTACT IN THE INPUT COMMAND REGIST
 0225  9ERS.
 0226  2         EBANK= 1400            VARIABLE, ACTUALLY.
 0227   IMUPULSE TS     MPAC +5         SAVE ARRIVING ECADR.
 0228  2         TC     CAGETSTJ        DONT PROCEED IF IMU BEING CAGED.
 0229            CCS    LGYRO           SEE IF GYROS BUSY.
 0230  2         TC     GYROBUSY        SLEEP.
 0231            TS     MPAC +2
 0232            CAF    BIT6            ENABLE THE POWER SUPPLY.
 0233            EXTEND
 0234  2         WOR    14
 0235            CAF    FOUR
 0236   GWAKE2   INHINT                 (IF A JOB WAS PUT TO SLEEP, THE POWER
 0237            TC     WAITLIST        SUPPLY IS LEFT ON BY THE WAKING JOB).
 0238            2CADR  STRTGYRO
 0239            CA     MPAC +5         SET UP EBANK, SAVING CALLER'S EBANK FOR
 0240            XCH    EBANK           RESTORATION ON RETURN.
 0241            XCH    MPAC +5
 0242            TS     LGYRO           RESERVES GYROS.
 0243            MASK   LOW8
 0244  2         TS     ITEMP1
 0245            CAF    TWO             FORCE SIGN AGREEMENT ON INPUTS.
 0246   GYROAGRE TS     MPAC +3
 0247            DOUBLE
 0248            AD     ITEMP1
 0249            TS     MPAC +4
 0250            EXTEND
 0251            INDEX  A
 0252            DCA    1400
 0253            DXCH   MPAC
 0254            TC     TPAGREE
 0255            DXCH   MPAC
 0256            INDEX  MPAC +4
 0257  2         DXCH   1400
 0258            CCS    MPAC +3
 0259  2         TCF    GYROAGRE
 0260            CA     MPAC +5         RESTORE CALLER'S EBANK.
 0261            TS     EBANK
 0262            TCF    MODEEXIT
P0263  2         ROUTINES TO ALLOW TORQUING BY ONLY ONE JOB AT A TIME.
 0264   GYROBUSY EXTEND                 SAVE RETURN 2FCADR.
 0265            DCA    BUF2
 0266            DXCH   MPAC
 0267   REGSLEEP CAF    LGWAKE
 0268  2         TCF    JOBSLEEP
 0269   GWAKE    CCS    LGYRO           WHEN AWAKENED, SEE IF GYROS STILL BUSY.
 0270  2         TCF    REGSLEEP        IF SO, SLEEP SOME MORE.
 0271            TS     MPAC +2
 0272            EXTEND
 0273            DCA    MPAC
 0274            DXCH   BUF2            RESTORE SWRETURN INFO.
 0275            CAF    ONE
 0276  2         TCF    GWAKE2
 0277   LGWAKE   CADR   GWAKE
P0278  2         GYRO-TORQUING WAITLIST TASKS.
 0279   STRTGYRO CS     GDESELCT        DE-SELECT LAST GYRO.
 0280            EXTEND
 0281  2         WAND   14
 0282  2         TC     CAGETEST
 0283   STRTGYR2 CA     LGYRO           JUMP ON PHASE COUNTER IN BITS 13-14.
 0284            EXTEND
 0285            MP     BIT4
 0286            INDEX  A
 0287            TCF    +1
 0288            TC     GSELECT         =0. DO Y GYRO.
 0289  2         OCT    00202
 0290            TC     GSELECT         =1. DO Z GYRO.
 0291  2         OCT    00302
 0292            TC     GSELECT -2      =2. DO X GYRO.
 0293  2         OCT    00100
 0294            CAF    ZERO            =3. DONE
 0295            TS     LGYRO
 0296            CAF    LGWAKE          WAKE A POSSIBLE SLEEPING JOB.
 0297  2         TC     JOBWAKE
 0298            CAF    BIT2            DONT RESET POWER SUPPLY IF BIT SET
 0299            MASK   IMODES33        (ONLY DURING GYRO TORQUE SCALE FACTOR
 0300            CCS    A               TEST).
 0301  2         TCF    NORESET
 0302            CCS    LOCCTR          IF A JOB WAS AWAKENED, DONT RESET GYRO
 0303  2         TCF    NORESET         ENABLE.
 0304  2         TCF    NORESET
 0305            CS     BIT6            IF NO JOB AWAKENED, RESET GYRO ENABLE.
 0306            EXTEND
 0307  2         WAND   14
 0308  8NORESET  TCF    IMUFINED
 0309    -2      CS     FOUR            SPECIAL ENTRY TO REGRESS LGYRO FOR X.
 0310  2         ADS    LGYRO
 0311   GSELECT  INDEX  Q               SELECT GYRO.
 0312            CAF    0               PACKED WORD CONTAINS GYRO SELECT BITS
 0313            TS     ITEMP4          AND INCREMENT TO LGYRO.
 0314            MASK   SEVEN
 0315            AD     BIT13
 0316            ADS    LGYRO
 0317            TS     EBANK
 0318            MASK   LOW8
 0319  2         TS     ITEMP1
 0320            CS     SEVEN
 0321            MASK   ITEMP4
 0322  2         TS     ITEMP4
 0323            EXTEND                 MOVE DP COMMAND TO RUPTREGS FOR TESTING.
 0324            INDEX  ITEMP1
 0325            DCA    1400
 0326  2         DXCH   RUPTREG1
 0327            CCS    RUPTREG1
 0328            TCF    MAJ+
 0329            TCF    +2
 0330  2         TCF    MAJ-
 0331            CCS    RUPTREG2
 0332            TCF    MIN+
 0333            TCF    STRTGYR2
 0334            TCF    MIN-
 0335  8         TCF    STRTGYR2
 0336   MIN+     AD     -GYROMIN        SMALL POSITIVE COMMAND. SEE IF AT LEAST
 0337            EXTEND                 16 GYRO PULSES.
 0338  2         BZMF   STRTGYR2
 0339   MAJ+     EXTEND                 DEFINITE POSITIVE OUTPUT.
 0340            DCA    GYROFRAC
 0341  2         DAS    RUPTREG1
 0342            CA     ITEMP4          SELECT POSITIVE TORQUING FOR THIS GYRO.
 0343            EXTEND
 0344  2         WOR    14
 0345            CAF    LOW7            LEAVE NUMBER OF POSSIBLE 8192 AUGMENTS
 0346            MASK   RUPTREG2        TO INITIAL COMMAND IN MAJOR PART OF LONG
 0347            XCH    RUPTREG2        TERM STORAGE AND TRUNCATED FRACTION
 0348   GMERGE   EXTEND                 IN MINOR PART. THE MAJOR PART WILL BE
 0349            MP     BIT8            COUNTED DOWN TO ZERO IN THE COURSE OF
 0350            TS     ITEMP2          PUTTING OUT THE ENTIRE COMMAND.
 0351            CA     RUPTREG1
 0352            EXTEND
 0353            MP     BIT9
 0354            TS     RUPTREG1
 0355            CA     L
 0356            EXTEND
 0357            MP     BIT14
 0358  2         ADS    ITEMP2          INITIAL COMMAND.
 0359            EXTEND                 SEE IF MORE THAN ONE PULSE TRAIN NEEDED
 0360            DCA    RUPTREG1        (MORE THAN 16383 PULSES).
 0361            AD     MINUS1
 0362            CCS    A
 0363            TCF    LONGGYRO
 0364  2-GYROMIN OCT    -177            MAY BE ADJUSTED TO SPECIFY MINIMUM CMD.
 0365  2         TCF    +4
 0366            CAF    BIT14
 0367            ADS    ITEMP2
 0368  2         CAF    ZERO
 0369    +4      INDEX  ITEMP1
 0370  8         DXCH   1400
 0371            CA     ITEMP2          ENTIRE COMMAND.
 0372   LASTSEG  TS     GYROCMD
 0373            EXTEND
 0374            MP     BIT10           WAITLIST DT
 0375            AD     THREE           TRUNCATION AND PHASE UNCERTAINTIES.
 0376            TC     WAITLIST
 0377            2CADR  STRTGYRO
 0378   GYROEXIT CAF    BIT10           TURN ON GYRO ACTIVITY TO START TRAIN.
 0379            EXTEND
 0380            WOR    14
 0381  2         TCF    TASKOVER
 0382   LONGGYRO INDEX  ITEMP1
 0383            DXCH   1400            INITIAL COMMAND OUT PLUS N AUGMENTS OF
 0384            CAF    BIT14           8192. INITIAL COMMAND IS AT LEAST 8192.
 0385            AD     ITEMP2
 0386  2         TS     GYROCMD
 0387   AUG3     EXTEND                 GET WAITLIST DT TO TIME WHEN TRAIN IS
 0388            MP     BIT10           ALMOST OUT.
 0389            AD     NEG3
 0390            TC     WAITLIST
 0391            2CADR  8192AUG
 0392  2         TCF    GYROEXIT
 0393  28192AUG  TC     CAGETEST
 0394            CA     LGYRO           ADD 8192 PULSES TO GYROCMD
 0395            TS     EBANK
 0396            MASK   LOW8
 0397  2         TS     ITEMP1
 0398            INDEX  ITEMP1          SEE IF THIS IS THE LAST AUG.
 0399            CCS    1400
 0400  2         TCF    AUG2            MORE TO COME.
 0401            CAF    BIT14
 0402            ADS    GYROCMD
 0403  2         TCF    LASTSEG +1
 0404   AUG2     INDEX  ITEMP1
 0405            TS     1400
 0406            CAF    BIT14
 0407            ADS    GYROCMD
 0408  8         TCF    AUG3            COMPUTE DT.
 0409   MIN-     AD     -GYROMIN        POSSIBLE NEGATIVE OUTPUT.
 0410            EXTEND
 0411  2         BZMF   STRTGYR2
 0412   MAJ-     EXTEND                 DEFINITE NEGATIVE OUTPUT.
 0413            DCS    GYROFRAC
 0414  2         DAS    RUPTREG1
 0415            CA     ITEMP4          SELECT NEGATIVE TORQUING FOR THIS GYRO.
 0416            AD     BIT9
 0417            EXTEND
 0418  2         WOR    14
 0419            CS     RUPTREG1        SET UP RUPTREGS TO FALL INTO GMERGE.
 0420            TS     RUPTREG1        ALL NUMBERS PUT INTO GYROCMD ARE
 0421            CS     RUPTREG2        POSITIVE - BIT9 OF CHAN 14 DETERMINES
 0422            MASK   LOW7            THE SIGN OF THE COMMAND.
 0423            COM
 0424            XCH    RUPTREG2
 0425            COM
 0426  2         TCF    GMERGE
 0427  2GDESELCT OCT    1700            TURN OFF SELECT AND ACTIVITY BITS.
 0428   GYROFRAC 2DEC   .215 B -21
P0429  2         IMU MODE SWITCHING ROUTINES COME HERE WHEN ACTION COMPLETE.
 0430   ENDIMU   EXTEND                 MODE IS BAD IF CAGE HAS OCCURED OR IF
 0431            READ   11              ISS WARNING IS ON.
 0432            MASK   BIT1
 0433            CCS    A
 0434  2         TCF    IMUBAD
 0435  2IMUGOOD  TCF    GOODEND         WITH C(A) = 0.
 0436   IMUBAD   CAF    ZERO
 0437  2         TCF    BADEND
 0438   CAGETEST CAF    BIT6            SUBROUTINE TO TERMINATE IMU MODE
 0439            MASK   IMODES30        SWITCH IF IMU HAS BEEN CAGED.
 0440            CCS    A
 0441            TCF    IMUBAD          DIRECTLY.
 0442  2         TC     Q               WITH C(A) = +0.
 0443   CAGETSTQ CS     IMODES30        SKIP IF IMU NOT BEING CAGED.
 0444            MASK   BIT6
 0445            CCS    A
 0446            INCR   Q
 0447  2         TC     Q
 0448   CAGETSTJ CS     IMODES30        IF DURING MODE SWITCH INITIALIZATION
 0449            MASK   BIT6            IT IS FOUND THAT THE IMU IS BEING CAGED,
 0450            CCS    A               SET IMUCADR TO -0 TO INDICATE OPERATION
 0451  2         TC     Q               COMPLETE BUT FAILED. RETURN IMMEDIATELY
 0452            CS     ZERO            TO SWRETURN.
 0453            TS     IMUCADR
 0454            TCF    MODEEXIT
P0455            GENERALIZED MODE SWITCHING TERMINATION. ENTER AT GOODEND FOR SU
 0456  9CCESSFUL COMPLETION OF AN I/O OPERATION
R0457  2OR AT BADEND FOR A N UNSUCCESSFUL ONE. C(A) OR ARRIVAL =0 FOR IMU, 1 FOR
 0458  9 AOT, AND 2 FOR RADARS.
 0459   BADEND   TS     RUPTREG2        DEVICE INDEX.
 0460            CS     ZERO            FOR FAILURE.
 0461  2         TCF    GOODEND +2
 0462   GOODEND  TS     RUPTREG2
 0463  2         CS     ONE             FOR SUCCESS.
 0464            TS     RUPTREG3
 0465            INDEX  RUPTREG2        SEE IF USING PROGRAM ASLEEP.
 0466            CCS    MODECADR
 0467            TCF    +2              YES - WAKE IT UP.
 0468  2         TCF    ENDMODE         IF 0, PROGRAM NOT IN YET.
 0469            CAF    ZERO            WAKE SLEEPING PROGRAM.
 0470            INDEX  RUPTREG2
 0471            XCH    MODECADR
 0472  2         TC     JOBWAKE
 0473            CS     RUPTREG3        ADVANCE LOC IF SUCCESSFUL.
 0474            INDEX  LOCCTR
 0475  2         ADS    LOC
 0476  2         TCF    TASKOVER
 0477   ENDMODE  CA     RUPTREG3        -0 INDICATES OPERATION COMPLETE BUT
 0478            INDEX  RUPTREG2        UNSUCCESSFUL - -1 INDICATES COMPLETE AND
 0479            TS     MODECADR        SUCCESSFUL.
 0480            TCF    TASKOVER
P0481  2         GENERAL STALLING ROUTINE. USING PROGRAMS COME HERE TO WAIT FOR
 0482  9I/O COMPLETION.
 0483   RADSTALL CAF    TWO             RR AND LR STALL.
 0484  2         TCF    STALL
 0485   AOTSTALL CAF    ONE             AOT.
 0486  2         TC     STALL
 0487  2OPTSTALL EQUALS AOTSTALL
 0488   LOTSTALL EQUALS RADSTALL
 0489  2IMUSTALL CAF    ZERO            IMU.
 0490   STALL    INHINT
 0491            TS     RUPTREG2        SAVE DEVICE INDEX.
 0492            INDEX  A               SEE IF OPERATION COMPLETE.
 0493            CCS    MODECADR
 0494            TCF    MODABORT        ALLOWABLE STATES ARE +0, -1, AND -0.
 0495            TCF    MODESLP         OPERATION INCOMPLETE.
 0496  2         TCF    MODEGOOD        COMPLETE AND GOOD IF = -1.
 0497   MG2      INDEX  RUPTREG2        COMPLETE AND FAILED IF -0. RESET TO +0.
 0498            TS     MODECADR        RETURN TO CALLER.
 0499  2         TCF    MODEEXIT
 0500   MODEGOOD CCS    A               MAKE SURE INITIAL STATE -1.
 0501  2         TCF    MODABORT
 0502            INCR   BUF2            IF SO, INCREMENT RETURN ADDRESS AND
 0503  2         TCF    MG2             RETURN IMMEDIATELY, SETTING CADR = +0.
 0504   MODESLP  TC     MAKECADR        CALL FROM SWITCHABLE FIXED ONLY.
 0505            INDEX  RUPTREG2
 0506            TS     MODECADR
 0507  2         TCF    JOBSLEEP
 0508   MODABORT TC     ABORT           TWO PROGRAMS USING SAME DEVICE.
 0509            OCT    1210
P0510  2         CONSTANTS FOR MODE SWITCHING ROUTINES
 0511   BITS3&4  OCT    14
 0512   BITS4&6  OCT    00050
 0513   BITS4-6  OCT    00070
 0514   IMUSEFLG EQUALS BIT8            INTERPRETER SWITCH 7.
 0515  213,14,15 OCT    70000
 0516   -COMMAX  DEC    -191
 0517   -COMMAX- DEC    -192
 0518   600MS    DEC    60
 0519   3SECSM   EQUALS 3SECS
 0520  290SEC    DEC    9000
 0521   ENDIMODS EQUALS
L       IMU COMPENSATION PACKAGE
 0001            BANK   7
 0002  2         EBANK= NBDX
R0003   PROGRAM DESCRIPTION- IMU COMPENSATION (LEM)
 0004  9DATE- 30 AUG 66
R0005   MOD NO- 0
 0006  9LOG SECTION- IMU COMPENSATION PACKAGE
R0007  2MOD BY- GILBERT
 0008  9ASSEMBLY- SUNBURST REVISION 13
R0009   FUNCTIONAL DESCRIPTION
R0010         THE IMU COMPENSATION PACKAGE IS DESIGNED TO COMPENSATE FOR PIPA BI
 0011  9AS AND SCALE FACTOR ERROR AND AT THE
R0012   SAME TIME ACCUMULATE GYRO TORQUING COMMANDS NECESSARY TO COMPENSATE FOR
 0013  9THE ASSOCIATED BIAS AND ACCELERATION-
R0014   CAUSED GYRO DRIFTS. 1/PIPA MUST BE CALLED AT LEAST EVERY 2.55 SECONDS DU
 0015  9E TO SCALING CONSIDERATIONS.
R0016  2SPECIFICALLY, THE CORRECTION IS
R0017         PIPA  = (1 + SCALE FACTOR ERROR)PIPA  - (BIAS)(DELTAT)
R0018  2          C                               I
R0019   WHERE PIPA  IS THE COMPENSATED DATA OBTAINED FROM THE SAMPLED DATA PIPA
R0020  2          C                                                            I
R0021   THE COMPENSATED DATA IS THEN USED TO COMPUTE THE IRIG TORQUING NECESSARY
 0022  9 TO CANCEL THE NBD, ADIA, AND ADSRA
R0023   GYRO COEFFICIENTS.
R0024  2SPECIFICALLY, THE COMPUTATIONS ARE
R0025         XIRIG     -(ADIAX)(PIPAX ) + (ADSRAX)(PIPAY ) - (NBDX)(DELTAT)
R0026                                 C                  C
R0027         YIRIG     -(ADIAY)(PIPAY ) + (ADSRAY)(PIPAZ ) - (NBDY)(DELTAT)
R0028                                 C                  C
R0029         ZIRIG     -(ADIAZ)(PIPAZ ) - (ADSRAZ)(PIPAY ) + (NBDZ)(DELTAT)
R0030  2                              C                  C
R0031   THIS COMPENSATION IS SUMMED INTO THE GCOMP REGISTERS AND WHEN THE MAGNIT
 0032  9UDE OF ANY IRIG COMMAND EXCEEDS 2
R0033  2PULSES, THE COMMANDS ARE SENT TO THE GYROS.
R0034   DURING FREE-FALL PHASES OF A FLIGHT NBDX, NBDY, AND NBDZ ARE THE ONLY RE
 0035  9LEVANT COEFFICIENTS. THESE BIAS TERMS
R0036   WILL BE INTEGRATED BY ROUTINE NBDONLY APPROXIMATELY EVERY 81.93 SECONDS
 0037  9FOLLOWING AN EXECUTIVE CALL BY THE DUMMY
R0038   TASK OF THE WAITLIST PROGRAM. NBDONLY IS ENABLED WHEN BIT 15 OF FLAGWRD2
 0039  9 IS SET TO INDICATE FREE-FALL. DURING
R0040  2THIS TIME 1/PIPA IS NOT CALLED.
R0041   LASTBIAS IS CALLED VIA EXECUTIVE WHEN MAKING THE TRANSITION FROM FREE-FA
 0042  9LL TO A PIPA READING MODE. THE NBD TERMS
R0043   ARE COMPENSATED FOR FROM THE LAST NBDONLY CALL UP TO PIPA ZEROING. PRERE
 0044  9AD WILL THEN ENABLE 1/PIPA AT ITS
R0045  2REGULAR INTERVAL. THE DRIFT FLAG MUST BE DOWN JUST PRIOR TO LASTBIAS. GY
 00455 9ROCOMPASS NEVER CALLS LASTBIAS.
R0046   SCALING CONSIDERATIONS
R0047  2                           UNITS              MAX. VALUE     INTERNAL UN
 0048  9ITS AND SCALING
R0049         PIPA BIAS            (CM)/(SEC)(SEC)    3.125          (PIPA PULSE
 0050  9S)/(CS) X 2(-5)
R0051         PIPA SCALE FACTOR    P.P.M.             1953.125       (PPM) X 2(-
 0052  99)
R0053         NBD                  MERU               128.74604      (GYRO PULSE
 0054  9S)/(CS) X 2(-5)
R0055         ADIA                 (MERU)/(G)         630.36633      (GYRO PULSE
 0056  9S)/(PIPA PULSE) X 2(-6)
R0057  8      ADSRA                (MERU)/(G)         630.36633      (GYRO PULSE
 0058  9S)/(PIPA PULSE) X 2(-6)
R0059   CONVERSION TABLE
R0060         1 PIPA PULSE = 1.00 (CM)/(SEC)(SEC)          1 ERU = 7.29209817 X
 0061  910(-5) (RAD)/(SEC)
R0062         1 ERU = 15.04104488 (ARCSEC)/(SEC)           1 (CM)/(SEC)(SEC) = .
 0063  901 (PIPA PULSES)/(CS)
R0064         1 GYRO PULSE = .61798096 ARCSEC              1 MERU = .0024272592
 0065  9(GYRO PULSES)/(CS)
R0066  2      1 G = 979.24 (CM)/(SEC)(SEC)  (AMR)          1 (MERU)/(G) = .00014
 0067  94787174 (GYRO PULSES)/(PIPA PULSE)
R0068   REFERENCES
R0069  2      AGC PROGRAMMING MEMO NO. 12, I.S.S. MEMO NO. 247, I.S.S. MEMO NO.
 0070  9328, I.S.S. MEMO NO. 339
R0071   CALLING SEQUENCE
R0072         L      TC     BANKCALL
R0073         L+1    CADR   1/PIPA
R0074  2      L+2                       RETURNS HERE
R0075   NORMAL EXIT MODES
R0076  2      AT L+2 OF CALLING SEQUENCE
R0077   ALARM OR ABORT MODES
R0078  2      ENDOFJOB
R0079   ERASABLE INITIALIZATION REQUIRED (CONSECUTIVE LOCATIONS)
R0080         PBIASX    PIPAX BIAS
R0081         PIPASCFX  PIPAX SCALE FACTOR ERROR
R0082         PBIASY    PIPAY BIAS
R0083         PIPASCFY  PIPAY SCALE FACTOR ERROR
R0084         PBIASZ    PIPAZ BIAS
R0085         PIPASCFZ  PIPAZ SCALE FACTOR ERROR
R0086         NBDX      X IRIG BIAS DRIFT
R0087         NBDY      Y IRIG BIAS DRIFT
R0088         NBDZ      Z IRIG BIAS DRIFT
R0089         ADIAX     IRIG ACCELERATION SENSITIVE DRIFT ALONG THE X INPUT AXIS
R0090         ADIAY     IRIG ACCELERATION SENSITIVE DRIFT ALONG THE Y INPUT AXIS
R0091         ADIAZ     IRIG ACCELERATION SENSITIVE DRIFT ALONG THE Z INPUT AXIS
R0092         ADSRAX    IRIG ACCELERATION SENSITIVE DRIFT ALONG THE X SPIN REFER
 0093  9ENCE AXIS
R0094         ADSRAY    IRIG ACCELERATION SENSITIVE DRIFT ALONG THE Y SPIN REFER
 0095  9ENCE AXIS
R0096         ADSRAZ    IRIG ACCELERATION SENSITIVE DRIFT ALONG THE Z SPIN REFER
 0097  9ENCE AXIS
R00975 2      GCOMP     GYRO COMPENSATION PULSES (SET = ZERO FOR 1ST PASS)
R0098   INPUT
R0099         1/PIPADT - DELTA TIME SCALED AT (CS) X 2(+8)
R0100  2      DELVX, DELVY, DELVZ - PIPA READINGS IN THE MAJOR PARTS - MINOR PAR
 0101  9TS IRRELEVANT
R0102   OUTPUT
R0103         DELVX, DELVY, DELVZ - PIPA COUNTS SCALED 2(+14) COMPENSATED FOR PI
 0104  9PA BIAS AND SCALE FACTOR ERROR
R0105  2      GCOMP - 3 DP LOCATIONS CONTAINING GYRO PULSES TO COMPENSATE FOR NB
 0106  9D, ADIA, AND ADSRA COEFFICIENTS
R0107   DEBRIS
R0108         CENTRALS - A,L,Q
R0109  8      OTHER - BUF - BUF +2, VBUF - VBUF +2, GCOMPSW
 0110   1/PIPA   CAF    LGCOMP          SAVE EBANK OF CALLING PROGRAM
 0111            XCH    EBANK
 01112 2         TS     MODE
 01113           CAF    FOUR            PIPAZ, PIPAY, PIPAX
 01114 2         TS     BUF +2
 0112            INDEX  A
 0113            CA     DELVX           CONTAINS PREVIOUS PIPA READING
 0114  2         TS     VBUF            TEMPORARY - MINOR PARTS IRRELEVANT
 0115            INDEX  BUF +2
 0116            CS     PIPABIAS        (PIPA PULSES)/(CS) X 2(-5)             *
 0117            EXTEND
 0118            MP     1/PIPADT        (CS) X 2(+8)  NOW (PIPA PULSES) X 2(+3)*
 0119            EXTEND                                                        *
 0120            MP     BIT4            SCALE 2(-3)      SHIFT LEFT 3          *
 0121  2         LXCH   VBUF +1         (PIPA PULSES) X 2(0)   FRACTIONAL PULSE*
 0122            INDEX  BUF +2
 0123            CA     PIPASCF         (P.P.M.) X 2(-9)
 0124            EXTEND
 0125            MP     VBUF            (PIPA PULSES) X 2(+14)
 0126            LXCH   VBUF +2         SAVE FOR FRACTIONAL COMPUTATION
 0127            EXTEND
 0128            MP     BIT6            SCALE 2(+9)    NOW PIPA PULSES X 2(+14)
 0129  2         DAS    VBUF            (PIPAI) - (NBD)(DELTAT) - HI(PIPAI)(SFE)
 0130            CA     VBUF +2         NOW MINOR PART
 0131            EXTEND
 0132            MP     BIT6            SCALE 2(+9)    SHIFT RIGHT 9
 0133            TS     L
 0134            CAF    ZERO
 0135  2         DAS    VBUF            (PIPAI) - (NBD)(DELTAT) - (PIPAI)(SFE)
 0136            EXTEND
 0137            DCA    VBUF            RESTORE COMPENSATED PIPA READING
 0138            INDEX  BUF +2
 0139  2         DXCH   DELVX
 0140            CCS    BUF +2          PIPAZ, PIPAY, PIPAX
 0141            AD     NEG1
 0142            TCF    1/PIPA +4
 0143  8         NOOP                   LESS THAN ZERO IMPOSSIBLE
 0144   IRIGCOMP TS     GCOMPSW         INDICATE COMMANDS 2 PULSES OR LESS
 0145  2         TS     BUF             INDEX COUNTER - IRIGX, IRIGY, IRIGZ
 0146   IRIGX    EXTEND
 0147            DCS    DELVX           (PIPA PULSES) X 2(+14)
 0148            DXCH   MPAC
 0149            CA     ADIAX           (GYRO PULSES)/(PIPA PULSE) X 2(-6)     *
 0150  2         TC     GCOMPSUB        -(ADIAX)(PIPAX)   (GYRO PULSES) X 2(+14)
 0151            EXTEND
 0152            DCS    DELVY           (PIPA PULSES) X 2(+14)
 0153            DXCH   MPAC
 0154            CS     ADSRAX          (GYRO PULSES)/(PIPA PULSE) X 2(-6)     *
 0155  2         TC     GCOMPSUB        +(ADSRAX)(PIPAY)  (GYRO PULSES) X 2(+14)
 0156            CS     NBDX            (GYRO PULSES)/(CS) X 2(-5)
 0157  2         TC     DRIFSTUB        -(NBDX)(DELTAT)   (GYRO PULSES) X 2(+14)
 0158   IRIGY    EXTEND
 0159            DCS    DELVY           (PIPA PULSES) X 2(+14)
 0160            DXCH   MPAC
 0161            CA     ADIAY           (GYRO PULSES)/(PIPA PULSE) X 2(-6)     *
 0162  2         TC     GCOMPSUB        -(ADIAY)(PIPAY)   (GYRO PULSES) X 2(+14)
 0163            EXTEND
 0164            DCS    DELVZ           (PIPA PULSES) X 2(+14)
 0165            DXCH   MPAC
 0166            CS     ADSRAY          (GYRO PULSES)/(PIPA PULSE) X 2(-6)     *
 0167  2         TC     GCOMPSUB        +(ADSRAY)(PIPAZ)  (GYRO PULSES) X 2(+14)
 0168            CS     NBDY            (GYRO PULSES)/(CS) X 2(-5)
 0169  2         TC     DRIFSTUB        -(NBDY)(DELTAT)   (GYRO PULSES) X 2(+14)
 0170   IRIGZ    EXTEND
 0171            DCS    DELVY           (PIPA PULSES) X 2(+14)
 0172            DXCH   MPAC
 0173            CA     ADSRAZ          (GYRO PULSES)/(PIPA PULSE) X 2(-6)     *
 0174  2         TC     GCOMPSUB        -(ADSRAZ)(PIPAY   (GYRO PULSES) X 2(+14)
 0175            EXTEND
 0176            DCS    DELVZ           (PIPA PULSES) X 2(+14)
 0177            DXCH   MPAC
 0178            CA     ADIAZ           (GYRO PULSES)/(PIPA PULSE) X 2(-6)     *
 0179  2         TC     GCOMPSUB        -(ADIAZ)(PIPAZ)   (GYRO PULSES) X 2(+14)
 0180            CA     NBDZ            (GYRO PULSES)/(CS) X 2(-5)
 0181  8         TC     DRIFSTUB        +(NBDZ)(DELTAT)   (GYRO PULSES) X 2(+14)
 0182            CCS    GCOMPSW         ARE GYRO COMMANDS GREATER THAN 2 PULSES
 0183            TCF    +2              YES
 0184  2         TCF    IRIG1           NO
 0185            INHINT
 0186            CAF    PRIO35          SEND OUT GYRO TORQUING COMMANDS
 0187            TC     NOVAC
 0188            2CADR  1/GYRO
 0189            RELINT
 01892  IRIG1    CA     MODE            SET EBANK FOR RETURN
 01893           TS     EBANK
 01895 7         TCF    SWRETURN
 0190   GCOMPSUB XCH    MPAC            ADIA OR ADSRA COEFFICIENT ARRIVES IN A
 0191            EXTEND                 C(MPAC) = (PIPA PULSES) X 2(+14)
 0192            MP     MPAC            (GYRO PULSES)/(PIPA PULSE) X 2(-6)     *
 0193  2         DXCH   VBUF            NOW = (GYRO PULSES) X 2(+8)            *
 0194            CA     MPAC +1         MINOR PART PIPA PULSES
 0195            EXTEND
 0196            MP     MPAC            ADIA OR ADSRA
 0197            TS     L
 0198            CAF    ZERO
 0199  2         DAS    VBUF            NOW = (GYRO PULSES) X 2(+8)            *
 0200            CA     VBUF            PARTIAL RESULT - MAJOR
 0201            EXTEND
 0202            MP     BIT9            SCALE 2(+6)      SHIFT RIGHT 6         *
 0203            INDEX  BUF             RESULT = (GYRO PULSES) X 2(+14)
 0204  2         DAS    GCOMP           HI(ADIA)(PIPAI)  OR  HI(ADSRA)(PIPAI)
 0205            CA     VBUF +1         PARTIAL RESULT - MINOR
 0206            EXTEND
 0207            MP     BIT9            SCALE 2(+6)      SHIFT RIGHT 6         *
 0208            TS     L
 0209            CAF    ZERO
 0210            INDEX  BUF             RESULT = (GYRO PULSES) X 2(+14)
 0211  2         DAS    GCOMP           (ADIA)(PIPAI)  OR  (ADSRA)(PIPAI)
 0212  8         TC     Q
 0213   DRIFSTUB EXTEND
 0214  2         QXCH   BUF +1
 0215            EXTEND                 C(A) = NBD    (GYRO PULSES)/(CS) X 2(-5)
 0216            MP     1/PIPADT        (CS) X 2(+8)   NOW (GYRO PULSES) X 2(+3)
 0217            LXCH   MPAC +1         SAVE FOR FRACTIONAL COMPENSATION
 0218            EXTEND
 0219            MP     BIT4            SCALE 2(+11)     SHIFT RIGHT 11
 0220            INDEX  BUF
 0221  2         DAS    GCOMP           HI(NBD)(DELTAT)   (GYRO PULSES) X 2(+14)
 0222            CA     MPAC +1         NOW MINOR PART
 0223            EXTEND
 0224            MP     BIT4            SCALE 2(+11)     SHIFT RIGHT 11
 0225            TS     L
 0226            CAF    ZERO
 0227            INDEX  BUF             ADD IN FRACTIONAL COMPENSATION
 0228  2         DAS    GCOMP           (NBD)(DELTAT)     (GYRO PULSES) X 2(+14)
 0229   DRFTSUB2 CAF    TWO             PIPAX, PIPAY, PIPAZ
 0230            AD     BUF
 0231            XCH    BUF
 0232            INDEX  A
 0233            CCS    GCOMP           ARE GYRO COMMANDS 1 PULSE OR GREATER
 0234            TCF    +2              YES
 0235  2         TC     BUF +1          NO
 0236            MASK   COMPCHK         DEC -1
 0237            CCS    A               ARE GYRO COMMANDS GREATER THAN 2 PULSES
 0238            TS     GCOMPSW         YES - SET GCOMPSW POSITIVE
 0239  8         TC     BUF +1          NO
 0240   1/GYRO   CAF    FOUR            PIPAZ, PIPAY, PIPAX
 0241  2         TS     BUF
 0242            INDEX  BUF             SCALE GYRO COMMANDS FOR IMUPULSE
 0243            CA     GCOMP +1        FRACTIONAL PULSES
 0244            EXTEND
 0245            MP     BIT8            SHIFT RIGHT 7
 0246            INDEX  BUF
 0247  2         TS     GCOMP +1        FRACTIONAL PULSES SCALED
 0248            CAF    ZERO            SET GCOMP = 0 FOR DAS INSTRUCTION
 0249            INDEX  BUF
 0250            XCH    GCOMP           GYRO PULSES
 0251            EXTEND
 0252            MP     BIT8            SHIFT RIGHT 7
 0253            INDEX  BUF
 0254  2         DAS    GCOMP           ADD THESE TO FRACTIONAL PULSES ABOVE
 0255            CCS    BUF             PIPAZ, PIPAY, PIPAX
 0256            AD     NEG1
 0257            TCF    1/GYRO +1
 0258  2LGCOMP   ECADR  GCOMP           LESS THAN ZERO IMPOSSIBLE
 0259            CAF    LGCOMP
 0260            TC     BANKCALL
 0261            CADR   IMUPULSE        CALL GYRO TORQUING ROUTINE
 0262            TC     BANKCALL
 0263            CADR   IMUSTALL        WAIT FOR PULSES TO GET OUT
 0264  2         TCF    ENDOFJOB        TEMPORARY
 0265   GCOMP1   CAF    FOUR            PIPAZ, PIPAY, PIPAX
 0266  2         TS     BUF
 0267            INDEX  BUF             RESCALE
 0268            CA     GCOMP +1
 0269            EXTEND
 0270            MP     BIT8            SHIFT MINOR PART LEFT 7 - MAJOR PART = 0
 0271            INDEX  BUF
 0272  2         LXCH   GCOMP +1        BITS 8-14 OF MINOR PART WERE = 0
 0273            CCS    BUF             PIPAZ, PIPAY, PIPAX
 0274            AD     NEG1
 0275            TCF    GCOMP1 +1
 0276   COMPCHK  DEC    -1              LESS THAN ZERO IMPOSSIBLE
 0277  8         TCF    ENDOFJOB
 0278   NBDONLY  CA     TIME1           (CS) X 2(+14)
 0279            XCH    1/PIPADT        PREVIOUS TIME
 0280            COM
 0281            AD     1/PIPADT
 0282   NBD2     CCS    A               CALCULATE ELAPSED TIME
 0283            AD     ONE             NO TIME1 OVERFLOW
 0284            TCF    NBD3            RESTORE TIME DIFFERENCE AND JUMP
 0285            TCF    +2              TIME1 OVERFLOW
 0286  2         TCF    ENDOFJOB        IF ELAPSED TIME = 0  (DIFFERENCE = -0)
 0287            COM                    CALCULATE ABSOLUTE DIFFERENCE
 0288  2         AD     POSMAX
 0289   NBD3     EXTEND                 C(A) = DELTAT    (CS) X 2(+14)
 0290            MP     BIT10           SHIFT RIGHT 5
 0291            DXCH   VBUF
 0292            EXTEND
 0293            DCA    VBUF
 0294  2         DXCH   MPAC            DELTAT NOW SCALED (CS) X 2(+19)
 0295            CAF    ZERO
 0296            TS     GCOMPSW         INDICATE COMMANDS 2 PULSES OR LESS
 0297  2         TS     BUF             PIPAX, PIPAY, PIPAZ
 0298            CS     NBDX            (GYRO PULSES)/(CS) X 2(-5)
 0299  2         TC     FBIASSUB        -(NBDX)(DELTAT)   (GYRO PULSES) X 2(+14)
 0300            EXTEND
 0301            DCS    VBUF
 0302            DXCH   MPAC            DELTAT SCALED (CS) X 2(+19)
 0303            CA     NBDY            (GYRO PULSES)/(CS) X 2(-5)
 0304  2         TC     FBIASSUB        -(NBDY)(DELTAT)   (GYRO PULSES) X 2(+14)
 0305            EXTEND
 0306            DCS    VBUF
 0307            DXCH   MPAC            DELTAT SCALED (CS) X 2(+19)
 0308            CS     NBDZ            (GYRO PULSES)/(CS) X 2(-5)
 0309  2         TC     FBIASSUB        +(NBDZ)(DELTAT)   (GYRO PULSES) X 2(+14)
 0310            CCS    GCOMPSW         ARE GYRO COMMANDS GREATER THAN 2 PULSES
 0311            TCF    1/GYRO          YES
 0312  8         TCF    ENDOFJOB        NO
 0313   FBIASSUB XCH    Q
 0314  2         TS     BUF +1
 0315            CA     Q               NBD SCALED (GYRO PULSES)/(CS) X 2(-5)
 0316            EXTEND
 0317            MP     MPAC            DELTAT SCALED (CS) X 2(+19)
 03175           INDEX  BUF
 0318  2         DAS    GCOMP           HI(NBD)(DELTAT)   (GYRO PULSES) X 2(+14)
 0319            CA     Q               NOW FRACTIONAL PART
 0320            EXTEND
 0321            MP     MPAC +1
 0322            TS     L
 0323            CAF    ZERO
 03235           INDEX  BUF
 0324  2         DAS    GCOMP           (NBD)(DELTAT)     (GYRO PULSES) X 2(+14)
 0325  6         TCF    DRFTSUB2        CHECK MAGNITUDE OF COMPENSATION
 0326   LASTBIAS XCH    1/PIPADT        NEW 1/PIPADT VALUE SCALED (CS) X 2(+14)
 0327            COM
 0328            AD     MPAC            C(TIME1) AT PIPAI = 0 SCALED 2(+14)
 0329  6         TCF    NBD2
 0340   GCOMPZER CAF    LGCOMP           ROUTINE TO ZERO GCOMP BEFORE FIRST
 0341            XCH    EBANK            CALL TO 1/PIPA
 0342  2         TS     MODE
 0343            CAF    ZERO
 0344            TS     GCOMP
 0345            TS     GCOMP +1
 0346            TS     GCOMP +2
 0347            TS     GCOMP +3
 0348            TS     GCOMP +4
 0349  2         TS     GCOMP +5
 0350            CA     MODE
 0351            TS     EBANK
 0352            TCF    SWRETURN         RETURN TO CALLER
*       ENDOFJOB
