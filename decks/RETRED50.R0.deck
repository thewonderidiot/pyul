* 1800A JOB 55-238-50  YUL SYSTEM
*       YUL LYNNWARD
Y LYNN  ADD NEW COMPUTER BLK2
Y LYNN  ASSEMBLY PASS 1 FOR BLK2 IS AVAILABLE
Y LYNN  ASSEMBLY PASS 2 FOR BLK2 IS AVAILABLE
Y LYNN  ASSEMBLY PASS 3 FOR BLK2 IS AVAILABLE
Y LYNN  MANUFACTURING FOR BLK2 IS AVAILABLE
Y LYNN  ASSEMBLE NEW BLK2 PROGRAM RETRED50 BY NASA 2021103
LINS    VERB AND NOUN INFORMATION
P0038  4VERB DEFINITIONS
R0039    REGULAR VERBS
R0040   01  DISPLAY OCTAL COMP 1 (R1)
R0041   02  DISPLAY OCTAL COMP 2 (R1)
R0042   03  DISPLAY OCTAL COMP 3 (R1)
R0043   04  DISPLAY OCTAL COMP 1,2 (R1,R2)
R0044   05  DISPLAY OCTAL COMP 1,2,3 (R1,R2,R3)
R0045   06  DECIMAL DISPLAY
R0046   07  DP DECIMAL DISPLAY (R1,R2)
R0047   10  SPARE
R0048   11  MONITOR OCT COMP 1 (R1)
R0049   12  MONITOR OCT COMP 2 (R1)
R0050   13  MONITOR OCT COMP 3 (R1)
R0051   14  MONITOR OCT COMP 1,2 (R1)
R0052   15  MONITOR OCT COMP 1,2,3 (R1,R2,R3)
R0053   16  MONITOR DECIMAL
R0054   17  MONITOR DP DECIMAL (R1,R2)
R0055   20  SPARE
R0056   21  LOAD COMP 1 (R1)
R0057   22  LOAD COMP 2 (R2)
R0058   23  LOAD COMP 3 (R3)
R0059   24  LOAD COMP 1,2 (R1,R2)
R0060   25  LOAD COMP 1,2,3 (R1,R2,R3)
R0061   26  SPARE
R0062   27  FIXED MEMORY DISPLAY
R0063   30  REQUEST EXECUTIVE
R0064   31  REQUEST WAITLIST
R0065   32  C(R2) INTO R3, C(R1) INTO R2
R0066   33  PROCEED WITHOUT DATA
R0067   34  TERMINATE CURRENT TEST OR LOAD REQUEST
R0068   35  TEST LIGHTS
R0069   36  FRESH START
R0070   37  CHANGE MAJOR MODE
R0071  4END OF REGULAR VERBS
R0078   EXTENDED VERBS
R0079   40  ZERO ISS CDU
R0080   41  COARSE ALIGN IMU
R0081   42  FINE ALIGN IMU
R0082   43  PULSE TORQUE GYROS
R0083   44  ISS TURN-ON
P0105   NORMAL NOUNS                                       SCALE AND DECIMAL POI
 0106  9NT
R0107   00  NOT IN USE
R0108   01  SPECIFY MACHINE ADDRESS (FRACTIONAL)           (.XXXXX)
R0109   02  SPECIFY MACHINE ADDRESS (WHOLE)                (XXXXX.)
R0110   03  SPECIFY MACHINE ADDRESS (DEGREES)              (XXX.XXDEGREES)
R0111   04  SPECIFY MACHINE ADDRESS (HOURS)                (XXX.XXHOURS)
R0112   05  SPECIFY MACHINE ADDRESS (SECONDS)              (XXX.XXSECONDS)
R0113   06  SPECIFY MACHINE ADDRESS (GYRO DEGREES)         (XX.XXXDEGREES)
R0114   07  SPECIFY MACHINE ADDRESS (Y OPT DEGREES)        (XX.XXXDEGREES)
R0116   10  CHANNEL TO BE SPECIFIED
R0117   11  SPARE
R0118   12  SPARE
R0119   13  SPARE
R0120   14  SPARE
R0121   15  INCREMENT MACHINE ADDRESS                      (OCTAL ONLY)
R0122   16  TIME SECONDS                                   (XXX.XXSECONDS)
R0123   17  TIME HOURS                                     (XXX.XXHOURS)
R0124   20  ICDU                                           (XXX.XXDEGREES)
R0125   21  PIPAS                                          (XXXXX.PULSES)
R0126   22  NEW ANGLES I                                   (XXX.XXDEGREES)
R0127   23  DELTA ANGLES I                                 (XXX.XXDEGREES)
R0128   24  DELTA TIME (SECONDS)                           (XXX.XXSECONDS)
R0129   25  CHECKLIST                                      (XXXXX.)
R0130   26  PRIO/DELAY, ADRES, BBCON                       (OCTAL ONLY)
R0131   27  SELF TEST ON/OFF SWITCH                        (XXXXX.)
R0132   30  STAR NUMBERS                                   (XXXXX.)
R0133   31  FAILREG                                        (OCTAL ONLY)
R0134   32  DECISION TIME (MIDCOURSE)                      (XXX.XXHOURS (INTERNA
 0135  9L UNITS = WEEKS))
R0136   33  EPHEMERIS TIME (MIDCOURSE)                     (XXX.XXHOURS (INTERNA
 0137  9L UNITS = WEEKS))
R0138   34  MEASURED QUANTITY (MIDCOURSE)                  (XXXX.XKILOMETERS)
R0139   35  ROLL, PITCH, YAW                               (XXX.XXDEGREES)
R0140   36  LANDMARK DATA 1                                (OCTAL ONLY)
R0141   37  LANDMARK DATA 2                                (OCTAL ONLY)
R0142   40  SPARE
R0143   41  SPARE
R0144   42  SPARE
R0145   43  SPARE
R0146   44  SPARE
R0147   45  SPARE
R0148   46  SPARE
R0149   47  SPARE
R0150   50  SPARE
R0151   51  SPARE
R0152   52  GYRO BIAS DRIFT                                (.BBXXXXXMILLIRAD/SEC
 0153  9)
R0154   53  GYRO INPUT AXIS ACCELERATION DRIFT             (.BBXXXXX(MILLIRAD/SE
 0155  9C)/(CM/SEC SEC))
R0156   54  GYRO SPIN AXIS ACCELERATION DRIFT              (.BBXXXXX(MILLIRAD/SE
 0157  9C)/(CM/SEC SEC))
R0158  4END OF NORMAL NOUNS
R0159   MIXED NOUNS                                        SCALE AND DECIMAL POI
 0160  9NT
R0161   55  OCDU                                           (XXX.XXDEG, XX.XXXDEG
 0162  9)
R0163   56  UNCALLED MARK DATA (OCDU & TIME(SECONDS))      (XXX.XXDEG, XX.XXXDEG
 0164  9, XXX.XXSEC)
R0165   57  NEW ANGLES OCDU                                (XXX.XXDEG, XX.XXXDEG
 0166  9)
R0167   60  IMU MODE STATUS (IN3, WASKSET, OLDERR)         (OCTAL ONLY)
R0169   61  TARGET AZIMUTH AND ELEVATION                   (XXX.XXDEG, XX.XXXDEG
 0170  9)
R0171   62  ICDUZ AND TIME                                 (XXX.XXDEG, XXX.XXSEC
 0172  9)
R0173   63  OCDUX AND TIME                                 (XXX.XXDEG, XXX.XXSEC
 0174  9)
R0175   64  OCDUY AND TIME                                 (XX.XXXDEG, XXX.XXSEC
 0176  9)
R0177   65  SAMPLED TIME (HOURS AND SECONDS)               (XXX.XXHOURS, XXX.XXS
 0178  9EC)
R01781          (FETCHED IN INTERRUPT)
R0179   66  SYSTEM TEST RESULTS                            (XXXXX., .XXXXX, XXXX
 0180  9X.)
R0181   67  DELTA GYRO ANGLES                              (XX.XXXDEG  FOR EACH)
R0182   70  PIPA BIAS                                      (X.XXXXCM/SEC SEC  FO
 0183  9R EACH)
R0184   71  PIPA SCALE FACTOR ERROR                        (XXXXX.PARTS/MILLION
 0185  9 FOR EACH)
R0186   72  DELTA POSITION                                 (XXXX.XKILOMETERS  FO
 0187  9R EACH)
R0188   73  DELTA VELOCITY                                 (XXXX.XMETERS/SEC  FO
 0189  9R EACH)
R0190   74  MEASUREMENT DATA (MIDCOURSE)                   (XXX.XXHOURS (INTERNA
 0191  9L UNITS=WEEKS), XXXX.XKILOMETERS, XXXXX.
R0192   75  MEASUREMENT DEVIATIONS (MIDCOURSE)             (XXXX.XKILOMETERS, XX
 0193  9XX.XMETERS/SEC, XXXX.XKILOMETERS)
R0194   76  POSITION VECTOR                                (XXXX.XKILOMETERS  FO
 0195  9R EACH)
R0196   77  VELOCITY VECTOR                                (XXXX.XMETERS/SEC  FO
 0197  9R EACH)
L      2ERASABLE ASSIGNMENTS
 0001   A        EQUALS 0
 0002   L        EQUALS 1               L AND Q ARE BOTH CHANNELS AND REGISTERS.
 0003   Q        EQUALS 2
 0004   EBANK    EQUALS 3
 0005   FBANK    EQUALS 4
 0006   Z        EQUALS 5               ADJACENT TO FBANK AND BBANK FOR DXCH Z
 0007   BBANK    EQUALS 6               (DTCB) AND DXCH FBANK (DTCF).
A0008  2                                REGISTER 7 IS A ZERO-SOURCE, USED BY ZL.
 0009   ARUPT    EQUALS 10              INTERRUPT STORAGE.
 0010   LRUPT    EQUALS 11
 0011   QRUPT    EQUALS 12
 0012   ZRUPT    EQUALS 15              (13 AND 14 ARE SPARES.)
 0013   BANKRUPT EQUALS 16              USUALLY HOLDS FBANK OR BBANK.
 0014  2BRUPT    EQUALS 17              RESUME ADDRESS AS WELL.
 0015   CYR      EQUALS 20
 0016   SR       EQUALS 21
 0017   CYL      EQUALS 22
 0018  4EDOP     EQUALS 23              EDITS INTERPRETIVE OPERATION CODE PAIRS.
 0019   TIME2    EQUALS 24
 0020   TIME1    EQUALS 25
 0021   TIME3    EQUALS 26
 0022   TIME4    EQUALS 27
 0023   TIME5    EQUALS 30
 0024   TIME6    EQUALS 31
 0025   CDUX     EQUALS 32
 0026   CDUY     EQUALS 33
 0027   CDUZ     EQUALS 34
 0028   OPTY     EQUALS 35
 0029   OPTX     EQUALS 36
 0030   PIPAX    EQUALS 37
 0031   PIPAY    EQUALS 40
 0032   PIPAZ    EQUALS 41
 0033   BMAGX    EQUALS 42
 0034   BMAGY    EQUALS 43
 0035   BMAGZ    EQUALS 44
 0036   INLINK   EQUALS 45
 0037   RNRAD    EQUALS 46
 0038   GYROCTR  EQUALS 47
 0039   CDUXCMD  EQUALS 50
 0040   CDUYCMD  EQUALS 51
 0041   CDUZCMD  EQUALS 52
 0042   OPTYCMD  EQUALS 53
 0043   OPTXCMD  EQUALS 54
 0044   EMSD     EQUALS 55
 0045   LEMONM   EQUALS 56
 0046   OUTLINK  EQUALS 57
 0047  2ALTM     EQUALS 60
 00472           SETLOC 67              DECODED REGISTER FOR NIGHT-WATCHMAN ALM.
 00474 2NEWJOB   ERASE
 0048   LVSQUARE EQUALS 34D             SQUARE OF VECTOR INPUT TO ABVAL AND UNIT
 0049   LV       EQUALS 36D             LENGTH OF VECTOR INPUT TO UNIT.
 0050   X1       EQUALS 38D             INTERPRETIVE SPECIAL REGISTERS RELATIVE
 0051   X2       EQUALS 39D             TO THE WORK AREA.
 0052   S1       EQUALS 40D
 0053   S2       EQUALS 41D
 0054   QPRET    EQUALS 42D
P0055  2GENERAL ERASABLE ASSIGNMENTS.
R0056  2         THE FOLLOWING ARE EXECUTIVE TEMPORARIES WHICH MAY BE USED BETWE
 0057  9EN CCS NEWJOB INQUIRIES.
 0058  2         SETLOC 100
 0059   INTB15+  ERASE                  REFLECTS 15TH BIT OF INDEXABLE ADDRESSES
 0060   DSEXIT   =      INTB15+         RETURN FOR DSPIN
 0061   EXITEM   =      INTB15+         RETURN FOR SCALE FACTOR ROUTINE SELECT
 0062  2BLANKRET =      INTB15+         RETURN FOR 2BLANK
 0063   INTBIT15 ERASE                  SIMILAR TO ABOVE.
 0064   WRDRET   =      INTBIT15        RETURN FOR 5BLANK
 0065   WDRET    =      INTBIT15        RETURN FOR DSPWD
 0066   DECRET   =      INTBIT15        RETURN FOR PUTCOM(DEC LOAD)
 0067  221/22REG =      INTBIT15        TEMP FOR CHARIN
 0068   ADDRWD   ERASE                  12 BIT INTERPRETIVE OPERAND SUB-ADDRESS.
 0069   POLISH   ERASE                  HOLDS CADR MADE FROM POLISH ADDRESS.
 0070   UPDATRET =      POLISH          RETURN FOR UPDATNN, UPDATVB
 0071   CHAR     =      POLISH          TEMP FOR CHARIN
 0072   ERCNT    =      POLISH          COUNTER FOR ERROR LIGHT RESET
 0073  2DECOUNT  =      POLISH          COUNTER FOR SCALING AND DISPLAY (DEC)
 0074  2FIXLOC   ERASE                  WORK AREA ADDRESS.
 0075  2OVFIND   ERASE                  SET NON-ZERO ON OVERFLOW.
 0076   VBUF     ERASE  +5              TEMPORARY STORAGE USED FOR VECTORS.
 0077   SGNON    =      VBUF            TEMP FOR +,- ON
 0078   NOUNTEM  =      VBUF            COUNTER FOR MIXNOUN FETCH
 0079   DISTEM   =      VBUF            COUNTER FOR OCTAL DISPLAY VERBS
 0080  2DECTEM   =      VBUF            COUNTER FOR FETCH (DEC DISPLAY VERBS)
 0081   SGNOFF   =      VBUF    +1      TEMP FOR +,- ON
 0082   NVTEMP   =      VBUF    +1      TEMP FOR NVSUB
 0083  2SFTEMP1  =      VBUF    +1      STORAGE FOR SF CONST HI PART(=SFTEMP2-1)
 0084   CODE     =      VBUF    +2      FOR DSPIN
 0085  2SFTEMP2  =      VBUF    +2      STORAGE FOR SF CONST LO PART(=SFTEMP1+1)
 0086   MIXTEMP  =      VBUF    +3      FOR MIXNOUN DATA
 0087  2SIGNRET  =      VBUF    +3      RETURN FOR +,- ON
R0088  2ALSO MIXTEMP+1 = VBUF+4, MIXTEMP+2 = VBUF+5.
 0089   BUF      ERASE  +2              TEMPORARY SCALAR STORAGE.
 0090   BUF2     ERASE  +1
 0091   INDEXLOC EQUALS BUF             CONTAINS ADDRESS OF SPECIFIED INDEX.
 0092   SWWORD   EQUALS BUF             ADDRESS OF SWITCH WORD.
 0093   SWBIT    EQUALS BUF +1          SWITCH BIT WITHIN SWITCH WORD.
 0095   MPTEMP   ERASE                  TEMPORARY USED IN MULTIPLY AND SHIFT.
 0096   DOTINC   ERASE                  COMPONENT INCREMENT FOR DOT SUBROUTINE.
 0097   DVSIGN   EQUALS DOTINC          DETERMINES SIGN OF DDV RESULT.
 0098   ESCAPE   EQUALS DOTINC          USED IN ARCSIN/ARCCOS.
 0099  2ENTRET   =      DOTINC          EXIT FROM ENTER
 0100   DOTRET   ERASE                  RETURN FROM DOT SUBROUTINE.
 0101   DVNORMCT EQUALS DOTRET          DIVIDEND NORMALIZATION COUNT IN DDV.
 0102   ESCAPE2  EQUALS DOTRET          ALTERNATE ARCSIN/ARCCOS SWITCH.
 0103   WDCNT    =      DOTRET          CHAR COUNTER FOR DSPWD
 0104  2INREL    =      DOTRET          INPUT BUFFER SELECTOR ( X,Y,Z, REG )
 0105   MATINC   ERASE                  VECTOR INCREMENT IN MXV AND VXM.
 0106   MAXDVSW  EQUALS MATINC          +0 IF DP QUOTIENT IS NEAR ONE - ELSE -1.
 0107   POLYCNT  EQUALS MATINC          POLYNOMIAL LOOP COUNTER
 01071  DSPMMTEM =      MATINC          DSPCOUNT SAVE FOR DSPMM
 0108  2MIXBR    =      MATINC          INDICATOR FOR MIXED OR NORMAL NOUN
 0109   TEM1     ERASE                  EXEC TEMP
 01095  POLYRET  =      TEM1
 0110  2DSREL    =      TEM1            REL ADDRESS FOR DSPIN
 0111   TEM2     ERASE                  EXEC TEMP
 0112   DSMAG    =      TEM2            MAGNITUDE STORE FOR DSPIN
 0113  2IDADDTEM =      TEM2            MIXNOUN INDIRECT ADDRESS STORAGE
 0114   TEM3     ERASE                  EXEC TEMP
 0115  2COUNT    =      TEM3            FOR DSPIN
 0116   TEM4     ERASE                  EXEC TEMP
 0117   LSTPTR   =      TEM4            LIST POINTER FOR GRABUSY
 0118   RELRET   =      TEM4            RETURN FOR RELDSP
 0119  2FREERET  =      TEM4            RETURN FOR FREEDSP
 0120   TEM5     ERASE                  EXEC TEMP
 0121  2NOUNADD  =      TEM5            TEMP STORAGE FOR NOUN ADDRESS
 0122   NNADTEM  ERASE                  TEMP FOR NOUN ADDRESS TABLE ENTRY
 0123   NNTYPTEM ERASE                  TEMP FOR NOUN TYPE TABLE ENTRY
 0124   IDAD1TEM ERASE                  TEMP FOR INDIR ADRESS TABLE ENTRY(MIXNN)
A0125                                   MUST = IDAD2TEM-1, = IDAD3TEM-2.
 0126   IDAD2TEM ERASE                  TEMP FOR INDIR ADRESS TABLE ENTRY(MIXNN)
A0127                                   MUST = IDAD1TEM+1, = IDAD3TEM-1.
 0128   IDAD3TEM ERASE                  TEMP FOR INDIR ADRESS TABLE ENTRY(MIXNN)
A0129                                   MUST = IDAD1TEM+2, = IDAD2TEM+1.
 0130  2RUTMXTEM ERASE                  TEMP FOR SF ROUT TABLE ENTRY(MIXNN ONLY)
R0131  2         STORAGE USED BY THE EXECUTIVE.
 0133   MPAC     ERASE  +6              MULTI-PURPOSE ACCUMULATOR.
 0134   MODE     ERASE                  +1 FOR TP, +0 FOR DP, OR -1 FOR VECTOR.
 0135   LOC      ERASE                  LOCATION ASSOCIATED WITH JOB.
 0136   BANKSET  ERASE                  USUALLY CONTAINS BBANK SETTING.
 0137   PUSHLOC  ERASE                  WORD OF PACKED INTERPRETIVE PARAMETERS.
 0138  2PRIORITY ERASE                  PRIORITY OF PRESENT JOB AND WORK AREA.
 0139  2         ERASE  +71D            SEVEN SETS OF 12 REGISTERS EACH.
 0140   VAC1USE  ERASE
 0141   VAC1     ERASE  +42D
 0142   VAC2USE  ERASE
 0143   VAC2     ERASE  +42D
 0144   VAC3USE  ERASE
 0145   VAC3     ERASE  +42D
 0146   VAC4USE  ERASE
 0147   VAC4     ERASE  +42D
 0148   VAC5USE  ERASE
 0149  2VAC5     ERASE  +42D
R0150  2         INTERPRETIVE SWITCH RESERVATIONS.
 0151  2STATE    ERASE  +3              60 SWITCHES PRESENTLY.
R0152  2         THE FOLLOWING SET COMPRISES THE INTERRUPT TEMPORARY STORAGE POO
 0153  9L.
 0154   WAITEXIT ERASE
 0155   KEYTEMP1 =      WAITEXIT        TEMP FOR KEYRUPT, UPRUPT
 0156  2DSRUPTEM =      WAITEXIT        TEMP FOR DSPOUT
 0157   WAITBANK ERASE
 0158   EXECTEM1 ERASE
 0159   EXECTEM2 ERASE
 0160   WAITADR  ERASE
 0161  2WAITTEMP ERASE
 0162   NEWPRIO  ERASE                  EXECUTIVE RESERVATIONS (TEMP ONLY).
 0163   NEWLOC   ERASE  +1
 0164  2LOCCTR   ERASE
R0165  2         WAITLIST REPEAT FLAG:
 0166   RUPTAGN  ERASE
 0167  2KEYTEMP2 =      RUPTAGN         TEMP FOR KEYRUPT, UPRUPT
P0168  4THE FOLLOWING REGISTERS ARE RESERVED FOR PINBALL
R0169  2RESERVED FOR PINBALL EXECUTIVE ACTION
 0170   DSPCOUNT ERASE                  DISPLAY POSITION INDICATOR
 0171   DECBRNCH ERASE                  +DEC, - DEC, OCT INDICATOR
 0172   VERBREG  ERASE                  VERB CODE
 0173   NOUNREG  ERASE                  NOUN CODE
 0174   XREG     ERASE                  R1 INPUT BUFFER
 0175   YREG     ERASE                  R2 INPUT BUFFER
 0176   ZREG     ERASE                  R3 INPUT BUFFER
 0177   XREGLP   ERASE                  LO PART OF XREG (FOR DEC CONV ONLY)
 0178   YREGLP   ERASE                  LO PART OF YREG (FOR DEC CONV ONLY)
 0179   ZREGLP   ERASE                  LO PART OF ZREG (FOR DEC CONV ONLY)
 0180   MODREG   ERASE                  MODE CODE
 0181   DSPLOCK  ERASE                  KEYBOARD/SUBROUTINE CALL INTERLOCK
 0182   REQRET   ERASE                  RETURN REGISTER FOR LOAD
 0183   LOADSTAT ERASE                  STATUS INDICATOR FOR LOADTST
 0184   CLPASS   ERASE                  PASS INDICATOR CLEAR
 0185   NOUT     ERASE                  ACTIVITY COUNTER FOR DSPTAB
 0186   NOUNCADR ERASE                  MACHINE CADR FOR NOUN
 0187   MONSAVE  ERASE                  N/V CODE FOR MONITOR. (= MONSAVE1-1)
 0188   MONSAVE1 ERASE                  NOUNCADR FOR MONITOR(MATBS) =MONSAVE +1
 0189   DSPTAB   ERASE  +11D            0-10D, DISPLAY PANEL BUFF. 11D, C/S LTS.
 0190   CADRSTOR ERASE                  ENDIDLE STORAGE
 0191   GRABLOCK ERASE                  INTERNAL INTERLOCK FOR DISPLAY SYSTEM
 0192   NVQTEM   ERASE                  NVSUB STORAGE FOR CALLING ADDRESS
A0193                                   MUST = NVBNKTEM-1
 0194   NVBNKTEM ERASE                  NVSUB STORAGE FOR CALLING BANK
A0195                                   MUST = NVQTEM+1
 0196   DSPLIST  ERASE          +2      WAITING LIST FOR DSP SYST INTERNAL USE
 0197   EXTVBACT ERASE                  EXTENDED VERB ACTIVITY INTERLOCK
 0198   DSPTEM1  ERASE          +2      BUFFER STORAGE AREA 1 (MOSTLY FOR TIME)
 0199   DSPTEM2  ERASE          +2      BUFFER STORAGE AREA 2 (MOSTLY FOR DEG)
R0200  4END OF ERASABLES RESERVED FOR PINBALL EXECUTIVE ACTION
R0201  2RESERVED FOR PINBALL INTERRUPT ACTION
 0202   DSPCNT   ERASE                  COUNTER FOR DSPOUT
 0203   UPLOCK   ERASE                  BIT1 = UPLINK INTERLOCK (ACTIVATED BY
A0204                                   RECEPTION OF A BAD MESSAGE IN UPLINK)
R0205  4END OF ERASABLES RESERVED FOR PINBALL INTERRUPT ACTION
P0206  2TEMPORARY PHONY ASSIGNMENTS TO KEEP PINBALL FROM HAVING BAD ASSEMBLIES
 0207   THETAD   ERASE  +2
 0209   FAILREG  ERASE
 0210   TDEC     ERASE  +1
 0211   TET      ERASE  +1
 0212   MEASQ    ERASE  +1
 0213   ROLL     ERASE  +2
 0214   LANDMARK ERASE  +5
 0215   GBIASX   ERASE  +2
 0216   ADIAX    ERASE  +2
 0217   ADSRAX   ERASE  +2
 0218   DESOPTX  ERASE  +1
 0219   SAMPTIME ERASE  +1
 0220   DELVX    ERASE  +5
 0221   PBIASX   ERASE
 02211  PIPASCFX ERASE
 0222   PBIASY   ERASE
 02221  PIPASCFY ERASE
 0223   PBIASZ   ERASE
 02231  PIPASCFZ ERASE
 0226            SETLOC 1000
 0227   DELR     ERASE  +5
 0228   DELVEL   ERASE  +5
 0229   MEASMODE ERASE
 0230   DELTAQ   ERASE  +1
 02301  WASKSET  ERASE
R0231  4END OF PHONY ASSIGNMENTS
P0232  2ASSIGNMENTS FOR T4RUPT PROGRAM
 0233   DSRUPTSW ERASE
 0234   OLDERR   ERASE
 0235   WASOPSET ERASE
R0236  4END OF T4RUPT ASSIGNMENTS
R0237  2ASSIGNMENTS FOR DOWNRUPT
 0238   DISPBUF  ERASE
 0239   TMKEYBUF ERASE
R0240  4END OF DOWNRUPT ASSIGNMENTS
R0241  2ASSIGNMENTS FOR SELF CHECK
R0242   ADDRESSES TO BE USED FOR INDEX INSTRUCTION WITHOUT EXTRACODES
 02421  NDX+0    ERASE
 024211 NDX+MAX  ERASE
 024212 NDXKEEP1 ERASE
 024213 NDXKEEP2 ERASE
 024214 NDXKEEP3 ERASE
 024215 NDXSELF1 ERASE
 0242162NDXSELF2 ERASE
 02422  KEEP1    ERASE
 024221 KEEP2    ERASE
 024222 KEEP3    ERASE
 024223 KEEP4    ERASE
 024224 KEEP5    ERASE
 024225 KEEP6    ERASE
 0242262KEEP7    ERASE
 02423  SELFRET  ERASE
 024231 SFAIL    ERASE  +1
 024232 ERCOUNT  ERASE
 024233 SCOUNT   ERASE
 0242342SMODE    ERASE
R0243  4END OF SELF CHECK ASSIGNMENTS
P02431  IMU PERFORMANCE TESTS
 02432           SETLOC 1200
 02433  CDUIND   ERASE
 02434  ITEMP1   ERASE
 02435 2COMMAND  ERASE  +2
 02436  GYRONUM  ERASE
 02437 2GYCMDIDX ERASE  +1
R02438  GYRO PULSE TORQUE COMMANDS
 02439  OGC      ERASE  +1
 024391 MGC      ERASE  +1
 0243924IGC      ERASE  +1
R0244  2         WAITLIST TASK LISTS:
 0245  2         SETLOC 1400
 0246   LST1     ERASE  +4              DELTA TS.
 0247   LST2     ERASE  +11D            2CADR TASK ADDRESSES.
L      2INPUT/OUTPUT CHANNELS
 0001   OUT0     EQUALS 10
 0002   DSALMOUT EQUALS 11
 00021  CHAN13   EQUALS 13
 0003   MNKEYIN  EQUALS 15
 0004   NAVKEYIN EQUALS 16
R0005   END OF CHANNEL ASSIGNMENTS
LINS   2INTERRUPT LEAD INS
 0001  2         SETLOC 4000
 0002            INHINT                 GO
 0003            CAF    GOBB
 0004            XCH    BBANK
 0005  2         TCF    GOPROG
 0006            DXCH   ARUPT           T6RUPT
 0007            CAF    T6RPTBB
 0008            XCH    BBANK
 0009  2         TCF    RESUME  +3      ***FIX LATER***
 0010            DXCH   ARUPT           T5RUPT
 0011            CAF    T5RPTBB
 0012            XCH    BBANK
 0013  2         TCF    RESUME  +3      ***FIX LATER***
 0014            DXCH   ARUPT           T3RUPT
 0015            CAF    T3RPTBB
 0016            XCH    BBANK
 0017  2         TCF    T3RUPT
 0018            DXCH   ARUPT           T4RUPT
 0019            CAF    T4RPTBB
 0020            XCH    BBANK
 0021  2         TCF    T4RUPT
 0022            DXCH   ARUPT           KEYRUPT1
 0023            CAF    KEYRPTBB
 0024            XCH    BBANK
 0025  2         TCF    KEYRUPT1
 0026            DXCH   ARUPT           KEYRUPT2
 0027            CAF    KEYRPTBB
 0028            XCH    BBANK
 0029  2         TCF    KEYRUPT2
 0030            DXCH   ARUPT           UPRUPT
 0031            CAF    UPRPTBB
 0032            XCH    BBANK
 0033  2         TCF    UPRUPT
 0034            DXCH   ARUPT           DOWNRUPT
 0035            CAF    DWNRPTBB
 0036            XCH    BBANK
 0037  2         TCF    RESUME  +3      ***FIX LATER***
 0038  2         RESUME                 RADAR RUPT    ****FIX LATER******
 0039  2         SETLOC 4050
 0040  4         RESUME                 HAND CONTROL RUPT   ***FIX LATER****
 0041  2         SETLOC 4054
 0042            EBANK= LST1            RESTART USES E0, E3
 0043  2GOBB     BBCON  GOPROG
 0044            EBANK= TIME1
 0045  2T6RPTBB  BBCON  RESUME          ***FIX LATER***
 0046            EBANK= TIME1
 0047  2T5RPTBB  BBCON  RESUME          ***FIX LATER***
 0048            EBANK= LST1
 0049  2T3RPTBB  BBCON  T3RUPT
 0050            EBANK= DSRUPTSW
 0051  2T4RPTBB  BBCON  T4RUPT
 0052            EBANK= KEYTEMP1
 0053  2KEYRPTBB BBCON  KEYRUPT1
 0054  2UPRPTBB  =      KEYRPTBB
 0055            EBANK= TIME1
 0056  2DWNRPTBB BBCON  RESUME          ***FIX LATER ***
 0057   ENDINTFF EQUALS
L      2LIST-PROCESSING INTERPRETER
R0001  2SECTION 1  DISPATCHER
R0002            ENTRY TO THE INTERPRETER. INTPRET SETS LOC TO THE FIRST  INSTRU
 0003  9CTION, BANKSET TO THE FBANK OF THE
R0004   OBJECT INTERPRETIVE PROGRAM, AND INTBIT15 TO THE BIT15 CONTENTS OF FBANK
 0005  9. INTERPRETIVE PROGRAMS MAY BE IN
R0006   VIRTUALLY ALL BANKS PRESENT UNDER ANY SUPER-BANK SETTING, WITH THE RESTR
 0007  9ICTION THAT PROGRAMS IN HIGH BANKS
R0008   (BIT15 OF FBANK = 1) DO NOT REFER TO LOWBANKS, AND VICE-VERSA. THE INTER
 0009  9PRETER DOES NOT SWITCH SUPER-BANK,
R0010  4NOR DOES IT SWITCH EBANKS. MOST EBANK SWITCHING IS DONE BY THE EXECUTIVE
 0011  9 PROGRAM.
 0012  2         SETLOC 6000
 0013   INTPRET  EXTEND                 SET LOC TO THE WORD FOLLOWING THE TC.
 0014  2         QXCH   LOC
 0015    +2      CA     FBANK           INTERPRETIVE BRANCHES FINISH HERE.
 0016            TS     BANKSET
 0017            MASK   BIT15           GET 15TH BIT FOR INDEXABLE ADDRESSES.
 0018            TS     INTBIT15
 0019            AD     LOW10           THIS VERSION IS USED IN PROCESSING
 0020  2         TS     INTB15+         INDEXABLE FIXED-BANK ADDRESSES.
 0021  4         TCF    NEWOPS          PICK UP OP CODE PAIR AND BEGIN.
 0022   INTRSM   LXCH   BBANK           RESUME SUSPENDED INTERPRETIVE JOB
 0023            TCF    DANZIG +3       (ACTUALLY PART OF THE EXECUTIVE).
P0024  2         AT THE END OF MOST INSTRUCTIONS, CONTROL IS GIVEN TO DANZIG TO
 0025  9DISPATCH THE NEXT OPERATION.
 0026  2NEWMODE  TS     MODE            PROLOGUE FOR MODE-CHANGING INSTRUCTIONS.
 0027   DANZIG   CA     BANKSET         SET FBANK BEFORE TESTING NEWJOB SO THAT
 0028  2         TS     FBANK           BBANK MAY BE SAVED DIRECTLY BY CHANJOB.
 0029            CCS    EDOP            SEE IF AN ORDER CODE IS LEFT OVER FROM
 0030            TCF    OPJUMP          THE LAST PAIR RETRIEVED. IF SO, EXECUTE.
A0031  2                                EDOP IS SET TO ZERO ON ITS RE-EDITING.
 0032            CCS    NEWJOB          SEE IF A JOB OF HIGHER PRIORITY IS
 0033  2         TCF    CHANG2          PRESENT, AND IF SO, CHANGE JOBS.
 0034            INCR   LOC             ADVANCE THE LOCATION COUNTER.
 0035   NEWOPS   INDEX  LOC             ENTRY TO BEGIN BY PICKING OP CODE PAIR.
 0036            CA     0               MAY BE AN OPCODE PAIR OR A STORE CODE.
 0037            CCS    A               TEST SIGN AND GET DABS(A).
 0038  2         TCF    DOSTORE         PROCESS STORE CODE.
 0039  2LOW7     OCT    177
 0040            TS     EDOP            OP CODE PAIR. LEAVE THE OTHER IN EDOP
 0041  2         MASK   LOW7            WHERE  CCS EDOP  WILL HONOR IT NEXT.
 0042   OPJUMP   TS     CYR             LOWWD ENTERS HERE IF A RIGHT-HAND OP
 0043            CCS    CYR             CODE IS TO BE PROCESSED. TEST PREFICES.
 0044  2         TCF    OPJUMP2         TEST SECOND PREFIX BIT.
 0045            TCF    EXIT            +0 OP CODE IS EXIT.
P0046  2         PROCESS ADDRESSES WHICH MAY BE DIRECT, INDEXED, OR REFERENCE TH
 0047  9E PUSHDOWN LIST.
 0048   ADDRESS  MASK   BIT1            SEE IF ADDRESS IS INDEXED. CYR CONTAINED
 0049            CCS    A               400XX, SO BIT 1 IS NOW AS IT WAS IN CYR.
 0050  2         TCF    INDEX           FORM INDEXED ADDRESS.
 0051   DIRADRES INDEX  LOC             LOOK AHEAD TO NEXT WORD TO SEE IF
 0052   OCT40001 CS     1               ADDRESS IS GIVEN.
 0053            CCS    A
 0054  2         TCF    PUSHUP          IF NOT.
 0055  2NEG4     DEC    -4
 0056            INCR   LOC             IF SO, TO SHOW WE PICKED UP A WORD.
 0057            TS     ADDRWD
P0058            FINAL DIGESTION OF DIRECT ADDRESSES OF OP CODES WITH 01 PREFIX
 0059  9IS DONE HERE. IN EACH CASE, THE
R0060   REQUIRED 12 BIT SUB-ADDRESS IS LEFT IN ADDRWD, WITH ANY REQUIRED BANK SW
 0061  9ITCHING DONE (F ONLY). ADDRESSES LESS
R0062  4THAN 45D ARE TAKEN TO BE RELATIVE TO THE WORK AREA. THE OP CODE IS NOW I
 0063  9N BITS 1-5 OF CYR WITH BIT 14 = 1.
 0064            AD     -ENDVAC         SEE IF ADDRESS RELATIVE TO WORK AREA.
 0065            CCS    A
 0066            AD     -ENDERAS        IF NOT, SEE IF IN GENERAL ERASABLE.
 0067  2         TCF    IERASTST
 0068   NETZERO  CA     FIXLOC          IF SO, LEAVE THE MODIFIED ADDRESS IN
 0069            ADS    ADDRWD          ADDRWD AND DISPATCH.
 0070    +2      INDEX  CYR             THIS INDEX MAKES THE NEXT INSTRUCTION
 0071  2         7      INDJUMP -1      TCF INDJUMP + OP, EDITING CYR.
 0072   IERASTST EXTEND
 0073  2         BZMF   NETZERO +2      GENERAL ERASABLE - DISPATCH IMMEDIATELY.
 0074   FIXEDADR AD     INTB15+         FIXED BANK ADDRESS. RESTORE AND ADD B15.
 0075    +1      TS     FBANK           SWITCH BANKS AND LEAVE SUB-ADDRESS IN
 0076            MASK   LOW10           ADDRWD FOR OPERAND RETRIEVAL.
 0077            AD     2K
 0078            TS     ADDRWD
 0079            INDEX  CYR
 0080            7      INDJUMP -1
P0081            THE FOLLOWING ROUTINE PROCESSES INTERPRETIVE INDEXED ADDRESSES.
 0082  9 AN INTERPRETER INDEX REGISTER MAY
R0083   CONTAIN THE ADDRESS OF ANY ERASABLE REGISTER (0-42 BEING RELATIVE TO THE
 0084  9 VAC AREA) OR ANY INTERPRETIVE PROGRAM
R0085  2BANK, OR ANY INTEGER IN THAT RANGE.
 0086   DODLOAD* CAF    DLOAD*          STODL* COMES HERE TO PROCESS LOAD ADR.
 0087  2         TS     CYR             (STOVL* ENTERS HERE).
 0088   INDEX    CA     FIXLOC          SET UP INDEX LOCATION.
 0089            TS     INDEXLOC
 0090            INCR   LOC             (ADDRESS ALWAYS GIVEN).
 0091            INDEX  LOC
 0092            CS     0
 0093            CCS    A               INDEX 2 IF ADDRESS STORED COMPLEMENTED.
 0094            INCR   INDEXLOC
 0095  2         NOOP
 0096            TS     ADDRWD          14 BIT ADDRESS TO ADDRWD.
 0097            MASK   BANKMASK        IF ADDRESS GREATER THAN 1K, ADD INTBIT15
 0098            EXTEND
 0099            BZF    INDEX2
 0100            CA     INTBIT15
 0101  2         ADS    ADDRWD
 0102   INDEX2   INDEX  INDEXLOC
 0103            CS     X1
 0104  2         ADS    ADDRWD          DO AUGMENT, IGNORING AND CORRECTING OVF.
 0105            MASK   HIGH9           SEE IF ADDRESS IS IN WORK AREA.
 0106            EXTEND
 0107            BZF    INDWORK
 0108            MASK   BANKMASK        SEE IF IN FIXED BANK.
 0109            EXTEND
 0110  2         BZF    INDERASE
 0111            CA     ADDRWD          IN FIXED - SWITCH BANKS AND CREATE
 0112            TS     FBANK           SUB-ADDRESS.
 0113            MASK   LOW10
 0114            AD     2K
 0115            TS     ADDRWD
 0116            INDEX  CYR
 0117  2         3      INDJUMP -1
 0118   INDWORK  CA     FIXLOC          MAKE ADDRWD RELATIVE TO WORK AREA.
 0119  2         ADS    ADDRWD
 0120   INDERASE INDEX  CYR
 0121            3      INDJUMP -1
P0122            PUSH-UP ROUTINES. WHEN NO OPERAND ADDRESS IS GIVEN, THE APPROPR
 0123  9IATE OPERAND IS TAKEN FROM THE PUSH-DOWN
R0124   LIST. IN MOST CASES THE MODE OF THE RESULT (VECTOR OR SCALAR) OF THE LAS
 0125  9T ARITHMETIC OPERATION PERFORMED
R0126   IS THE SAME AS THE TYPE OF OPERAND DESIRED (ALL ADD/SUBTRACT ETC.). EXCE
 0127  9PTIONS TO THIS GENERAL RULE ARE LISTED
R0128  2BELOW (NOTE THAT IN EVERY CASE THE MODE REGISTER IS LEFT INTACT):
R0129            1.  VXSC AND V/SC WANT THE OPPOSITE TYPE OF OPERAND, E.G., IF T
 0130  9HE LAST OPERATION YIELDED A VECTOR
R0131  2RESULT, VXSC WANTS A SCALAR.
R0132            2.  THE LOAD CODES SHOULD LOAD THE ACCUMULATOR INDEPENDENT OF T
 0133  9HE RESULT OF THE LAST OPERATION. THIS
R0134  2INCLUDES VLOAD, DLOAD, TLOAD, PDDL, AND PDVL (NO PUSHUP WITH SLOAD).
R0135            3.  SOME ARITHMETIC OPERATIONS REQUIRE A STANDARD TYPE OF OPERA
 0136  9ND REGARDLESS OF THE PREVIOUS OPERATION.
R0137  2THIS INCLUDES SIGN WANTING DP AND TAD REQUIRING TP.
 0138   PUSHUP   CAF    OCT23           IF THE LOW 5 BITS OF CYR ARE LESS THAN
 0139            MASK   CYR             20, THIS OP REQUIRES SPECIAL ATTENTION.
 0140            AD     -OCT10          (NO -0).
 0141            CCS    A
 0142  2         TCF    REGUP           FOR ALL CODES GREATER THAN OCT 7.
 0143  2-OCT10   OCT    -10
 0144            AD     NEG4            WE NOW HAVE 7 - OP CODE(MOD4). SEE IF
 0145            CCS    A               THE OP CODE (MOD4) IS THREE (REVERSE).
 0146            INDEX  A               NO - THE MODE IS DEFINITE. PICK UP THE
 0147            CS     NO.WDS
 0148  2         TCF    REGUP +2
 0149            INDEX  MODE            FOR VXSC AND V/SC WE WANT THE REQUIRED
 0150            CS     REVCNT          PUSHLOC DECREMENT WITHOUT CHANGING THE
 0151  2         TCF    REGUP +2        MODE AT THIS TIME.
 0152   REGUP    INDEX  MODE            MOST ALL OP CODES PUSHUP HERE.
 0153            CS     NO.WDS
 0154    +2      ADS    PUSHLOC
 0155            TS     ADDRWD
 0156            INDEX  CYR
 0157  2         7      INDJUMP -1      (THE INDEX MAKES THIS A TCF.)
 0158            OCT    2               REVERSE PUSHUP DECREMENT. VECTOR TAKES 2
 0159   REVCNT   OCT    6               WORDS, SCALAR TAKES 6.
 0160            OCT    6
 0161   NO.WDS   OCT    2               CONVENTIONAL DECREMENT IS 6 WORDS VECTOR
 0162            OCT    3               2 IN DP, AND 3 IN TP.
 0163            OCT    6
P0164  2         TEST THE SECOND PREFIX BIT TO SEE IF THIS IS A MISCELLANEOUS OR
 0165  9 A UNARY/SHORT SHIFT OPERATION.
 0166   OPJUMP2  CCS    CYR             TEST SECOND PREFIX BIT.
 0167  2         TCF    OPJUMP3         TEST THIRD BIT TO SEE IF UNARY OR SHIFT.
 0168  2-ENDVAC  DEC    -45
R0169            THE FOLLOWING ROUTINE PROCESSES ADDRESSES OF SUFFIX CLASS 10. T
 0170  9HEY ARE BASICALLY WORK AREA ADDRESSES
R0171   IN THE RANGE 0 - 52, ERASABLE ADRES CONSTANTS FROM 100 - 1777, AND FCADR
 0172  9S ABOVE THAT. ALL 15 BITS ARE AVAILABLE
R0173  2IN CONTRAST TO SUFFIX 1, IN WHICH ONLY THE LOW ORDER 14 ARE AVAILABLE.
 0174   15BITADR INCR   LOC             (ENTRY HERE FROM STCALL).
 0175            INDEX  LOC             PICK UP ADDRESS WORD.
 0176            CA     0
 0177            TS     POLISH          THE ABSOLUTE ADDRESS WILL BE LEFT IN
 0178            TS     ADDRWD          POLISH WITH AN ERASABLE SUBADDRESS IN
A0179                                   ADDRWD.
 0180            MASK   HIGH9           SEE IF RELATIVE TO THE WORK AREA.
 0181            CCS    A
 0182            TCF    +2
 0183  2         TCF    RELWORK         ONLY IF ZERO.
 0184            CAF    LOW7+2K         THESE INSTRUCTIONS ARE IN BANK 1.
 0185            TS     FBANK
 0186            MASK   CYR
 0187            INDEX  A
 0188  2         TCF    MISCJUMP
 0189   RELWORK  CA     FIXLOC          MAKE ADDRWD RELATIVE TO FIXLOC, LEAVING
 0190            ADS    ADDRWD          POLISH ABSOLUTE IN CASE THIS WAS AN
 0191            CAF    LOW7+2K         AXT, ETC.
 0192            TS     FBANK
 0193            MASK   CYR
 0194            INDEX  A
 0195            TCF    MISCJUMP
P0196  2         COMPLETE THE DISPATCHING OF UNARY AND SHORT SHIFT OPERATIONS.
 0197   OPJUMP3  TS     FBANK           CALL IN BANK 0 (BITS 11-15 OF A ARE 0.)
 0198            CCS    CYR             TEST THIRD PREFIX BIT.
 0199            INDEX  A               THE DECREMENTED UNARY CODE IS IN BITS
 0200  2         TCF    UNAJUMP         1-4 OF A (ZERO, EXIT, HAS BEEN DETECTED)
 0201            CCS    MODE            ITS A SHORT SHIFT CODE. SEE IF PRESENT
 0202            TCF    SHORTT          SCALAR OR VECTOR.
 0203            TCF    SHORTT
 0204  4         TCF    SHORTV          CALLS THE APPROPRIATE ROUTINE.
 0205   OCT23    OCT    23              MASK USED BY PUSH-UP ROUTINE.
 0206   LOW7+2K  OCT    2177            OP CODE MASK + BANK 1 FBANK SETTING.
 0207   HIGH9    OCT    77700
 0208   BANKMASK OCT    76000           FBANK MASK.
 0209   FBANKMSK EQUALS BANKMASK
 0210   B11T14   OCT    36000           USED IN PROCESSING STORE CODES.
 0211   -ENDERAS DEC    -977
P0212  2         THE FOLLOWING IS THE JUMP TABLE FOR OP CODES WHICH MAY HAVE IND
 0213  9EXABLE ADDRESSES OR MAY PUSH UP.
 0214   INDJUMP  TCF    VLOAD           00 - LOAD MPAC WITH A VECTOR.
 0215            TCF    TAD             01 - TRIPLE PRECISION ADD TO MPAC.
 0216            TCF    SIGN            02 - COMPLEMENT MPAC (V OR SC) IF X NEG.
 0217            TCF    VXSC            03 - VECTOR TIMES SCALAR.
 0218            TCF    CGOTO           04 - COMPUTED GO TO.
 0219            TCF    TLOAD           05 - LOAD MPAC WITH TRIPLE PRECISION.
 0220            TCF    DLOAD           06 - LOAD MPAC WITH A DP SCALAR.
 0221  2         TCF    V/SC            07 - VECTOR DIVIDED BY SCALAR.
 0222            TCF    SLOAD           10 - LOAD MPAC IN SINGLE PRECISION.
 0223            TCF    SSP             11 - SET SINGLE PRECISION INTO X.
 0224            TCF    PDDL            12 - PUSH DOWN MPAC AND RE-LOAD IN DP.
 0225            TCF    MXV             13 - MATRIX POST-MULTIPLIED BY VECTOR.
 0226            TCF    PDVL            14 - PUSH DOWN AND VECTOR LOAD.
 0227            TCF    CCALL           15 - COMPUTED CALL.
 0228            TCF    VXM             16 - MATRIX PRE-MULTIPLIED BY VECTOR.
 0229  2         TCF    TSLC            17 - NORMALIZE MPAC (SCALAR ONLY).
 0230            TCF    DMPR            20 - DP MULTIPLY AND ROUND.
 0231            TCF    DDV             21 - DP DIVIDE BY.
 0232            TCF    BDDV            22 - DP DIVIDE INTO.
 0233            TCF    GSHIFT          23 - GENERAL SHIFT INSTRUCTION.
 0234            TCF    VAD             24 - VECTOR ADD.
 0235            TCF    VSU             25 - VECTOR SUBTRACT.
 0236            TCF    BVSU            26 - VECTOR SUBTRACT FROM.
 0237  2         TCF    DOT             27 - VECTOR DOT PRODUCT.
 0238            TCF    VXV             30 - VECTOR CROSS PRODUCT.
 0239            TCF    VPROJ           31 - VECTOR PROJECTION.
 0240            TCF    DSU             32 - DP SUBTRACT.
 0241            TCF    BDSU            33 - DP SUBTRACT FROM.
 0242            TCF    DAD             34 - DP ADD.
 0243            TCF                    35 - AVAILABLE
 0244            TCF    DMP1            36 - DP MULTIPLY.
 0245  2         TCF    SETPD           37 - SET PUSH DOWN POINTER (DIRECT ONLY)
R0246   CODES 10 AND 14 MUST NOT PUSH UP. CODE 04 MAY BE USED FOR VECTOR DECLARE
 0247  9 BEFORE PUSHUP IF DESIRED.
P0248  2         THE FOLLOWING JUMP TABLE APPLIES TO INDEX, BRANCH, AND MISCELLA
 0249  9NEOUS INSTRUCTIONS.
 0250   MISCJUMP TCF    AXT             00 - ADDRESS TO INDEX TRUE.
 0251            TCF    AXC             01 - ADDRESS TO INDEX COMPLEMENTED.
 0252            TCF    LXA             02 - LOAD INDEX FROM ERASABLE.
 0253            TCF    LXC             03 - LOAD INDEX FROM COMPLEMENT OF ERAS.
 0254            TCF    SXA             04 - STORE INDEX IN ERASABLE.
 0255            TCF    XCHX            05 - EXCHANGE INDEX WITH ERASABLE.
 0256            TCF    INCR            06 - INCREMENT INDEX REGISTER.
 0257  2         TCF    TIX             07 - TRANSFER ON INDEX.
 0258            TCF    XAD             10 - INDEX REGISTER ADD FROM ERASABLE.
 0259            TCF    XSU             11 - INDEX SUBTRACT FROM ERASABLE.
 0260            TCF    BZE/GOTO        12 - BRANCH ZERO AND GOTO.
 0261            TCF    BPL/BMN         13 - BRANCH PLUS AND BRANCH MINUS.
 0262            TCF    CALL/ITA        14 - CALL AND STORE QPRET.
 0263            TCF    RTB/BHIZ        15 - RETURN TO BASIC AND BRANCH HI ZERO.
 0264            TCF    SW/             16 - SWITCH INSTRUCTIONS AND AVAILABLE.
 0265            TCF    BOV(B)          17 - BRANCH ON OVERFLOW TO BASIC OR INT.
P0266  2         THE FOLLOWING JUMP TABLE APPIES TO UNARY INSTRUCTIONS.
A0267                                   00 - EXIT - DETECTED EARLIER.
 0268   UNAJUMP  TCF    SQRT            01 - SQUARE ROOT.
 0269            TCF    SINE            02 - SIN.
 0270            TCF    COSINE          03 - COS.
 0271            TCF    ARCSIN          04 - ARC SIN.
 0272            TCF    ARCCOS          05 - ARC COS.
 0273            TCF    DSQ             06 - DP SQUARE.
 0274  2         TCF    ROUND           07 - ROUND TO DP.
 0275            TCF    COMP            10 - COMPLEMENT VECTOR OR SCALAR.
 0276            TCF    VDEF            11 - VECTOR DEFINE.
 0277            TCF    UNIT            12 - UNIT VECTOR.
 0278            TCF    ABVALABS        13 - LENGTH OF VECTOR OR MAG OF SCALAR.
 0279            TCF    VSQ             14 - SQUARE OF LENGTH OF VECTOR.
 0280            TCF    STADR           15 - PUSH UP ON STORE CODE.
 0281            TCF    RVQ             16 - RETURN VIA QPRET.
 0282            TCF    PUSH            17 - PUSH MPAC DOWN.
P0283  2SECTION 2  LOAD AND STORE PACKAGE.
R0284            A SET OF SIXTEEN STORE CODES ARE PROVIDED AS THE PRIMARY METHOD
 0285  9 OF STORING THE MULTI-PURPOSE
R0286   ACCUMULATOR (MPAC). IF IN THE DANZIG SECTION LOC REFERS TO AN ALGEBRAICA
 0287  9LLY POSITIVE WORD, IT IS TAKEN AS A
R0288   STORE CODE WITH A CORRESPONDING ERASABLE ADDRESS. MOST OF THESE CODES AR
 0289  9E TWO ADDRESS, SPECIFYING THAT THE WORD
R0290  2FOLLOWING THE STORE CODE IS TO BE USED AS AN ADDRESS FROM WHICH TO RE-LO
 0291  9AD MPAC. FOUR OPTIONS ARE AVAILABLE:
R0292            1. STORE               STORE MPAC. THE E ADDRESS MAY BE INDEXED
 0293  9.
R0294            2. STODL               STORE MPAC AND RE-LOAD IT IN DP WITH THE
 0295  9 NEXT ADDRESS (EITHER MAY BE INDEXED).
R0296            3. STOVL               STORE MPAC AND RE-LOAD A VECTOR (AS ABOV
 0297  9E).
R0298  2         4. STCALL              STORE AND DO A CALL (BOTH ADDRESSES MUST
 0299  9 BE DIRECT HERE).
R0300  4         STODL AND STOVL WILL TAKE FROM THE PUSH-DOWN LIST IF NO LOAD AD
 0301  9DRESS IS GIVEN.
 0302   STADR    CA     BANKSET         THE STADR CODE (PUSHUP UP ON STORE
 0303            TS     FBANK           ADDRESS) ENTERS HERE.
 0304            INCR   LOC
 0305            INDEX  LOC             THE STORE CODE WAS STORE COMPLEMENTED TO
 0306  2         CS     0               MAKE IT LOOK LIKE AN OPCODE PAIR.
 0307   DOSTORE  TS     ADDRWD
 0308            MASK   LOW10           ENTRY FROM DISPATCHER. SAVE THE ERASABLE
 0309            XCH    ADDRWD          ADDRESS AND JUMP ON THE STORE CODE NO.
 0310            MASK   B11T14
 0311            EXTEND
 0312            MP     BIT6            EACH TRANSFER VECTOR ENTRY IS TWO WORDS.
 0313            INDEX  A
 0314            TCF    STORJUMP
P0315            STORE CODE JUMP TABLE. CALLS THE APPROPRIATE STORING ROUTINE AN
 0316  9D EXITS TO DANZIG OR TO ADDRESS WITH
R0317  2A SUPPLIED OPERATION CODE.
 0318   STORJUMP TC     STORE           STORE.
 0319            TCF    NEWOPS -1       PICK UP NEW OP CODE(S).
 0320            TC     STORE,1
 0321            TCF    NEWOPS -1
 0322            TC     STORE,2
 0323  2         TCF    NEWOPS -1
 0324            TC     STORE           STODL.
 0325            TCF    DODLOAD
 0326            TC     STORE,1
 0327            TCF    DODLOAD
 0328            TC     STORE,2
 0329  2         TCF    DODLOAD
 0330            TC     STORE           STODL WITH INDEXED LOAD ADDRESS.
 0331            TCF    DODLOAD*
 0332            TC     STORE,1
 0333            TCF    DODLOAD*
 0334            TC     STORE,2
 0335  2         TCF    DODLOAD*
 0336            TC     STORE           STOVL.
 0337            TCF    DOVLOAD
 0338            TC     STORE,1
 0339            TCF    DOVLOAD
 0340            TC     STORE,2
 0341  2         TCF    DOVLOAD
 0342            TC     STORE           STOVL WITH INDEXED LOAD ADDRESS.
 0343            TCF    DOVLOAD*
 0344            TC     STORE,1
 0345            TCF    DOVLOAD*
 0346            TC     STORE,2
 0347  2         TCF    DOVLOAD*
 0348            TC     STORE           STOTC.
 0349            CAF    CALLCODE
 0350            TS     CYR
 0351            TCF    15BITADR        GET A 15 BIT ADDRESS.
P0352  2         STORE CODE ADDRESS PROCESSOR.
 0353   STORE,1  INDEX  FIXLOC
 0354            CS     X1
 0355  2         TCF    PRESTORE
 0356   STORE,2  INDEX  FIXLOC
 0357            CS     X2
 0358  2PRESTORE ADS    ADDRWD          RESULTANT ADDRESS IS IN ERASABLE.
 0359   STORE    CA     ADDRWD          SEE IF ADDRESS RELATIVE TO WORK AREA.
 0360            AD     -ENDVAC
 0361            CCS    A
 0362  2         TCF    STARTSTO        ADDRESS OK AS IS.
 0363  2LOW10    OCT    1777
 0364            CA     FIXLOC          GIVEN ADDRESS IS RELATIVE TO WORK AREA.
 0365            ADS    ADDRWD
P0366  2         STORING ROUTINES. STORE DP, TP, OR VECTOR AS INDICATED BY MODE.
 0367   STARTSTO EXTEND                 MPAC,+1 MUST BE STORED IN ANY EVENT.
 0368            DCA    MPAC
 0369            INDEX  ADDRWD
 0370  2         DXCH   0
 0371            CCS    MODE
 0372            TCF    TSTORE
 0373  2         TC     Q
 0374   VSTORE   EXTEND
 0375            DCA    MPAC +3
 0376            INDEX  ADDRWD
 0377  2         DXCH   2
 0378            EXTEND
 0379            DCA    MPAC +5
 0380            INDEX  ADDRWD
 0381            DXCH   4
 0382  2         TC     Q
 0383   TSTORE   CA     MPAC +2
 0384            INDEX  ADDRWD
 0385            TS     2
 0386            TC     Q
P0387            ROUTINES TO BEGIN PROCESSING OF THE SECOND ADDRESS ASSOCIATED W
 0388  9ITH ALL STORE-TYPE CODES EXCEPT STORE
R0389  2ITSELF.
 0390   DODLOAD  CAF    DLOADCOD
 0391            TS     CYR
 0392  2         TCF    DIRADRES        GO GET A DIRECT ADDRESS.
 0393   DOVLOAD  CAF    VLOADCOD
 0394            TS     CYR
 0395  2         TCF    DIRADRES
 0396   DOVLOAD* CAF    VLOAD*
 0397            TCF    DODLOAD* +1     PROLOGUE TO INDEX ROUTINE.
P0398  2         THE FOLLOWING LOAD INSTRUCTIONS ARE PROVIDED FOR LOADING THE MU
 0399  9LTI-PURPOSE ACCUMULATOR MPAC.
 0400   DLOAD    EXTEND
 0401            INDEX  ADDRWD
 0402            DCA    0               PICK UP DP ARGUMENT AND LEAVE IT IN
 0403   SLOAD2   DXCH   MPAC            MPAC,+1, SETTING MPAC +2 TO ZERO. THE
 0404            CAF    ZERO            CONTENTS OF THE OTHER FOUR REGISTERS OF
 0405            TS     MPAC +2         MPAC ARE IRRELEVANT.
 0406  2         TCF    NEWMODE         DECLARE DOUBLE PRECISION MODE.
 0407   TLOAD    INDEX  ADDRWD
 0408            CA     2               LOAD A TRIPLE PRECISION ARGUMENT INTO
 0409            TS     MPAC +2         THE FIRST THREE MPAC REGISTERS, WITH THE
 0410            EXTEND                 CONTENTS OF THE OTHER FOUR IRRELEVANT.
 0411            INDEX  ADDRWD
 0412            DCA    0
 0413            DXCH   MPAC
 0414            CAF    ONE
 0415  2         TCF    NEWMODE         DECLARE TRIPLE PRECISION MODE.
 0416   SLOAD    ZL                     LOAD A SINGLE PRECISION NUMBER INTO
 0417            INDEX  ADDRWD          MPAC, SETTING MPAC+1,2 TO ZERO. THE
 0418            CA     0               CONTENTS OF THE REMAINING MPAC REGISTERS
 0419  2         TCF    SLOAD2          ARE IRRELEVANT.
 0420   VLOAD    EXTEND                 LOAD A DOUBLE PRECISION VECTOR INTO
 0421            INDEX  ADDRWD          MPAC,+1, MPAC+3,4, AND MPAC+5,6. THE
 0422            DCA    0               CONTENTS OF MPAC +2 ARE IRRELEVANT.
 0423  2         DXCH   MPAC
 0424   ENDVLOAD EXTEND                 PDVL COMES HERE TO FINISH UP FOR DP, TP.
 0425            INDEX  ADDRWD
 0426            DCA    2
 0427  2         DXCH   MPAC +3
 0428    +4      EXTEND                 TPDVL FINISHES HERE.
 0429            INDEX  ADDRWD
 0430            DCA    4
 0431  2         DXCH   MPAC +5
 0432            CS     ONE             DECLARE VECTOR MODE.
 0433            TCF    NEWMODE
P0434  2         THE FOLLOWING INSTRUCTIONS ARE PROVIDED FOR STORING OPERANDS IN
 0435  9 THE PUSHDOWN LIST:
R0436            1.  PUSH               PUSHDOWN AND NO LOAD.
R0437            2.  PDDL               PUSHDOWN AND DOUBLE PRECISION LOAD.
R0438  2         3.  PDVL               PUSHDOWN AND VECTOR LOAD.
 0439   PDDL     EXTEND
 0440            INDEX  ADDRWD          LOAD MPAC,+1, PUSHING THE FORMER
 0441            DCA    0               CONTENTS DOWN.
 0442            DXCH   MPAC
 0443            INDEX  PUSHLOC
 0444  2         DXCH   0
 0445            INDEX  MODE            ADVANCE THE PUSHDOWN POINTER APPRO-
 0446            CAF    NO.WDS          PRIATELY.
 0447  2         ADS    PUSHLOC
 0448            CCS    MODE
 0449            TCF    ENDTPUSH
 0450  2         TCF    ENDDPUSH
 0451            TS     MODE            NOW DP.
 0452   ENDVPUSH TS     MPAC +2
 0453            DXCH   MPAC +3         PUSH DOWN THE REST OF THE VECTOR HERE.
 0454            INDEX  PUSHLOC
 0455  2         DXCH   0 -4
 0456            DXCH   MPAC +5
 0457            INDEX  PUSHLOC
 0458  2         DXCH   0 -2
 0459  2         TCF    DANZIG
 0460   ENDDPUSH TS     MPAC +2         SET MPAC +2 TO ZERO AND EXIT ON DP.
 0461  2         TCF    DANZIG
 0462   ENDTPUSH TS     MODE
 0463            XCH    MPAC +2         ON TRIPLE, SET MPAC +2 TO ZERO, PUSHING
 0464    +2      INDEX  PUSHLOC         DOWN THE OLD CONTENTS
 0465            TS     0 -1
 0466            TCF    DANZIG
P0467  2         PDVL - PUSHDOWN AND VECTOR LOAD.
 0468   PDVL     EXTEND                 RELOAD MPAC AND PUSH DOWN ITS CONTENTS.
 0469            INDEX  ADDRWD
 0470            DCA    0
 0471            DXCH   MPAC
 0472            INDEX  PUSHLOC
 0473  2         DXCH   0
 0474            INDEX  MODE            ADVANCE THE PUSHDOWN POINTER.
 0475            CAF    NO.WDS
 0476  2         ADS    PUSHLOC
 0477            CCS    MODE            TEST PAST MODE.
 0478            TCF    TPDVL
 0479  2         TCF    ENDVLOAD        JUST LOAD LAST FOUR REGISTERS ON DP.
 0480   VPDVL    EXTEND                 PUSHDOWN AND RE-LOAD LAST TWO COMPONENTS
 0481            INDEX  ADDRWD
 0482            DCA    2
 0483            DXCH   MPAC +3
 0484            INDEX  PUSHLOC
 0485  2         DXCH   0 -4
 0486            EXTEND
 0487            INDEX  ADDRWD
 0488            DCA    4
 0489            DXCH   MPAC +5
 0490            INDEX  PUSHLOC
 0491  2         DXCH   0 -2
 0492  2         TCF    DANZIG
 0493   TPDVL    EXTEND                 ON TP, WE MUST LOAD THE Y COMPONENT
 04931           INDEX  ADDRWD          BEFORE STORING MPAC +2 INCASE THIS IS A
 04932           DCA    2               PUSHUP.
 04933 2         DXCH   MPAC +3
 04934           CA     MPAC +2
 0494            INDEX  PUSHLOC         IN DP.
 0495            TS     0 -1
 0496  2         TCF    ENDVLOAD +4
R0497  2         SSP (STORE SINGLE PRECISION) IS EXECUTED HERE.
 0498   SSP      INCR   LOC             PICK UP THE WORD FOLLOWING THE GIVEN
 0499            INDEX  LOC             ADDRESS AND STORE IT AT X.
 0500            CA     0
 0501   STORE1   INDEX  ADDRWD          SOME INDEX AND MISCELLANEOUS OPS END
 0502            TS     0               HERE.
 0503            TCF    DANZIG
P0504  2SEQUENCE CHANGING AND SUBROUTINE CALLING OPTIONS.
R0505  2         THE FOLLOWING OPERATIONS ARE AVAILABLE FOR SEQUENCING CHANGING,
 0506  9 BRANCHING, AND CALLING SUBROUTINES:
R0507            1.  GOTO               GO TO.
R0508            2.  CALL               CALL SUBROUTINE SETTING QPRET.
R0509            3.  CGOTO              COMPUTED GO TO.
R0510            4.  CCALL              COMPUTED CALL.
R0511            7.  BPL                BRANCH IF MPAC POSITIVE OR ZERO.
R0512            8.  BZE                BRANCH IF MPAC ZERO.
R0513  2         9.  BMN                BRANCH IF MPAC NEGATIVE NON-ZERO.
 0514   CCALL    INCR   LOC             MAINTAIN LOC FOR QPRET COMPUTATION.
 0515            INDEX  LOC
 0516            CAF    0               GET BASE ADDRESS OF CADR LIST.
 0517            INDEX  ADDRWD
 0518            AD     0               ADD INCREMENT.
 0519            TS     FBANK           SELECT DESIRED CADR.
 0520            MASK   LOW10
 0521            INDEX  A
 0522            CAF    10000
 0523  2 -1      TS     POLISH
 0524   CALL     CS     LOW10           FOR ANY OF THE CALL OPTIONS, MAKE UP THE
 0525            AD     LOC             ADDRESS OF THE NEXT OP-CODE PAIR/STORE
 0526            AD     BANKSET         CODE AND LEAVE IT IN QPRET. NOTE THAT
 0527            INDEX  FIXLOC          LOW10 = 2000 - 1.
 0528  2         TS     QPRET
 0529   GOTO     CA     POLISH          BASIC BRANCHING SEQUENCE.
 0530            TS     FBANK
 0531            MASK   LOW10           MAKE UP 12 BIT SUB-ADDRESS AND FALL INTO
 0532            AD     2K              FALL INTO THE INTPRET ENTRY UNLESS THE
 0533            TS     LOC             GIVEN ADDRESS WAS IN ERASABLE, IN WHICH
 0534            CCS    FBANK           CASE IT IS USED AS THE ADDRESS OF THE
 0535            TCF    INTPRET +2      BRANCH ADDRESS.
 0536            TCF    +2
 0537  8         TCF    INTPRET +2
 0538            CS     LOC             THE GIVEN ADDRESS IS IN ERASABLE - SEE
 0539            AD     EVAC+2K         IF RELATIVE TO THE WORK AREA.
 0540            CCS    A
 0541            CA     FIXLOC          ADD FIXLOC IF SO.
 0542  2         ADS    LOC
 0543            INDEX  LOC
 0544            CA     0 -2000         (ADDRESS HAD BEEN AUGMENTED BY 2000.)
 0545  2         TCF    GOTO +1         ALLOWS ARBITRARY INDIRECTNESS.
 0546   CGOTO    INDEX  LOC             COMPUTED GO TO. PICK UP ADDRESS OF CADR
 0547            CA     1               LIST.
 0548            INDEX  ADDRWD          ADD MODIFIER.
 0549            AD     0
 0550            TS     FBANK           SELECT GOTO ADDRESS.
 0551            MASK   LOW10
 0552            INDEX  A
 0553            CA     10000
 0554  2         TCF    GOTO +1         WITH ADDRESS IN A.
 0555   SWBRANCH CA     BANKSET         SWITCH INSTRUCTIONS WHICH ELECT TO
 0556            TS     FBANK           BRANCH COME HERE TO DO SO.
 0557            INDEX  LOC
 0558            CA     1
 0559  2         TCF    GOTO +1
 0560   EVAC+2K  DEC    1069            =1024+45
P0561  2         TRIPLE PRECISION BRANCHING ROUTINE. IF CALLING TC IS AT L, RETU
 0562  9RN IS AS FOLLOWS:
R0563            L+1  IF MPAC IS GREATER THAN ZERO.
R0564            L+2  IF MPAC IS EQUAL TO +0 OR -0.
R0565  4         L+3  IF MPAC IS LESS THAN ZERO.
 0566   BRANCH   CCS    MPAC
 0567            TC     Q
 0568            TCF    +2              ON ZERO.
 0569  2         TCF    NEG
 0570            CCS    MPAC +1
 0571            TC     Q
 0572            TCF    +2
 0573  2         TCF    NEG
 0574            CCS    MPAC +2
 0575            TC     Q
 0576            TCF    +2
 0577  2         TCF    NEG
 0578            INDEX  Q               IF ALL THREE REGISTERS WERE +-0.
 0579  2         TC     1
 0580   NEG      INDEX  Q               IF FIRST NON-ZERO REGISTER WAS NEGATIVE.
 0581  4         TC     2
 0582   EXIT     INDEX  LOC             LEAVE INTERPRETIVE MODE.
 0583            TCF    1
P0584  2SECTION 3 - ADD/SUBTRACT PACKAGE.
R0585            THE FOLLOWING OPERATIONS ARE PROVIDED FOR ADDING TO AND SUBTRAC
 0586  9TING FROM THE MULTI-PURPOSE ACCUMULATOR
R0587  2MPAC:
R0588            1.  DAD                DOUBLE PRECISION ADD.
R0589            2.  DSU                DOUBLE PRECISION SUBTRACT.
R0590  2         3.  BDSU               DOUBLE PRECISION SUBTRACT FROM.
R0591  2         4.  TAD                TRIPLE PRECISION ADD.
R0592            5.  VAD                VECTOR ADD.
R0593            6.  VSU                VECTOR SUBTRACT.
R0594  2         7.  BVSU               VECTOR SUBTRACT FROM.
R0595  4THE INTERPRETIVE OVERFLOW INDICATOR OVFIND IS SET NON-ZERO IF OVERFLOW O
 0596  9CCURS IN ANY OF THE ABOVE.
 0597   VAD      EXTEND
 0598            INDEX  ADDRWD
 0599            DCA    2
 0600            DAS    MPAC +3
 0601            EXTEND                 CHECK OVERFLOW.
 0602            BZF    +2
 0603  2         TC     OVERFLOW
 0604            EXTEND
 0605            INDEX  ADDRWD
 0606            DCA    4
 0607            DAS    MPAC +5
 0608            EXTEND
 0609            BZF    +2
 0610  2         TC     OVERFLOW
 0611   DAD      EXTEND
 0612            INDEX  ADDRWD
 0613            DCA    0
 0614   ENDVXV   DAS    MPAC            VXV FINISHES HERE.
 0615            EXTEND
 0616            BZF    DANZIG
 0617            TC     OVERFLOW
 0618  8         TCF    DANZIG
 0619   VSU      EXTEND
 0620            INDEX  ADDRWD
 0621            DCS    2
 0622            DAS    MPAC +3
 0623            EXTEND
 0624            BZF    +2
 0625  2         TC     OVERFLOW
 0626            EXTEND
 0627            INDEX  ADDRWD
 0628            DCS    4
 0629            DAS    MPAC +5
 0630            EXTEND
 0631            BZF    +2
 0632  2         TC     OVERFLOW
 0633   DSU      EXTEND
 0634            INDEX  ADDRWD
 0635            DCS    0
 0636            DAS    MPAC
 0637            EXTEND
 0638            BZF    DANZIG
 0639            TC     OVERFLOW
 0640  2         TCF    DANZIG
 0641   OVERFLOW CAF    ONE             SUBROUTINE TO TURN OVFIND ON.
 0642  8         TCF    SETOVF2
 0643   BVSU     EXTEND
 0644            INDEX  ADDRWD
 0645            DCA    2
 0646            DXCH   MPAC +3
 0647            EXTEND
 0648            DCOM
 0649            DAS    MPAC +3
 0650            EXTEND
 0651            BZF    +2
 0652  2         TC     OVERFLOW
 0653            EXTEND
 0654            INDEX  ADDRWD
 0655            DCA    4
 0656            DXCH   MPAC +5
 0657            EXTEND
 0658            DCOM
 0659            DAS    MPAC +5
 0660            EXTEND
 0661            BZF    +2
 0662  2         TC     OVERFLOW
 0663   BDSU     EXTEND
 0664            INDEX  ADDRWD
 0665            DCA    0
 0666            DXCH   MPAC
 0667            EXTEND
 0668            DCOM
 0669            DAS    MPAC
 0670            EXTEND
 0671            BZF    DANZIG
 0672            TC     OVERFLOW
 0673            TCF    DANZIG
P0674  2         TRIPLE PRECISION ADD ROUTINE.
 0675   TAD      EXTEND
 0676            INDEX  ADDRWD
 0677            DCA    1               ADD MINOR PARTS FIRST.
 0678            DAS    MPAC +1
 0679            INDEX  ADDRWD
 0680            AD     0
 0681            AD     MPAC
 0682            TS     MPAC
 0683  2         TCF    DANZIG
 0684   SETOVF   TS     OVFIND          SET OVFIND IF SUCH OCCURS.
 0685            TCF    DANZIG
P0686  2ARITHMETIC SUBROUTINES REQUIRED IN FIXED-FIXED.
R0687            1.  DMPSUB     DOUBLE PRECISION MULTIPLY. MULTIPLY THE CONTENTS
 0688  9 OF MPAC,+1 BY THE DP WORD WHOSE ADDRESS
R0689                           IS IN ADDRWD AND LEAVE A TRIPLE PRECISION RESULT
 0690  9 IN MPAC.
R0691            2.  ROUNDSUB   ROUND THE TRIPLE PRECISON CONTENTS OF MPAC TO DO
 0692  9UBLE PRECISION.
R0693            3.  DOTSUB     TAKE THE DOT PRODUCT OF THE VECTOR IN MPAC AND T
 0694  9HE VECTOR WHOSE ADDRESS IS IN ADDRWD
R0695                           AND LEAVE THE TRIPLE PRECISION RESULT IN MPAC.
R0696            4.  POLY       USING THE CONTENTS OF MPAC AS A DP ARGUMENT, EVA
 0697  9LUATE THE POLYNOMIAL WHOSE DEGREE AND
R0698  4                        COEFFICIENTS IMMEDIATELY FOLLOW THE TC POLY INST
 0699  9RUCTION (SEE ROUTINE FOR DETAILS.)
 0700   DMP      INDEX  Q               BASIC SUBROUTINE FOR USE BY PINBALL, ETC
 0701            CAF    0               ADRES OF ARGUMENT FOLLOWS  TC DMP  .
 0702            INCR   Q
 0703  2 -1      TS     ADDRWD          (PROLOGUE FOR SETTING ADDRWD.)
 0704   DMPSUB   INDEX  ADDRWD          GET MINOR PART OF OPERAND AT C(ADDRWD).
 0705            CA     1
 0706            TS     MPAC +2         THIS WORKS FOR SQUARING MPAC AS WELL.
 0707            CAF    ZERO            SET MPAC +1 TO ZERO SO WE CAN ACCUMULATE
 0708            XCH    MPAC +1         THE PARTIAL PRODUCTS WITH DAS
 0709            TS     MPTEMP          INSTRUCTIONS.
 0710            EXTEND
 0711  2         MP     MPAC +2         MINOR OF MPAC X MINOR OF C(ADDRWD).
 0712            XCH    MPAC +2         DISCARD MINOR PART OF ABOVE RESULT AND
 0713            EXTEND                 FORM MAJOR OF MPAC X MINOR OF C(ADDRWD).
 0714            MP     MPAC
 0715  2         DAS    MPAC +1         GUARANTEED NO OVERFLOW.
 0716            INDEX  ADDRWD          GET MAJOR PART OF ARGUMENT AT C(ADDRWD).
 0717            CA     0
 0718            XCH    MPTEMP          SAVE AND BRING OUT MINOR OF MPAC.
 0719            EXTEND
 0720            MP     MPTEMP          MAJOR OF C(ADDRWD) X MINOR OF MPAC.
 0721  2         DAS    MPAC +1         ACCUMULATE, SETTING A TO NET OVERFLOW.
 0722            XCH    MPAC            SETTING MPAC TO 0 OR +-1.
 0723            EXTEND
 0724            MP     MPTEMP          MAJOR OF MPAC X MAJOR OF C(ADDRWD).
 0725            DAS    MPAC            GUARANTEED NO OVERFLOW.
 0726            TC     Q               49 MCT = .573 MS. INCLUDING RETURN.
P0727  2         ROUND MPAC TO DOUBLE PRECISION, SETTING OVFIND ON THE RARE EVEN
 0728  9T OF OVERFLOW.
 0729  2ROUNDSUB CAF    ZERO            SET MPAC +2 TO ZERO FOR SCALARS.
 0730   VROUND   XCH    MPAC +2         BUT WE NEEDNT TAKE THE TIME FOR VECTORS.
 0731            DOUBLE
 0732            TS     L
 0733  2         TC     Q
 0734            AD     MPAC +1         ADD ROUNDING BIT IF MPAC +2 WAS GREATER
 0735            TS     MPAC +1         THAN .5 IN MAGNITUDE.
 0736  2         TC     Q
 0737            AD     MPAC            PROPAGATE INTERFLOW.
 0738            TS     MPAC
 0739  2         TC     Q
 0740   SETOVF2  TS     OVFIND          (RARE).
 0741            TC     Q
P0742            THE DOT PRODUCT SUBROUTINE USUALLY FORMS THE DOT PRODUCT OF THE
 0743  9 VECTOR IN MPAC WITH A STANDARD SIX
R0744   REGISTER VECTOR WHOSE ADDRESS IS IN ADDRWD. IN THIS CASE C(DOTINC) ARE S
 0745  9ET TO 2. VXM, HOWEVER, SETS C(DOTINC) TO
R0746  46 SO THAT DOTSUB DOTS MPAC WITH A COLUMN VECTOR OF THE MATRIX IN QUESTIO
 0747  9N IN THIS CASE.
 0748   PREDOT   CAF    TWO             PROLOGUE TO SET DOTINC TO 2.
 0749  2         TS     DOTINC
 0750   DOTSUB   EXTEND
 0751            QXCH   DOTRET          SAVE RETURN.
 0752            TC     DMPSUB          DOT X COMPONENTS.
 0753            DXCH   MPAC +3         POSITION Y COMPONENT OF MPAC FOR
 0754            DXCH   MPAC            MULTIPLICATION WHILE SAVING RESULT IN
 0755            DXCH   BUF             THREE WORD BUFFER, BUF.
 0756            CA     MPAC +2
 0757  2         TS     BUF +2
 0758            CA     DOTINC          ADVANCE ADDRWD TO Y COMPONENT OF
 0759            ADS    ADDRWD          OTHER ARGUMENT.
 0760            TC     DMPSUB
 0761            DXCH   MPAC +1         ACCUMULATE PARTIAL PRODUCTS.
 0762            DAS    BUF +1
 0763            AD     MPAC
 0764            AD     BUF
 0765            TS     BUF
 0766            TCF    +2
 0767  2         TS     OVFIND          IF OVERFLOW OCCURS.
 0768            DXCH   MPAC +5         MULTIPLY Z COMPONENTS.
 0769            DXCH   MPAC
 0770            CA     DOTINC
 0771            ADS    ADDRWD
 0772            TC     DMPSUB
 0773   ENDDOT   DXCH   BUF +1          LEAVE FINAL ACCUMULATION IN MPAC.
 0774            DAS    MPAC +1
 0775            AD     MPAC
 0776            AD     BUF
 0777            TS     MPAC
 0778  2         TC     DOTRET
 0779            TS     OVFIND          ON OVERFLOW HERE.
 0780            TC     DOTRET
P0781  2DOUBLE PRECISION POLYNOMIAL EVALUATOR.
R0782                                      N        N-1
R0783            THIS ROUTINE EVALUATES A X  + A   X    + ... + A X + A LEAVING
 0784  9THE DP RESULT IN MPAC ON EXIT.
R0785  2                                 N      N-1              1     0
R0786  2IT IS ASSUMED THAT X ARRIVES IN MPAC AND N AND THE COEFFICIENTS IN THE C
 0787  9ALLING SEQUENCE AS FOLLOWS:
A0788   L        TC     POLY
A0789   L+1      DEC    N-1
A0790   L+2      2DEC   A(0)
A0791            ...
A0792  2L+2N+2   2DEC   A(N)            RETURN IS TO L+2N+4.
 0793   POLY     CAF    LVBUF           INCOMING X WILL BE STORED IN VBUF, SO
 0794  2         TS     ADDRWD          SET ADDRWD SO DMPSUB WILL MPY BY VBUF.
 0795            INDEX  Q
 0796            CAF    0
 0797            TS     POLYCNT         N-1 TO COUNTER.
 0798            DOUBLE
 0799            AD     Q
 0800            TS     POLYRET         SAVE L+2N-1 FOR RETURN
 0801  2         TS     POLISH          AND FOR REFERENCING COEFFICIENTS.
 0802            EXTEND
 0803            INDEX  A               LOAD A(N) INTO MPAC, SAVING MPAC IN
 0804            DCA    3               VBUF.
 0805            DXCH   MPAC
 0806            DXCH   VBUF
 0807  2         TCF    POLY2           NO ZERO-ORDER POLYNOMIALS ALLOWED.
 0808   POLYLOOP TS     POLYCNT         SAVE DECREMENTED LOOP COUNTER.
 0809            CS     TWO             REGRESS COEFFICIENT POINTER.
 0810  2         ADS    POLISH
 0811   POLY2    TC     DMPSUB          MULTIPLY BY X.
 0812            EXTEND
 0813            INDEX  POLISH          ADD IN NEXT COEFFICIENT.
 0814            DCA    1
 0815            DAS    MPAC            NO CHECK FOR OVERFLOW SINCE SIN, ETC.,
A0816                                   SHOULD NOT OVERFLOW.
 0817            CCS    POLYCNT         LOOP ON COUNTER.
 0818            TCF    POLYLOOP
 0819            INDEX  POLYRET         DONE - RETURN TO CALLER AT L+2N+4.
 0820   FIVE     TC     5
P0821  2         MISCELLANEOUS MULTI-PRECISION ROUTINES REQUIRED IN FIXED-FIXED
 0822  9BUT NOT USED BY THE INTERPRETER.
 0823   TPAGREE  EXTEND                 FORCE SIGN AGREEMENT AMONG THE TRIPLE-
 0824            QXCH   BUF             PRECISION CONTENTS OF MPAC, RETURNING
 0825            TC     BRANCH          WITH THE SIGNUM OF THE INPUT IN A.
 0826            TCF    ARG+
 0827  2         TCF    ARGZERO
 0828            CS     POSMAX          IF NEGATIVE.
 0829  2         TCF    +2
 0830   ARG+     CAF    POSMAX
 0831    +2      TS     BUF +1
 0832            EXTEND
 0833            AUG    A               FORMS +-1.0.
 0834            AD     MPAC +2
 0835            TS     MPAC +2
 0836            CAF    ZERO
 0837            AD     BUF +1
 0838            AD     MPAC +1
 0839            TS     MPAC +1
 0840            CAF    ZERO
 0841            AD     BUF +1
 0842            AD     MPAC
 0843   ARGZERO2 TS     MPAC            ALWAYS SKIPPING UNLESS ARGZERO.
 0844            TS     MPAC +1
 0845  2         TC     BUF             RETURN.
 0846   ARGZERO  TS     MPAC +2         SET ALL THREE MPAC REGISTERS TO ZERO.
 0847  2         TCF    ARGZERO2
R0848  2         SHORTMP MULTIPLIES THE TP CONTENTS OF MPAC BY THE SINGLE PRECIS
 0849  9ION NUMBER ARRIVING IN A.
 0850   SHORTMP  TS     MPTEMP
 0851            EXTEND
 0852            MP     MPAC +2
 0853            TS     MPAC +2
 0854            CAF    ZERO            SO SUBSEQUENT DAS WILL WORK.
 0855            XCH    MPAC +1
 0856            EXTEND
 0857            MP     MPTEMP
 0858            DAS    MPAC +1
 0859            XCH    MPAC            SETTING MPAC TO 0.
 0860            EXTEND
 0861            MP     MPTEMP
 0862            DAS    MPAC
 0863            TC     Q
P0864  2MISCELLANEOUS VECTOR OPERATIONS. INCLUDED HERE ARE THE FOLLOWING:
R0865            1.  DOT                DP VECTOR DOT PRODUCT.
R0866            2.  VXV                DP VECTOR CROSS PRODUCT.
R0867            3.  VXSC               DP VECTOR TIMES SCALAR.
R0868            4.  V/SC               DP VECTOR DIVIDED BY SCALAR.
R0869            5.  VPROJ              DP VECTOR PROJECTION. ( (MPAC.X)MPAC ).
R0870            6.  VXM                DP VECTOR POST-MULTIPLIED BY MATRIX.
R0871  4         7.  MXV                DP VECTOR PRE-MULTIPLIED BY MATRIX.
 0872   DOT      TC     PREDOT          DO THE DOT PRODUCT AND EXIT, CHANGING
 0873            CAF    ZERO            THE MODE TO DP SCALAR.
 0874  4         TCF    NEWMODE
 0875   MXV      CAF    TWO             SET UP MATINC AND DOTINC FOR ROW
 0876            TS     MATINC          VECTORS.
 0877  2         TCF    VXM/MXV         GO TO COMMON PORTION.
 0878   VXM      CS     TEN             SET MATINC AND DOTINC TO REFER TO MATRIX
 0879            TS     MATINC          AS THREE COLUMN VECTORS.
 0880            CAF    SIX
P0881  2         COMMON PORTION OF MXV AND VXM.
 0882   VXM/MXV  TS     DOTINC
 0883  2         TC     MPACVBUF        SAVE VECTOR IN MPAC FOR FURTHER USE.
 0884            TC     DOTSUB          GO DOT TO GET X COMPONENT OF ANSWER.
 0885            EXTEND
 0886            DCA    VBUF            MOVE MPAC VECTOR BACK INTO MPAC, SAVING
 0887            DXCH   MPAC            NEW X COMPONENT IN BUF2.
 0888            DXCH   BUF2
 0889            EXTEND
 0890            DCA    VBUF +2
 0891            DXCH   MPAC +3
 0892            EXTEND
 0893            DCA    VBUF +4
 0894            DXCH   MPAC +5
 0895            CA     MATINC          INITIALIZE ADDRWD FOR NEXT DOT PRODUCT.
 0896  2         ADS    ADDRWD          FORMS BASE ADDRESS OF NEXT COLUMN(ROW).
 0897            TC     DOTSUB
 0898            DXCH   VBUF            MOVE GIVEN VECTOR BACK TO MPAC, SAVING Y
 0899            DXCH   MPAC            COMPONENT OF ANSWER IN VBUF +2.
 0900            DXCH   VBUF +2
 0901            DXCH   MPAC +3
 0902            DXCH   VBUF +4
 0903            DXCH   MPAC +5
 0904            CA     MATINC          FORM ADDRESS OF LAST COLUMN OR ROW.
 0905  2         ADS    ADDRWD
 0906            TC     DOTSUB
 0907            DXCH   BUF2            ANSWER NOW COMPLETE. PUT COMPONENTS INTO
 0908            DXCH   MPAC            PROPER MPAC REGISTERS.
 0909            DXCH   MPAC +5
 0910            DXCH   VBUF +2
 0911            DXCH   MPAC +3
 0912            TCF    DANZIG          EXIT.
P0913  2         VXSC - VECTOR TIMES SCALAR.
 0914   VXSC     CCS    MODE            TEST PRESENT MODE.
 0915            TCF    DVXSC           SEPARATE ROUTINE WHEN SCALAR IS IN MPAC.
 0916  2         TCF    DVXSC
 0917   VVXSC    TC     DMPSUB          COMPUTE X COMPONENT
 0918            TC     VROUND          AND ROUND IT.
 0919            DXCH   MPAC +3         PUT Y COMPONENT INTO MPAC SAVING MPAC IN
 0920            DXCH   MPAC            MPAC +3.
 0921  2         DXCH   MPAC +3
 0922            TC     DMPSUB          DO SAME FOR Y AND Z COMPONENTS.
 0923            TC     VROUND
 0924            DXCH   MPAC +5
 0925            DXCH   MPAC
 0926  2         DXCH   MPAC +5
 0927            TC     DMPSUB
 0928            TC     VROUND
 0929   VROTATEX DXCH   MPAC            EXIT USED TO RESTORE MPAC AFTER THIS
 0930            DXCH   MPAC +5         TYPE OF ROTATION. CALLED BY VECTOR SHIFT
 0931            DXCH   MPAC +3         RIGHT, V/SC, ETC.
 0932            DXCH   MPAC
 0933            TCF    DANZIG
P0934  2         DP VECTOR PROJECTION ROUTINE.
 0935   VPROJ    TC     PREDOT          (MPAC.X)MPAC IS COMPUTED AND LEFT IN
A0936  2                                MPAC. DO DOT AND FALL INTO DVXSC.
R0937  2         VXSC WHEN SCALAR ARRIVES IN MPAC AND VECTOR IS AT X.
 0938   DVXSC    EXTEND                 SAVE SCALAR IN MPAC +3 AND GET X
 0939            DCA    MPAC            COMPONENT OF ANSWER.
 0940            DXCH   MPAC +3
 0941            TC     DMPSUB
 0942  2         TC     VROUND
 0943            CAF    TWO             ADVANCE ADDRWD TO Y COMPONENT OF X.
 0944            ADS    ADDRWD
 0945            EXTEND
 0946            DCA    MPAC +3         PUT SCALAR BACK INTO MPAC AND SAVE
 0947            DXCH   MPAC            X RESULT IN MPAC +5.
 0948            DXCH   MPAC +5
 0949            TC     DMPSUB
 0950  2         TC     VROUND
 0951            CAF    TWO
 0952            ADS    ADDRWD          TO Z COMPONENT.
 0953            DXCH   MPAC +3         BRING SCALAR BACK, PUTTING Y RESULT IN
 0954            DXCH   MPAC            THE PROPER PLACE.
 0955            DXCH   MPAC +3
 0956            TC     DMPSUB
 0957  2         TC     VROUND
 0958            DXCH   MPAC            PUT Z COMPONENT IN PROPER PLACE, ALSO
 0959            DXCH   MPAC +5         POSITIONING X.
 0960  2         DXCH   MPAC
 0961            CS     ONE             MODE HAS CHANGED TO VECTOR.
 0962            TCF    NEWMODE
P0963            THE VECTOR CROSS PRODUCT ROUTINE CALCULATES (X M -X M ,X M -X M
 0964  9 ,X M -X M ) WHERE M IS THE VECTOR IN
R0965                                                          3 2  2 3  1 3  3
 0966  91  2 1  1 2
R0967  4MPAC AND X THE VECTOR AT THE GIVEN ADDRESS.
 0968   VXV      EXTEND
 0969            DCA    MPAC +5         FORM UP M3X1, LEAVING M1 IN VBUF.
 0970            DXCH   MPAC
 0971            DXCH   VBUF
 0972  2         TC     DMPSUB          BY X1.
 0973            EXTEND
 0974            DCS    MPAC +3         CALCULATE -X1M2, SAVING X1M3 IN VBUF +2.
 0975            DXCH   MPAC
 0976            DXCH   VBUF +2
 0977  2         TC     DMPSUB
 0978            CAF    TWO             ADVANCE ADDRWD TO X2.
 0979            ADS    ADDRWD
 0980            EXTEND
 0981            DCS    MPAC +5         PREPARE TO GET -X2M3, SAVING -X1M2 IN
 0982            DXCH   MPAC            MPAC +5.
 0983            DXCH   MPAC +5
 0984  2         TC     DMPSUB
 0985            EXTEND
 0986            DCA    VBUF            GET X2M1, SAVING -X2M3 IN VBUF +4.
 0987            DXCH   MPAC
 0988            DXCH   VBUF +4
 0989  2         TC     DMPSUB
 0990            CAF    TWO             ADVANCE ADDRWD TO X3.
 0991            ADS    ADDRWD
 0992            EXTEND
 0993            DCS    VBUF            GET -X3M1, ADDING X2M1 TO MPAC +5 TO
 0994            DXCH   MPAC            COMPLETE THE Z COMPONENT OF THE ANSWER.
 0995  2         DAS    MPAC +5
 0996            EXTEND
 0997            BZF    +2
 0998  8         TC     OVERFLOW
 0999            TC     DMPSUB
 1000            DXCH   VBUF +2         MOVE X1M3 TO MPAC +3 SETTING UP FOR X3M2
 1001            DXCH   MPAC +3         AND ADD -X3M1 TO MPAC +3 TO COMPLETE THE
 1002            DXCH   MPAC            Y COMPONENT OF THE RESULT.
 1003  2         DAS    MPAC +3
 1004            EXTEND
 1005            BZF    +2
 1006  2         TC     OVERFLOW
 1007            TC     DMPSUB
 1008            DXCH   VBUF +4         GO ADD -X2M3 TO X3M2 TO COMPLETE THE X
 1009  2         TCF    ENDVXV          COMPONENT (TAIL END OF DAD).
R1010  2         THE MPACVBUF SUBROUTINE SAVES THE VECTOR IN MPAC IN VBUF WITHOU
 1011  9T CLOBBERING MPAC.
 1012   MPACVBUF EXTEND                 CALLED BY MXV, VXM, AND UNIT.
 1013            DCA    MPAC
 1014            DXCH   VBUF
 1015            EXTEND
 1016            DCA    MPAC +3
 1017            DXCH   VBUF +2
 1018            EXTEND
 1019            DCA    MPAC +5
 1020            DXCH   VBUF +4
 1021            TC     Q               RETURN TO CALLER.
P1022  2         INTERPRETIVE INSTRUCTIONS WHOSE EXECUTION CONSISTS OF PRINCIPAL
 1023  9LY CALLING SUBROUTINES.
 1024   DMP1     TC     DMPSUB          DMP INSTRUCTION.
 1025  2         TCF    DANZIG
 1026   DMPR     TC     DMPSUB
 1027            TC     ROUNDSUB
 1028  2         TCF    DANZIG
 1029   DDV      EXTEND
 1030            INDEX  ADDRWD          MOVE DIVIDEND INTO BUF.
 1031            DCA    0
 1032  2         TCF    BDDV +4
 1033   BDDV     EXTEND                 MOVE DIVISOR INTO MPAC SAVING MPAC, THE
 1034            INDEX  ADDRWD          DIVIDEND, IN BUF.
 1035            DCA    0
 1036            DXCH   MPAC
 1037    +4      DXCH   BUF
 1038            CAF    ZERO            DIVIDE ROUTINES IN BANK 0.
 1039            TS     FBANK
 1040  2         TCF    DDV/BDDV
 1041   SETPD    CA     ADDRWD          ANYWHERE IN ERASABLE IN GENERAL, BUT
 1042            TS     PUSHLOC         ALMOST ALWAYS IN THE WORK AREA.
 1043  2         TCF    DANZIG
 1044   TSLC     CAF    ZERO            SHIFTING ROUTINES LOCATED IN BANK 00.
 1045            TS     FBANK
 1046  2         TCF    TSLC2
 1047   GSHIFT   CAF    LOW7            USED AS MASK AT GENSHIFT. THIS PROCESSES
 1048            TS     FBANK           ANY SHIFT INSTRUCTION (EXCEPT TSLC) WITH
 1049            TCF    GENSHIFT        AN ADDRESS (ROUTINES IN BANK 0).
P1050            THE FOLLOWING IS THE PROLOGUE TO V/SC. IF THE PRESENT MODE IS V
 1051  9ECTOR, IT SAVES THE SCALAR AT X IN BUF
R1052   AND CALLS THE V/SC ROUTINE IN BANK 0. IF THE PRESENT MODE IS SCALAR, IT
 1053  9MOVES THE VECTOR AT X INTO MPAC, SAVING
R1054  4THE SCALAR IN MPAC IN BUF BEFORE CALLING THE V/SC ROUTINE IN BANK 0.
 1055   V/SC     CCS    MODE
 1056            TCF    DV/SC           MOVE VECTOR INTO MPAC.
 1057  2         TCF    DV/SC
 1058   VV/SC    EXTEND
 1059            INDEX  ADDRWD
 1060            DCA    0
 1061   V/SC1    DXCH   BUF             IN BOTH CASES, VECTOR IS NOW IN MPAC AND
 1062            CAF    ZERO            SCALAR IN BUF.
 1063            TS     FBANK
 1064  2         TCF    V/SC2
 1065   DV/SC    EXTEND
 1066            INDEX  ADDRWD
 1067            DCA    2
 1068            DXCH   MPAC +3
 1069            EXTEND
 1070            INDEX  ADDRWD
 1071            DCA    4
 1072  2         DXCH   MPAC +5
 1073            CS     ONE             CHANGE MODE TO VECTOR.
 1074  2         TS     MODE
 1075            EXTEND
 1076            INDEX  ADDRWD
 1077            DCA    0
 1078            DXCH   MPAC
 1079            TCF    V/SC1           FINISH PROLOGUE AT COMMON SECTION.
P1080  2         SIGN AND COMPLEMENT INSTRUCTIONS.
 1081   SIGN     INDEX  ADDRWD          CALL COMP INSTRUCTION IF WORD AT X IS
 1082            CCS    0               NEGATIVE NON-ZERO.
 1083            TCF    DANZIG
 1084            TCF    +2
 1085  2         TCF    COMP            DO THE COMPLEMENT.
 1086            INDEX  ADDRWD
 1087            CCS    1
 1088            TCF    DANZIG
 1089            TCF    DANZIG
 1090            TCF    COMP
 1091  4         TCF    DANZIG
 1092   COMP     EXTEND                 COMPLEMENT DP MPAC IN EVERY CASE.
 1093            DCS    MPAC
 1094  2         DXCH   MPAC
 1095            CCS    MODE            EITHER COMPLEMENT MPAC +3 OR THE REST OF
 1096            TCF    DCOMP           THE VECTOR ACCUMULATOR.
 1097  2         TCF    DCOMP
 1098            EXTEND                 VECTOR COMPLEMENT.
 1099            DCS    MPAC +3
 1100            DXCH   MPAC +3
 1101            EXTEND
 1102            DCS    MPAC +5
 1103            DXCH   MPAC +5
 1104  2         TCF    DANZIG
 1105   DCOMP    CS     MPAC +2
 1106            TS     MPAC +2
 1107            TCF    DANZIG
P1108  2         CONSTANTS REQUIRED IN FIXED-FIXED.
 1109   DPOSMAX  OCT    37777
 1110   POSMAX   OCT    37777
 1111  2NEG1/2   OCT    -20000          MUST BE TWO LOCATIONS AHEAD OF POS1/2.
 1112   BIT15    OCT    40000           BIT TABLE FOLLOWS.
 1113   BIT14    OCT    20000
 1114   BIT13    OCT    10000
 1115   BIT12    OCT    04000
 1116   BIT11    OCT    02000
 1117   BIT10    OCT    01000
 1118   BIT9     OCT    00400
 1119   BIT8     OCT    00200
 1120   BIT7     OCT    00100
 1121   BIT6     OCT    00040
 1122   BIT5     OCT    00020
 1123   BIT4     OCT    00010
 1124   BIT3     OCT    00004
 1125   BIT2     OCT    00002
 1126  2BIT1     OCT    00001
 1127   NEGMAX   EQUALS BIT15
 1128   HALF     EQUALS BIT14
 1129   POS1/2   EQUALS HALF
 1130   QUARTER  EQUALS BIT13
 1131   2K       EQUALS BIT11
 11311  ELEVEN   DEC    11
 11312  NOUTCON  =      ELEVEN
 1132   TEN      DEC    10
 11321  NINE     DEC    9
 1133   EIGHT    EQUALS BIT4
 1134   SEVEN    OCT    7
 1135   SIX      EQUALS REVCNT
 1136   FOUR     EQUALS BIT3
 1137   THREE    EQUALS NO.WDS +1
 1138   TWO      EQUALS BIT2
 1139   ONE      EQUALS BIT1
 1140   ZERO     OCT    0
 1141   NEG0     OCT    77777
 1142  2NEGONE   DEC    -1
 1143   NEG1     =      NEGONE
 1144   NEG2     OCT    77775
 1145   LOW3     EQUALS SEVEN
 1146  2LOW2     EQUALS THREE
 1147   CALLCODE OCT    00031
 1148   DLOADCOD OCT    40014
 1149   VLOADCOD EQUALS BIT15
 1150   DLOAD*   OCT    40015
 1151   VLOAD*   EQUALS OCT40001
 1152   LVBUF    ADRES  VBUF
P1153  2SHIFTING AND ROUNDING PACKAGE.
R1154  2         THE FOLLOWING SHORT SHIFT CODES REQUIRE NO ADDRESS WORD:
R1155            1.  SR1 TO SR4         SCALAR SHIFT RIGHT.
R1156            2.  SR1R TO SR4R       SCALAR SHIFT RIGHT AND ROUND.
R1157            3.  SL1 TO SL4         SCALAR SHIFT LEFT.
R1158  2         4.  SL1R TO SL4R       SCALAR SHIFT LEFT AND ROUND.
R1159            5.  VSR1 TO VSR8       VECTOR SHIFT RIGHT (ALWAYS ROUNDS).
R1160  2         6.  VSL1 TO VSL8       VECTOR SHIFT LEFT (NEVER ROUNDS).
R1161  2         THE FOLLOWING CODES REQUIRE AN ADDRESS WHICH MAY BE INDEXED:*
R1162            1.  SR                 SCALAR SHIFT RIGHT.
R1163            2.  SRR                SCALAR SHIFT RIGHT AND ROUND.
R1164            3.  SL                 SCALAR SHIFT LEFT.
R1165  2         4.  SLR                SCALAR SHIFT LEFT AND ROUND.
R1166            5.  VSR                VECTOR SHIFT RIGHT.
R1167  2         6.  VSL                VECTOR SHIFT LEFT.
R1168   *  IF THE ADDRESS IS INDEXED, AND THE INDEX MODIFICATION RESULTS IN A NE
 1169  9GATIVE SHIFT COUNT, A SHIFT OF THE
R1170  4ABSOLUTE VALUE OF THE COUNT IS DONE IN THE OPPOSITE DIRECTION.
 1171  2         SETLOC 10000           BANK 0 PORTION FOLLOWS.
 1172   SHORTT   CAF    SIX             SCALAR SHORT SHIFTS COME HERE. THE SHIFT
 1173            MASK   CYR             COUNT-1 IS NOW IN BITS 2-3 OF CYR. THE
 1174  2         TS     SR              ROUNDING BIT IS IN BIT1 AT THIS POINT.
 1175            CCS    CYR             SEE IF RIGHT OR LEFT SHIFT DESIRED.
 1176  2         TCF    TSSL            SHIFT LEFT.
 1177  2SRDDV    DEC    20              MPTEMP SETTING FOR SR BEFORE DDV.
 1178   TSSR     INDEX  SR              GET SHIFTING BIT.
 1179            CAF    BIT14
 1180  2         TS     MPTEMP
 1181            CCS    CYR             SEE IF A ROUND IS DESIRED.
 1182   RIGHTR   TC     MPACSRND        YES - SHIFT RIGHT AND ROUND.
 1183  8         TCF    DANZIG
 1184   MPACSHR  CA     MPTEMP          DO A TRIPLE PRECISION SHIFT RIGHT.
 1185            EXTEND
 1186            MP     MPAC +2
 1187    +3      TS     MPAC +2         (EXIT FROM SQRT AND ABVAL).
 1188            CA     MPTEMP
 1189            EXTEND
 1190            MP     MPAC            SHIFT MAJOR PART INTO A,L AND PLACE IN
 1191            DXCH   MPAC            MPAC,+1.
 1192            CA     MPTEMP
 1193            EXTEND
 1194            MP     L               ORIGINAL C(MPAC +1).
 1195            DAS    MPAC +1         GUARANTEED NO OVERFLOW.
 1196  2         TCF    DANZIG
R1197  2         MPAC SHIFT RIGHT AND ROUND SUBROUTINES.
 1198   MPACSRND CA     MPAC +2         WE HAVE TO DO ALL THREE MULTIPLIES SINCE
 1199            EXTEND                 MPAC +1 AND MPAC +2 MIGHT HAVE SIGN
 1200            MP     MPTEMP          DISAGREEMENT WITH A SHIFT RIGHT OF 1.
 1201            XCH    MPAC +1
 1202            EXTEND
 1203            MP     MPTEMP
 1204            XCH    MPAC +1         TRIAL MINOR PART.
 1205  2         AD     L
 1206   VSHR2    DOUBLE                 (FINISH VECTOR COMPONENT SHIFT RIGHT
 1207            TS     MPAC +2         AND ROUND.
 1208            TCF    +2
 1209  2         ADS    MPAC +1         GUARANTEED NO OVERFLOW.
 1210            CAF    ZERO
 1211            TS     MPAC +2
 1212            XCH    MPAC            SETTING TO ZERO SO FOLLOWING DAS WORKS.
 1213            EXTEND
 1214            MP     MPTEMP
 1215            DAS    MPAC            AGAIN NO OVERFLOW.
 1216  2         TC     Q
 1217   VSHRRND  CA     MPTEMP          ENTRY TO SHIFT RIGHT AND ROUND MPAC WHEN
 1218            EXTEND                 MPAC CONTAINS A VECTOR COMPONENT.
 1219            MP     MPAC +1
 1220            TS     MPAC +1
 1221            XCH    L
 1222            TCF    VSHR2           GO ADD ONE IF NECESSARY AND FINISH.
P1223  2         ROUTINE FOR SHORT SCALAR SHIFT LEFT (AND MAYBE ROUND).
 1224   TSSL     CA     SR              GET SHIFT COUNT FOR SR.
 1225  2 +1      TS     MPTEMP
 1226    +2      EXTEND                 ENTRY HERE FROM SL FOR SCALARS.
 1227            DCA    MPAC +1         SHIFTING LEFT ONE PLACE AT A TIME IS
 1228            DAS    MPAC +1         FASTER THAN DOING THE WHOLE SHIFT WITH
 1229            AD     MPAC            MULTIPLIES ASSUMING THAT FREQUENCY OF
 1230            AD     MPAC            SHIFT COUNTS GOES DOWN RAPIDLY AS A
 1231            TS     MPAC            FUNCTION OF THEIR MAGNITUDE.
 1232            TCF    +2
 1233            TS     OVFIND          OVERFLOW. (LEAVES OVERFLOW-CORRECTED
A1234                                   RESULT ANYWAY).
 1235            CCS    MPTEMP          LOOP ON DECREMENTED SHIFT COUNT.
 1236  2         TCF    TSSL +1
 1237            CCS    CYR             SEE IF ROUND WANTED.
 1238            TC     ROUNDSUB        YES - ROUND AND EXIT.
 1239            TCF    DANZIG          SL LEAVES A ZERO IN CYR FOR NO ROUND.
 1240            TCF    DANZIG          NO - EXIT IMMEDIATL
P1241  2VECTOR SHIFTING ROUTINES.
 1242   SHORTV   CAF    LOW3            SAVE 3 BIT SHIFT COUNT - 1 WITHOUT
 1243            MASK   CYR             EDITING CYR.
 1244            TS     MPTEMP
 1245            CCS    CYR             SEE IF LEFT OR RIGHT SHIFT.
 1246            TCF    VSSL            VECTOR SHIFT LEFT.
 1247  2OCT176   OCT    176             USED IN PROCESSED SHIFTS WITH - COUNT.
 1248   VSSR     INDEX  MPTEMP          (ENTRY FROM SR). PICK UP SHIFTING BIT.
 1249            CAF    BIT14           MPTEMP CONTAINS THE SHIFT COUNT - 1.
 1250            TS     MPTEMP
 1251  2         TC     VSHRRND         SHIFT X COMPONENT.
 1252            DXCH   MPAC            SWAP X AND Y COMPONENTS.
 1253            DXCH   MPAC +3
 1254            DXCH   MPAC
 1255  2         TC     VSHRRND         SHIFT Y COMPONENT.
 1256            DXCH   MPAC            SWAP Y AND Z COMPONENTS.
 1257            DXCH   MPAC +5
 1258            DXCH   MPAC
 1259  2         TC     VSHRRND         SHIFT Z COMPONENT.
 1260            TCF    VROTATEX        RESTORE COMPONENTS TO PROPER PLACES.
P1261  2VECTOR SHIFT LEFT - DONE ONE PLACE AT A TIME.
 1262  2 -1      TS     MPTEMP          SHIFTING LOOP.
 1263   VSSL     EXTEND
 1264            DCA    MPAC
 1265            DAS    MPAC
 1266            EXTEND
 1267            BZF    +2
 1268  2         TC     OVERFLOW
 1269            EXTEND
 1270            DCA    MPAC +3
 1271            DAS    MPAC +3
 1272            EXTEND
 1273            BZF    +2
 1274  2         TC     OVERFLOW
 1275            EXTEND
 1276            DCA    MPAC +5
 1277            DAS    MPAC +5
 1278            EXTEND
 1279            BZF    +2
 1280  2         TC     OVERFLOW
 1281            CCS    MPTEMP          LOOP ON DECREMENTED SHIFT COUNTER.
 1282            TCF    VSSL -1
 1283            TCF    DANZIG          EXIT.
P1284            TSLC - TRIPLE SHIFT LEFT AND COUNT. SHIFTS MPAC LEFT UNTIL GREA
 1285  9TER THAN .5 IN MAGNITUDE, LEAVING
R1286  2THE COMPLEMENT OF THE NUMBER OF SHIFTS REQUIRED IN X.
 1287   TSLC2    TS     MPTEMP          START BY ZEROING SHIFT COUNT (IN A NOW).
 1288            TC     BRANCH          EXIT WITH NO SHIFTING IF ARGUMENT ZERO.
 1289            TCF    +2
 1290  2         TCF    ENDTSLC         STORES ZERO SHIFT COUNT IN THIS CASE.
 1291            CA     MPAC            BEGIN NORMALIZATION LOOP.
 1292  2         TCF    TSLCTEST
 1293   TSLCLOOP INCR   MPTEMP          INCREMENT SHIFT COUNTER.
 1294            EXTEND
 1295            DCA    MPAC +1
 1296            DAS    MPAC +1
 1297            AD     MPAC
 1298            ADS    MPAC
 1299   TSLCTEST DOUBLE                 SEE IF (ANOTHER) SHIFT IS REQUIRED.
 1300            OVSK
 1301  2         TCF    TSLCLOOP        YES - INCREMENT COUNT AND SHIFT AGAIN.
 1302   ENDTSLC  CS     MPTEMP
 1303            TCF    STORE1          STORE SHIFT COUNT AND RETURN TO DANZIG.
P1304            THE FOLLOWING ROUTINES PROCESSES THE GENERAL SHIFT INSTRUCTIONS
 1305  9 SR, SRR, SL, AND SLR.
R1306  2THE GIVEN ADDRESS IS DECODED AS FOLLOWS:
R1307            BITS 1-7    SHIFT COUNT (SUBADDRESS) LESS THAN 125 DECIMAL.
R1308            BIT 8       PSEUDO SIGN BIT (DETECTS CHANGE IN SIGN IN INDEXED
 1309  9SHIFTS).
R1310            BIT 9       0 FOR LEFT SHIFT, AND 1 FOR RIGHT SHIFT.
R1311            BIT 10      1 FOR TERMINAL ROUND ON SCALAR SHIFTS, 0 OTHERWISE.
R1312  2         BITS 11-15  0.
R1313  4THE ABOVE ENCODING IS DONE BY THE YUL SYSTEM.
 1314   GENSHIFT MASK   ADDRWD          GET SHIFT COUNT, TESTING FOR ZERO.
 1315            CCS    A               (ARRIVES WITH C(A) = LOW7).
 1316  2         TCF    GENSHFT2        IF NON-ZERO, PROCEED WITH DECREMENTED CT
 1317            CAF    BIT10           ZERO SHIFT COUNT. NO SHIFTS NEEDED BUT
 1318            MASK   ADDRWD          WE MIGHT HAVE TO ROUND MPAC ON SLR AND
 1319            CCS    A               SRR (SCALAR ONLY).
 1320            TC     ROUNDSUB
 1321  2         TCF    DANZIG
 1322   GENSHFT2 TS     MPTEMP          DECREMENTED SHIFT COUNT TO MPTEMP.
 1323            CAF    BIT8            TEST MEANING OF LOW SEVEN BIT COUNT IN
 1324            EXTEND                 MPTEMP NOW.
 1325            MP     ADDRWD
 1326            MASK   LOW2            JUMPS ON SHIFT DIRECTION (BIT8) AND
 1327            INDEX  A
 1328            TCF    +1              ORIGINAL SHIFT DIRECTION (BIT 9).
 1329            TCF    RIGHT-          NEGATIVE SHIFT COUNT FOR SL OR SLR.
 1330            TCF    LEFT            SL OR SLR.
 1331            TCF    LEFT-           NEGATIVE SHIFT COUNT WITH SR OR SRR.
P1332  2         GENERAL SHIFT RIGHT.
 1333   RIGHT    CCS    MODE            SEE IF VECTOR OR SCALAR.
 1334            TCF    GENSCR
 1335  2         TCF    GENSCR
 1336            CA     MPTEMP          SEE IF SHIFT COUNT GREATER THAN 13D.
 1337   VRIGHT2  AD     NEG12
 1338            EXTEND
 1339  2         BZMF   VSSR            IF SO, BRANCH AND SHIFT IMMEDIATELY.
 1340            AD     NEGONE          IF NOT, REDUCE MPTEMP BY A TOTAL OF 14,
 1341            TS     MPTEMP          AND DO A SHIFT RIGHT AND ROUND BY 14.
 1342            CAF    ZERO            THE ROUND AT THIS STAGE MAY INTRODUCE A
 1343            TS     L               ONE BIT ERROR IN A SHIFT RIGHT 15D.
 1344            XCH    MPAC
 1345            XCH    MPAC +1
 1346            TC     SETROUND        X COMPONENT NOW SHIFTED, SO MAKE UP THE
 1347            DAS    MPAC            ROUNDING QUANTITY (0 IN A AND 0 OR +-1
A1348                                   IN L).
 1349            XCH    MPAC +3         REPEAT THE ABOVE PROCESS FOR Y AND Z.
 1350            XCH    MPAC +4
 1351            TC     SETROUND
 1352  2         DAS    MPAC +3         NO OVERFLOW ON THESE ADDS.
 1353            XCH    MPAC +5
 1354            XCH    MPAC +6
 1355            TC     SETROUND
 1356  2         DAS    MPAC +5
 1357            CCS    MPTEMP          SEE IF DONE, DOING FINAL DECREMENT.
 1358            TCF    VRIGHT2
 1359   TCSUBTR  TCF    SUBTR
 1360  2BIASLO   DEC    .2974 B-1       SQRT CONSTANT
 1361  4         TCF    DANZIG
 1362   SETROUND DOUBLE                 MAKES UP ROUNDING QUANTITY FROM ARRIVING
 1363            TS     MPAC +2         C(A). L IS ZERO INITIALLY.
 1364            CAF    ZERO
 1365            XCH    L
 1366            TC     Q               RETURN AND DO THE DAS, RESETTING L TO 0.
P1367  2         PROCESS SR AND SRR FOR SCALARS.
 1368   GENSCR   CA     MPTEMP          SEE IF THE ORIGINAL SHIFT COUNT WAS LESS
 1369    +1      AD     NEG12           THAN 14D.
 1370            EXTEND
 1371  2         BZMF   DOSSHFT         DO THE SHIFT IMMEDIATELY IF SO.
 1372    +4      AD     NEGONE          IF NOT, DECREMENT SHIFT COUNT BY 14D AND
 1373            TS     MPTEMP          SHIFT MPAC RIGHT 14 PLACES.
 1374            CAF    ZERO
 1375            XCH    MPAC
 1376            XCH    MPAC +1
 1377            TS     MPAC +2
 1378            CCS    MPTEMP          SEE IF FINISHED, DO FINAL DECREMENT.
 1379            TC     GENSCR +1
 1380   NEG12    DEC    -12
 1381   SLOPEHI  DEC    .5884           SQRT CONSTANT.
 1382            CAF    BIT10           FINISHED WITH SHIFT. SEE IF ROUND
 1383            MASK   ADDRWD          WANTED.
 1384            CCS    A
 1385            TC     ROUNDSUB
 1386  2         TCF    DANZIG          DO SO AND/OR EXIT.
 1387   DOSSHFT  INDEX  MPTEMP          PICK UP SHIFTING BIT.
 1388            CAF    BIT14
 1389            TS     MPTEMP
 1390            CAF    BIT10           SEE IF TERMINAL ROUND DESIRED.
 1391            MASK   ADDRWD
 1392            CCS    A
 1393            TCF    RIGHTR          YES.
 1394            TCF    MPACSHR         JUST SHIFT RIGHT.
P1395  2         PROCESS THE RIGHT- (SL(R) WITH A NEGATIVE COUNT), LEFT-, AND LE
 1396  9FT OPTIONS.
 1397   RIGHT-   CS     MPTEMP          GET ABSOLUTE VALUE - 1 OF SHIFT COUNT
 1398            AD     OCT176          UNDERSTANDING THAT BIT8 (PSEUDO-SIGN)
 1399            TS     MPTEMP          WAS 1 INITIALLY.
 1400  2         TCF    RIGHT           DO NORMAL SHIFT RIGHT.
 1401   LEFT-    CS     MPTEMP          SAME PROLOGUE TO LEFT FOR INDEXED RIGHT
 1402            AD     OCT176          SHIFTS WHOSE NET SHIFT COUNT IS NEGATIVE
 1403  2         TS     MPTEMP
 1404   LEFT     CCS    MODE            SINCE LEFT SHIFTING IS SONE ONE PLACE AT
 1405            TCF    GENSCL          A TIME, NO COMPARISON WITH 14 NEED BE
 1406            TCF    GENSCL          DONE. FOR SCALARS, SEE IF TERMINAL ROUND
 1407  2         TCF    VSSL            DESIRED. FOR VECTORS, SHIFT IMMEDIATELY.
 1408   GENSCL   CAF    BIT6            PUT ROUNDING BIT (BIT10 OF ADDRWD) INTO
 1409            EXTEND                 BIT 15 OF CYR WHERE THE ROUNDING BIT OF
 1410            MP     ADDRWD          A SHORT SHIFT LEFT WOULD BE.
 1411            TS     CYR
 1412            TCF    TSSL +2         DO THE SHIFT.
P1413            SCALAR DIVISION INSTRUCTIONS, DDV AND BDDV, ARE EXECUTED HERE.
 1414  9AT THIS POINT, THE DIVIDEND IS IN MPAC
R1415  2AND THE DIVISOR IN BUF.
 1416   DDV/BDDV CS     ONE             INITIALIZATION.
 1417            TS     DVSIGN          +-1 FOR POSITIVE QUOTIENT - -0 FOR NEG.
 1418            TS     DVNORMCT        DIVIDEND NORMALIZATION COUNT.
 1419  2         TS     MAXDVSW         NEAR-ONE DIVIDE FLAG.
 1420            CCS    BUF             FORCE BUF POSITIVE WITH THE MAJOR PART
 1421            TCF    BUF+            NON-ZERO.
 1422            TCF    +2
 1423  2         TCF    BUF-
 1424            XCH    BUF +1          SHIFT DIVIDEND AND DIVISOR LEFT 14.
 1425            XCH    BUF
 1426            XCH    MPAC +1
 1427            XCH    MPAC
 1428            EXTEND                 CHECK FOR OVERFLOW.
 1429            BZF    +2
 1430  2         TCF    DVOVF
 1431            CCS    BUF             TRY AGAIN ON FORMER MINOR PART.
 1432            TCF    BUF+
 1433            TCF    DVOVF           OVERFLOW ON ZERO DIVISOR.
 1434  2         TCF    BUF-
 1435   DVOVF    CAF    POSMAX          ON DIVISION OVERFLOW OF ANY SORT, SET
 1436            TS     MPAC            SET DP MPAC TO +-POSMAX.
 1437            TC     FINALDV +3
 1438            CAF    ONE             SET OVERFLOW INDICATOR AND EXIT.
 1439  2         TCF    SETOVF
 1440   BUF-     EXTEND                 IF BUF IS NEGATIVE, COMPLEMENT IT AND
 1441            DCS    BUF             MAINTAIN DVSIGN FOR FINAL QUOTIENT SIGN.
 1442            DXCH   BUF
 1443  2         INCR   DVSIGN          NOW -0.
 1444   BUF+     CCS    MPAC            FORCE MPAC POSITIVE, CHECKING FOR ZERO
 1445            TCF    MPAC+           DIVIDEND IN THE PROCESS.
 1446            TCF    +2
 1447            TCF    MPAC-
 1448            CCS    MPAC +1
 1449            TCF    MPAC+
 1450            TCF    DANZIG          EXIT IMMEDIATELY ON ZERO DIVIDEND.
 1451            TCF    MPAC-
 1452  2         TCF    DANZIG
 1453   MPAC-    EXTEND                 FORCE MPAC POSITIVE AS BUF IN BUF-.
 1454            DCS    MPAC
 1455            DXCH   MPAC
 1456  8         INCR   DVSIGN          NOW +1 OR -0.
 1457   MPAC+    CS     MPAC            CHECK FOR DIVISION OVERFLOW. IF THE
 1458            AD     NEGONE          MAJOR PART OF THE DIVIDEND IS LESS THAN
 1459            AD     BUF             THE MAJOR PART OF THE DIVISOR BY AT
 1460            CCS    A               LEAST TWO, WE CAN PROCEED IMMEDIATELY
 1461            TCF    DVNORM          WITHOUT NORMALIZATION PRODUCING A DVMAX.
 1462  2-1/2+2   OCT    60001           USED IN SQRTSUB.
 1463            TCF    +1              IF THE ABOVE DOES NOT HOLD, FORCE SIGN
 1464            CAF    HALF            AGREEMENT IN NUMERATOR AND DENOMINATOR
 1465            DOUBLE                 TO FACILITATE OVERFLOW AND NEAR-ONE
 1466            AD     MPAC +1         CHECKING.
 1467            TS     MPAC +1
 1468            CAF    ZERO
 1469            AD     POSMAX
 1470  2         ADS    MPAC
 1471            CAF    HALF            SAME FOR BUF.
 1472            DOUBLE
 1473            AD     BUF +1
 1474            TS     BUF +1
 1475            CAF    ZERO
 1476            AD     POSMAX
 1477  2         ADS    BUF
 1478            CS     MPAC            CHECK MAGNITUDE OF SIGN-CORRECTED
 1479            AD     BUF             OPERANDS.
 1480            CCS    A
 1481            TCF    DVNORM          DIVIDE OK - WILL NOT BECOME MAXDV CASE.
 1482   LBUF2    ADRES  BUF2
 1483  2         TCF    DVOVF           DIVISOR NOT LESS THAN DIVIDEND - OVF.
 1484            TS     MAXDVSW         IF THE MAJOR PARTS OF THE DIVIDEND AND
 1485            CS     MPAC +1         DIVISOR ARE EQUAL, A SPECIAL APPROXIMA-
 1486            AD     BUF +1          TION IS USED (PROVIDED THE DIVISION IS
 1487            EXTEND                 POSSIBLE, OF COURSE).
 1488            BZMF   DVOVF
 1489  8         TCF    DVNORM          IF NO OVERFLOW.
 1490   BUFNORM  EXTEND                 ADD -1 TO AUGMENT SHIFT COUNT AND SHIFT
 1491            AUG    DVNORMCT        LEFT ONE PLACE.
 1492            EXTEND
 1493            DCA    BUF
 1494  2         DAS    BUF
 1495   DVNORM   CA     BUF             SEE IF DIVISOR NORMALIZED YET.
 1496            DOUBLE
 1497            OVSK
 1498  2         TCF    BUFNORM         NO - SHIFT LEFT ONE AND TRY AGAIN.
 1499            DXCH   MPAC            CALL DIVIDEND NORMALIZATION SEQUENCE
 1500            INDEX  DVNORMCT        PRIOR TO DOING THE DIVIDE.
 1501  2         TC     MAXTEST
 1502            TS     MPAC +2         RETURNS WITH DIVISION DONE AND C(A) = 0.
 1503            TCF    DANZIG
P1504  2         THE FOLLOWING ARE PROLOGUES TO SHIFT THE DIVIDEND ARRIVING IN A
 1505  9 AND L BEFORE THE DIVIDE.
 1506    -21D    LXCH   SR              SPECIAL PROLOGUE FOR UNIT WHEN THE
 1507            EXTEND                 LENGTH OF THE ARGUMENT WAS NOT LESS THAN
 1508            MP     HALF            .5. IN THIS CASE, EACH COMPONENT MUST BE
 1509            XCH    L               SHIFTED RIGHT ONE TO PRODUCE A HALF-UNIT
 1510            AD     SR              VECTOR.
 1511            XCH    L
 1512  2         TCF    GENDDV +1       WITH DP DIVIDEND IN A,L.
 1513            DDOUBL                 PROLOGUE WHICH NORMALIZES THE DIVIDEND
 1514            DDOUBL                 WHEN IT IS KNOWN THAT NO DIVISION
 1515            DDOUBL                 OVERFLOW WILL OCCUR.
 1516            DDOUBL
 1517            DDOUBL
 1518            DDOUBL
 1519            DDOUBL
 1520            DDOUBL
 1521            DDOUBL
 1522            DDOUBL
 1523            DDOUBL
 1524            DDOUBL
 1525            DDOUBL
 1526  2         DXCH   MPAC
 1527   MAXTEST  CCS    MAXDVSW         0 IF MAJORS MIGHT BE =, -1 OTHERWISE.
 1528  2BIASHI   DEC    .4192 B-1       SQRT CONSTANTS
 1529            TCF    MAXDV           CHECK TO SEE IF THEY ARE NOW EQUAL.
P1530            THE FOLLOWING IS A GENERAL PURPOSE DOUBLE PRECISION DIVISION RO
 1531  9UTINE. IT DIVIDES MPAC BY BUF AND LEAVES
R1532  2THE RESULT IN MPAC. THE FOLLOWING CONDITIONS MUST BE SATISFIED:
R1533  2         1.  THE DIVISOR (BUF) MUST BE POSITIVE AND NOT LESS THAN .5.
R1534            2.  THE DIVIDEND (MPAC) MUST BE POSITIVE WITH THE MAJOR PART OF
 1535  9 MPAC STRICTLY LESS THAN THAT OF BUF
R1536  2(A SPECIAL APPROXIMATION, MAXDV, IS USED WHEN THE MAJOR PARTS ARE EQUAL)
 1537  9.
R1538            UNDERSTANDING THAT A/B = Q + S(R/B) WHERE S = 2(-14) AND Q AND
 1539  9R ARE QUOTIENT AND REMAINDER, RESPEC-
R1540   TIVELY, THE FOLLOWING APPROXIMATION IS OBTAINED BY MULTIPLYING ABOVE AND
 1541  9 BELOW BY C - SD AND NEGLECTING TERMS OF
R1542  2ORDER S-SQUARED (POSSIBLY INTRODUCING ERROR INTO THE LOW TWO BITS OF THE
 1543  9 RESULT). SIGN AGREEMENT IS UNNECESSARY.
R1544            A + SB .      (R - QD)
 1545  9    A + SB
R1546            ------ = Q + S(------) WHERE Q AND R ARE QUOTIENT AND REMAINDER
 1547  9 OF ------ RESPECTIVELY.
R1548  4         C + SD        (  C   )
 1549  9      C
 1550   GENDDV   DXCH   MPAC            WE NEED A AND B ONLY FOR FIRST DV.
 1551    +1      EXTEND                 (SPECIAL UNIT PROLOGUE ENTERS HERE).
 1552            DV     BUF             A NOW CONTAINS Q AND L, R.
 1553  2         DXCH   MPAC
 1554            CS     MPAC            FORM DIVIDEND FOR MINOR PART OF RESULT.
 1555            EXTEND
 1556            MP     BUF +1
 1557            AD     MPAC +1         OVERFLOW AT THIS POINT IS POSITIVE SINCE
 1558            OVSK                   R IS POSITIVE IN EVERY CASE.
 1559  2         TCF    +5
 1560            EXTEND                 OVERFLOW CAN BE REMOVED BY SUBTRACTING C
 1561            SU     BUF             (BUF) ONCE SINCE R IS ALWAYS LESS THAN C
 1562            INCR   MPAC            IN THIS CASE. INCR COMPENSATES SUBTRACT.
 1563  2         TCF    +DOWN           (SINCE C(A) IS STILL POSITIVE).
 1564    +5      EXTEND                 C(A) CAN BE MADE LESS THAN C IN MAGNI-
 1565            BZMF   -UP             TUDE BY DIMINISHING IT BY C (SINCE C IS
A1566  8                                NOT LESS THAN .5) UNLESS C(A) = 0.
 1567   +DOWN    EXTEND
 1568            SU     BUF             IF POSITIVE, REDUCE ONLY IF NECESSARY
 1569            EXTEND                 SINCE THE COMPENSATING INCR MIGHT CAUSE
 1570            BZF    +3              OVERFLOW.
 1571            EXTEND                 DONT SUBTRACT UNLESS RESULT IS POSITIVE
 1572  2         BZMF   ENDMAXDV        OR ZERO.
 1573    +3      INCR   MPAC            KEEP SUBTRACT HERE AND COMPENSATE.
 1574  2         TCF    FINALDV
 1575   -UP      EXTEND                 IF ZERO, SET MINOR PART OF RESULT TO
 1576  2         BZF    FINALDV +3      ZERO.
 1577            EXTEND                 IF NEGATIVE, ADD C TO A, SUBTRACTING ONE
 1578            DIM    MPAC            TO COMPENSATE. DIM IS OK HERE SINCE THE
 1579  8ENDMAXDV AD     BUF             MAJOR PART NEVER GOES NEGATIVE.
 1580   FINALDV  ZL                     DO DV TO OBTAIN MINOR PART OF RESULT.
 1581            EXTEND
 1582            DV     BUF
 1583  2 +3      TS     MPAC +1
 1584            CCS    DVSIGN          LEAVE RESULT POSITIVE UNLESS C(DVSIGN)=
 1585            TC     Q               -0.
 1586            TC     Q
 1587  2         TC     Q
 1588            EXTEND
 1589            DCS    MPAC
 1590            DXCH   MPAC
 1591            CAF    ZERO            SO WE ALWAYS RETURN WITH C(A) = 0.
 1592            TC     Q
P1593            IF THE MAJOR PARTS OF THE DIVISOR AND DIVIDEND ARE EQUAL, BUT T
 1594  9HE MINOR PARTS ARE SUCH THAT THE
R1595   DIVIDEND IS STRICTLY LESS THAN THE DIVISOR IN MAGNITUDE, THE FOLLOWING A
 1596  9PPROXIMATION IS USED. THE ASSUMPTIONS
R1597  2ARE THE SAME AS THE GENERAL ROUTINE WITH THE ADDITION THAT SIGN AGREEMEN
 1598  9T IS NECESSARY (B, C, & D POSITIVE).
R1599                   C + SB .          (C + B - D)
R1600                   ------ = 37777 + S(---------)
R1601  2                C + SD            (    C    )
R1602  4         THE DIVISION MAY BE PERFORMED IMMEDIATELY SINCE B IS STRICTLY L
 1603  9ESS THAN D AND C IS NOT LESS THAN .5.
 1604   MAXDV    CS     MPAC            SEE IF MAXDV CASE STILL HOLDS AFTER
 1605            AD     BUF             NORMALIZATION.
 1606            EXTEND
 1607            BZF    +2
 1608  2         TCF    GENDDV          MPAC NOW LESS THAN BUF - DIVIDE AS USUAL
 1609    +2      CAF    POSMAX          SET MAJOR PART OF RESULT.
 1610  2         TS     MPAC
 1611            CS     BUF +1          FORM DIVIDEND OF MINOR PART OF RESULT.
 1612            AD     MPAC +1
 1613            TCF    ENDMAXDV        GO ADD C AND DO DIVIDE, ATTACHING SIGN
A1614                                   BEFORE EXITING.
P1615  2         VECTOR DIVIDED BY SCALAR, V/SC, IS EXECUTED HERE. THE VECTOR IS
 1616  9 NOW IN MPAC WITH SCALAR IN BUF.
 1617   V/SC2    CS     ONE             INITIALIZE DIVIDEND NORMALIZATION COUNT
 1618            TS     DVNORMCT        AND DIVISION SIGN REGISTER.
 1619  2         TS     VBUF +5
 1620            CCS    BUF             FORCE DIVISOR POSITIVE WITH MAJOR PART
 1621            TCF    /BUF+           NON-ZERO (IF POSSIBLE).
 1622            TCF    +2
 1623  2         TCF    /BUF-
 1624            XCH    BUF +1          SHIFT VECTOR AND SCALAR LEFT 14.
 1625            XCH    BUF
 1626            XCH    MPAC +1
 1627            XCH    MPAC
 1628            EXTEND                 CHECK FOR OVERFLOW IN EACH CASE.
 1629            BZF    +2
 1630  2         TCF    DVOVF
 1631            XCH    MPAC +4
 1632            XCH    MPAC +3
 1633            EXTEND
 1634            BZF    +2
 1635  2         TCF    DVOVF
 1636            XCH    MPAC +6
 1637            XCH    MPAC +5
 1638            EXTEND
 1639            BZF    +2
 1640  2         TCF    DVOVF
 1641            CCS    BUF
 1642            TCF    /BUF+
 1643            TCF    DVOVF           ZERO DIVISOR - OVERFLOW.
 1644            TCF    /BUF-
 1645  2         TCF    DVOVF
 1646   /BUF-    EXTEND                 ON NEGATIVE, COMPLEMENT BUF AND MAINTAIN
 1647            DCS    BUF             DVSIGN IN VBUF +5.
 1648            DXCH   BUF
 1649  8         INCR   VBUF +5
 1650   /BUF+    CAF    HALF            FORCE SIGN AGREEMENT IN DIVISOR.
 1651            DOUBLE
 1652            AD     BUF +1
 1653            TS     BUF +1
 1654            CAF    ZERO
 1655            AD     POSMAX
 1656  2         ADS    BUF
 1657            XCH    BUF2            LEAVE ABS(ORIGINAL DIVISOR) IN BUF2 FOR
 1658            CA     BUF +1          OVERFLOW TESTING.
 1659            TS     BUF2 +1
 1660  2         TCF    /NORM           NORMALIZE DIVISOR IN BUF.
 1661   /NORM2   EXTEND                 IF LESS THAN .5, AUGMENT DVNORMCT AND
 1662            AUG    DVNORMCT        DOUBLE DIVISOR.
 1663            EXTEND
 1664            DCA    BUF
 1665  2         DAS    BUF
 1666   /NORM    CA     BUF             SEE IF DIVISOR NORMALIZED.
 1667            DOUBLE
 1668            OVSK
 1669  2         TCF    /NORM2          DOUBLE AND TRY AGAIN IF NOT.
 1670            TC     V/SCDV          DO X COMPONENT DIVIDE.
 1671            DXCH   MPAC +3         SUPPLY ARGUMENTS IN USUAL SEQUENCE.
 1672            DXCH   MPAC
 1673  2         DXCH   MPAC +3
 1674            TC     V/SCDV          Y COMPONENT.
 1675            DXCH   MPAC +5
 1676            DXCH   MPAC
 1677  2         DXCH   MPAC +5
 1678            TC     V/SCDV          Z COMPONENT.
 1679            TCF    VROTATEX        GO RE-ARRANGE COMPONENTS BEFORE EXIT.
P1680  2         SUBROUTINE USED BY V/SC TO DIVIDE VECTOR COMPONENT IN MPAC,+1 B
 1681  9Y THE SCALAR GIVEN IN BUF.
 1682   V/SCDV   CA     VBUF +5         REFLECTS SIGN OF SCALAR.
 1683  2         TS     DVSIGN
 1684            CCS    MPAC            FORCE MPAC POSITIVE, EXITING ON ZERO.
 1685            TCF    /MPAC+
 1686            TCF    +2
 1687  2         TCF    /MPAC-
 1688            CCS    MPAC +1
 1689            TCF    /MPAC+
 1690            TC     Q
 1691            TCF    /MPAC-
 1692  2         TC     Q
 1693   /MPAC-   EXTEND                 USUAL COMPLEMENTING AND SETTING OF SIGN.
 1694            DCS    MPAC
 1695            DXCH   MPAC
 1696  2         INCR   DVSIGN
 1697   /MPAC+   CS     ONE             INITIALIZE NEAR-ONE SWITCH.
 1698  2         TS     MAXDVSW
 1699            CS     MPAC            CHECK POSSIBLE OVERFLOW.
 1700            AD     BUF2            UNNORMALIZED INPUT DIVISOR.
 1701            EXTEND
 1702  2         BZMF   /AGREE          CHECK FOR NEAR-ONE OR OVERFLOW.
 1703   DDVCALL  DXCH   MPAC            CALL PRE-DIVIDE NORMALIZATION.
 1704            INDEX  DVNORMCT
 1705  8         TCF    MAXTEST
 1706   /AGREE   CAF    HALF            FORCE SIGN AGREEMENT IN DIVIDEND
 1707            DOUBLE                 (ALREADY DONE FOR DIVISOR).
 1708            AD     MPAC +1
 1709            TS     MPAC +1
 1710            CAF    ZERO
 1711            AD     POSMAX
 1712  2         ADS    MPAC
 1713            CS     MPAC            CHECK TO SEE IF OVERFLOW GONE OR IF
 1714            AD     BUF2            NEAR-ONE CASE IS PRESENT.
 1715            CCS    A
 1716            TCF    DDVCALL         NOT NEAR-ONE.
 1717   SLOPELO  DEC    .8324
 1718  2         TCF    DVOVF           NO HOPE.
 1719            TS     MAXDVSW         SIGNAL POSSIBLE NEAR-ONE CASE.
 1720            CS     MPAC +1         SEE IF DIVISION CAN BE DONE.
 1721            AD     BUF2 +1
 1722            EXTEND
 1723            BZMF   DVOVF
 1724            TCF    DDVCALL         GOING TO MAXDV.
P1725  2         THE FOLLOWING ROUTINE EXECUTES THE UNIT INSTRUCTION, WHICH TAKE
 1726  9S THE UNIT OF THE VECTOR IN MPAC.
 1727   UNIT     TC     MPACVBUF        SAVE THE ARGUMENT IN VBUF.
 1728            TC     VSQSUB          DOT MPAC WITH ITSELF.
 1729            EXTEND
 1730            DCA    MPAC            LEAVE THE SQUARE OF THE LENGTH OF THE
 1731            INDEX  FIXLOC          ARGUMENT IN LVSQUARE.
 1732  2         DXCH   LVSQUARE
 1733  2         TC     SQRTSUB         GO TAKE THE NORMALIZED SQUARE ROOT.
 1734            CCS    MPAC            CHECK FOR UNIT OVERFLOW.
 1735            TCF    +2              MPAC IS NOT LESS THAN .5 UNLESS THE
 1736  2         TCF    DVOVF           INPUT TO SQRTSUB WAS 0.
 1737            CS     FOURTEEN        SEE IF THE INPUT WAS SO SMALL THE THE
 1738            AD     MPTEMP          FIRST TWO REGISTERS OF THE SQUARE WERE 0
 1739            CCS    A
 1740            COM                    IF SO, SAVE THE NEGATIVE OF THE SHIFT
 1741  2         TCF    SMALL           COUNT -15D.
 1742  2         TCF    LARGE           (THIS IS USUALLY THE CASE.)
 1743            CS     THIRTEEN        IF THE SHIFT COUNT WAS EXACTLY 14, SET
 1744  2         TS     MPTEMP          THE PRE-DIVIDE NORM COUNT TO -13D.
 1745            CA     MPAC            SHIFT THE LENGTH RIGHT 14 BEFORE STORING
 1746   SMALL2   TS     L               (SMALL EXITS TO THIS POINT).
 1747            CAF    ZERO
 1748  2         TCF    LARGE2          GO TO STORE LENGTH AND PROCEED.
 1749   LARGE    CCS    MPTEMP          MOST ALL CASES COME HERE.
 1750  2         TCF    LARGE3          SEE IF NO NORMALIZATION WAS REQUIRED BY
 1751            CS     SRDDV           SQRT, AND IF SO, SET UP FOR A SHIFT
 1752            TS     MPTEMP          RIGHT 1 BEFORE DIVIDING TO PRODUCE
 1753            EXTEND                 THE DESIRED HALF UNIT VECTOR.
 1754            DCA    MPAC
 1755  8         TCF    LARGE2
 1756   LARGE3   COM                    LEAVE NEGATIVE OF SHIFT COUNT-1 FOR
 1757  2         TS     MPTEMP          PREDIVIDE LEFT SHIFT.
 1758            COM                    PICK UP REQUIRED SHIFTING BIT TO UNNORM-
 1759            INDEX  A               ALIZE THE SQRT RESULT.
 1760            CAF    BIT14
 1761            TS     BUF
 1762            EXTEND
 1763            MP     MPAC +1
 1764            XCH    BUF
 1765            EXTEND                 (UNNORMALIZE THE SQRT FOR LV).
 1766            MP     MPAC
 1767            XCH    L
 1768            AD     BUF
 1769  2         XCH    L
 1770   LARGE2   INDEX  FIXLOC
 1771  2         DXCH   LV              LENGTH NOW STORED IN WORK AREA.
 1772            CS     ONE
 1773  2         TS     MAXDVSW         NO MAXDV CASES IN UNIT.
 1774            DXCH   VBUF            PREPARE X COMPONENT FOR DIVIDE, SETTING
 1775            DXCH   MPAC            LENGTH OF VECTOR AS DIVISOR IN BUF.
 1776            DXCH   BUF
 1777  2         TC     UNITDV
 1778            DXCH   VBUF +2         DO Y AND Z IN USUAL FASHION SO WE CAN
 1779            DXCH   MPAC            EXIT THROUGH VROTATEX.
 1780            DXCH   MPAC +3
 1781  2         TC     UNITDV
 1782            DXCH   VBUF +4
 1783            DXCH   MPAC
 1784            DXCH   MPAC +5
 1785            TC     UNITDV
 1786            TCF    VROTATEX        AND EXIT.
P1787            IF THE LENGTH OF THE ARGUMENT VECTOR WAS LESS THAN 2(-28), EACH
 1788  9 COMPONENT MUST BE SHIFTED LEFT AT LEAST
R1789  214 PLACES BEFORE THE DIVIDE. NOTE THAT IN THIS CASE, THE MAJOR PART OF E
 1790  9ACH COMPONENT IS ZERO.
 1791  2SMALL    TS     MPTEMP          NEGATIVE OF PRE-DIVIDE SHIFT COUNT.
 1792            CAF    ZERO            SHIFT EACH COMPONENT LEFT 14.
 1793            XCH    VBUF +1
 1794            XCH    VBUF
 1795            XCH    VBUF +3
 1796            XCH    VBUF +2
 1797            XCH    VBUF +5
 1798  2         XCH    VBUF +4
 1799            CS     MPTEMP
 1800            INDEX  A
 1801            CAF    BIT14
 1802            EXTEND
 1803            MP     MPAC
 1804  2         TCF    SMALL2
 1805   THIRTEEN DEC    13
 1806   FOURTEEN DEC    14
P1807  2         THE FOLLOWING ROUTINE SETS UP THE CALL TO THE DIVIDE ROUTINES.
 1808   UNITDV   CCS    MPAC            FORCE MPAC POSITIVE IF POSSIBLE, SETTING
 1809            TCF    UMPAC+          DVSIGN ACCORDING TO THE SIGN OF MPAC
 1810            TCF    +2              SINCE THE DIVISOR IS ALWAYS POSITIVE
 1811  2         TCF    UMPAC-          HERE.
 1812            CCS    MPAC +1
 1813            TCF    UMPAC+
 1814            TC     Q               EXIT IMMEDIATELY ON ZERO.
 1815            TCF    UMPAC-
 1816  2         TC     Q
 1817   UMPAC-   CS     ZERO            IF NEGATIVE, SET -0 IN DVSIGN FOR FINAL
 1818            TS     DVSIGN          COMPLEMENT.
 1819            EXTEND
 1820            DCS    MPAC            PICK UP ABSOLUTE VALUE OF ARG AND JUMP.
 1821            INDEX  MPTEMP
 1822  2         TCF    MAXTEST
 1823   UMPAC+   TS     DVSIGN          SET DVSIGN FOR POSITIVE QUOTIENT.
 1824            DXCH   MPAC
 1825            INDEX  MPTEMP
 1826            TCF    MAXTEST
P1827  2         MISCELLANEOUS UNARY OPERATIONS.
 1828   DSQ      TC     DSQSUB          SQUARE THE DP CONTENTS OF MPAC.
 1829  2         TCF    DANZIG
 1830   ROUND    TC     ROUNDSUB        ROUNDS MPAC TO DOUBLE PRECISION.
 1831            CAF    ZERO            FORCE DP MODE.
 1832  2         TCF    NEWMODE
 1833   ABVALABS CCS    MODE            ABVAL OR ABS INSTRUCTION.
 1834            TCF    ABS             DO ABS ON SCALAR.
 1835  2         TCF    ABS
 1836   ABVAL    TC     VSQSUB          DOT MPAC WITH ITSELF.
 1837  2         LXCH   MODE            MODE IS NOW DP (L ZERO AFTER DAS).
 1838            EXTEND                 STORE SQUARE OF LENGTH IN WORK AREA.
 1839            DCA    MPAC
 1840            INDEX  FIXLOC
 1841  2         DXCH   LVSQUARE
 1842   SQRT     TC     SQRTSUB         TAKE THE SQUARE ROOT OF MPAC.
 1843            CCS    MPTEMP          RETURNED NORMALIZED SQUARE ROOT. SEE IF
 1844            TCF    +2              ANY UN-NORMALIZATION REQUIRED AND EXIT
 1845  2         TCF    DANZIG          IF NOT.
 1846            AD     NEG12           A RIGHT SHIFT OF MORE THAN 13 COULD BE
 1847            EXTEND                 REQUIRED IF INPUT WAS ZERO IN MPAC,+1.
 1848            BZMF   SQRTSHFT        GOES HERE IN MOST CASES.
 1849            ZL                     IF A LONG SHIFT IS REQUIRED, GO TO
 1850            LXCH   ADDRWD          GENERAL RIGHT SHIFT ROUTINES.
 1851  2         TCF    GENSCR +4       ADDRWD WAS ZERO TO PREVENT ROUND.
 1852   SQRTSHFT INDEX  MPTEMP          SELECT SHIFTING BIT AND EXIT THROUGH
 1853            CAF    BIT15           SHIFT ROUTINES.
 1854            TS     MPTEMP
 1855            CAF    ZERO            TO ZERO MPAC +2 IN THE PROCESS.
 1856  2         TCF    MPACSHR +3
 1857   ABS      TC     BRANCH          TEST SIGN OF MPAC AND COMPLEMENT IF
 1858            TCF    DANZIG
 1859            TCF    DANZIG
 1860  8         TCF    COMP
 1861   VDEF     CS     FOUR            VECTOR DEFINE - ESSENTIALLY TREATS
 1862            ADS    PUSHLOC         SCALAR IN MPAC AS X COMPONENT, PUSHES UP
 1863            EXTEND                 FOR Y AND THEN AGAIN FOR Z.
 1864            INDEX  A
 1865            DCA    2
 1866            DXCH   MPAC +3
 1867            EXTEND
 1868            INDEX  PUSHLOC
 1869            DCA    0
 1870            DXCH   MPAC +5
 1871            CS     ONE             MODE IS NOW VECTOR.
 1872  2         TCF    NEWMODE
 1873   VSQ      TC     VSQSUB          DOT MPAC WITH ITSELF.
 1874            CAF    ZERO
 1875  2         TCF    NEWMODE         MODE IS NOW DP.
 1876   PUSH     EXTEND                 PUSH DOWN MPAC LEAVING IT LOADED.
 1877            DCA    MPAC
 1878            INDEX  PUSHLOC         PUSH DOWN FIRST TWO REGISTERS IN EACH
 1879  2         DXCH   0
 1880            INDEX  MODE            INCREMENT PUSHDOWN POINTER.
 1881            CAF    NO.WDS
 1882  2         ADS    PUSHLOC
 1883            CCS    MODE
 1884            TCF    TPUSH           PUSH DOWN MPAC +2.
 1885  2         TCF    DANZIG          DONE FOR DP.
 1886            EXTEND                 ON VECTOR, PUSH DOWN Y AND Z COMPONENTS.
 1887            DCA    MPAC +3
 1888            INDEX  PUSHLOC
 1889            DXCH   0 -4
 1890            EXTEND
 1891            DCA    MPAC +5
 1892            INDEX  PUSHLOC
 1893            DXCH   0 -2
 1894  2         TCF    DANZIG
 1895   TPUSH    CA     MPAC +2
 1896  2         TCF    ENDTPUSH +2
 1897   RVQ      INDEX  FIXLOC          RVQ - RETURN IVA QPRET.
 1898            CA     QPRET
 1899            TCF    GOTO +1
P1900            THE FOLLOWING SUBROUTINES ARE USED IN SQUARING MPAC, IN BOTH TH
 1901  9E SCALAR AND VECTOR SENSE. THEY ARE
R1902  2SPECIAL CASES OF DMPSUB AND DOTSUB, PUT IN TO SAVE SOME TIME.
 1903   DSQSUB   CA     MPAC +1         SQUARES THE SCALAR CONTENTS OF MPAC.
 1904            EXTEND
 1905            SQUARE
 1906            TS     MPAC +2
 1907            CAF    ZERO            FORM 2(CROSS TERM).
 1908            XCH    MPAC +1
 1909            EXTEND
 1910            MP     MPAC
 1911            DDOUBL                 AND MAYBE OVERFLOW.
 1912            DAS    MPAC +1         AND SET A TO NET OVERFLOW.
 1913            XCH    MPAC
 1914            EXTEND
 1915            SQUARE
 1916            DAS    MPAC
 1917  2         TC     Q
 1918   VSQSUB   EXTEND                 DOTS THE VECTOR IN MPAC WITH ITSELF.
 1919            QXCH   DOTRET
 1920            TC     DSQSUB          SQUARE THE X COMPONENT.
 1921            DXCH   MPAC +3
 1922            DXCH   MPAC
 1923            DXCH   BUF             SO WE CAN END IN DOTSUB.
 1924            CA     MPAC +2
 1925  2         TS     BUF +2
 1926            TC     DSQSUB          SQUARE Y COMPONENT.
 1927            DXCH   MPAC +1
 1928            DAS    BUF +1
 1929            AD     MPAC
 1930            AD     BUF
 1931            TS     BUF
 1932            TCF    +2
 1933  2         TS     OVFIND          IF OVERFLOW.
 1934            DXCH   MPAC +5
 1935            DXCH   MPAC
 1936            TC     DSQSUB          SQUARE Z COMPONENT.
 1937            TCF    ENDDOT          END AS IN DOTSUB.
P1938            DOUBLE PRECISION SQUARE ROOT ROUTINE. TAKE THE SQUARE ROOT OF T
 1939  9HE TRIPLE PRECISION (MPAC +2 USED ONLY
R1940   IN NORMALIZATION) CONTENTS OF MPAC AND LEAVE THE NORMALIZED RESULT IN MP
 1941  9AC (C(MPAC) GREATER THAN OR EQUAL TO
R1942  4.5). THE RIGHT SHIFT COUNT (TO UNNORMALIZE) IS LEFT IN MPTEMP.
 1943   SQRTSUB  CAF    ZERO            START BY ZEROING RIGHT SHIFT COUNT.
 1944  2         TS     MPTEMP
 1945            CCS    MPAC            CHECK FOR POSITIVE ARGUMENT, SHIFTING
 1946            TCF    SMPAC+          FIRST SIGNIFICANT MPAC REGISTER INTO
 1947            TCF    +2              MPAC ITSELF.
 1948  2         TCF    SQRTNEG         SEE IF MAG OF ARGUMENT LESS THAN 10(-4).
 1949            XCH    MPAC +2         MPAC IS ZERO - SHIFT LEFT 14.
 1950            XCH    MPAC +1
 1951            TS     MPAC
 1952            CAF    SEVEN           AUGMENT RIGHT SHIFT COUNTER.
 1953  2         TS     MPTEMP
 1954            CCS    MPAC            SEE IF MPAC NOW PNZ.
 1955            TCF    SMPAC+
 1956            TCF    +2
 1957  2         TCF    ZEROANS         NEGATIVE BUT LESS THAN 10(-4) IN MAG.
 1958            XCH    MPAC +1         ZERO - SHIFT LEFT 14 AGAIN.
 1959            TS     MPAC
 1960            CAF    SEVEN           AUGMENT RIGHT SHIFT COUNTER.
 1961  2         ADS    MPTEMP
 1962            CCS    MPAC
 1963            TCF    SMPAC+
 1964            TC     Q               SQRT(0) = 0.
 1965            TCF    ZEROANS
 1966  4         TC     Q
 1967   SQRTNEG  CCS    A               ARGUMENT IS NEGATIVE, BUT SEE IF SIGN-
 1968  2         TCF    SQRTABRT        CORRECTED ARGUMENT IS LESS THAN 10(-4)
 1969            CCS    MPAC +1         IN MAGNITUDE. IF SO, CALL ANSWER ZERO.
 1970   ZEROANS  CAF    ZERO            FORCE ANSWER TO ZERO HERE.
 1971            TCF    FIXROOT
 1972            TCF    SQRTABRT
 1973  2         TCF    FIXROOT
 1974  8SQRTABRT TC
 1975   SMPAC+   AD     -1/2+2          SEE IF ARGUMENT GREATER THAN OR EQUAL TO
 1976            EXTEND                 .5.
 1977  2         BZMF   SRTEST          IF SO, SEE IF LESS THAN .25.
 1978            DXCH   MPAC            WE WILL TAKE THE SQUARE ROOT OF MPAC/2.
 1979            LXCH   SR              SHIFT RIGHT 1 AND GO TO THE SQRT ROUTINE
 1980            EXTEND
 1981            MP     HALF
 1982            DXCH   MPAC
 1983            XCH    SR
 1984  2         ADS    MPAC +1         GUARANTEED NO OVERFLOW.
 1985   ARGHI    CAF    SLOPEHI         ARGUMENT BETWEEN .25 AND .5. GET A
 1986            EXTEND                 LINEAR APPROXIMATION FOR THIS RANGE.
 1987            MP     MPAC
 1988  2         AD     BIASHI          X0/2 = (MPAC/2)(SLOPEHI) + BIASHI/2.
 1989    +4      TS     BUF             X0/2 (ARGLO ENTERS HERE).
 1990            EXTEND
 1991            DV     BUF             (MPAC/2)/(X0/2)
 1992            EXTEND
 1993            MP     HALF
 1994  2         ADS    BUF             X1 = X0/2 + .5(MPAC/2)/(X0/2).
 1995            EXTEND
 1996            MP     HALF            FORM UP X1/2.
 1997            DXCH   MPAC            SAVE AND BRING OUT ARGUMENT.
 1998            EXTEND                 TAKE DP QUOTIENT WITH X1.
 1999            DV     BUF
 2000            TS     BUF +1          SAVE MAJOR PART OF QUOTIENT.
 2001            CAF    ZERO            FORM MINOR PART OF QUOTIENT USING
 2002            XCH    L               (REMAINDER,0).
 2003            EXTEND
 2004            DV     BUF
 2005            TS     L               IN PREPARATION FOR DAS.
 2006            CA     BUF +1
 2007  2         DAS    MPAC            X2 = X1/2 + (MPAC/2)X1
 2008            CCS    A               OVERFLOWS IF ARGUMENT WAS NEAR POSMAX.
 2009            CAF    POSMAX
 2010   FIXROOT  TS     MPAC
 2011            TS     MPAC +1
 2012  8         TC     Q               RETURN TO CALLER TO UNNORMALIZE, ETC.
 2013   SRTEST   AD     QUARTER         ARGUMENT WAS LESS THAN .5, SEE IF LESS
 2014            EXTEND                 THAN .25.
 2015  2         BZMF   SQRTNORM        IF SO, BEGIN NORMALIZATION.
 2016            DXCH   MPAC            IF BETWEEN .5 AND .25, SHIFT RIGHT 1 AND
 2017            LXCH   SR              START AT ARGLO.
 2018            EXTEND
 2019            MP     HALF
 2020            DXCH   MPAC
 2021            XCH    SR
 2022  2         ADS    MPAC +1         NO OVERFLOW.
 2023   ARGLO    CAF    SLOPELO         (NORMALIZED) ARGUMENT BETWEEN .125 AND
 2024            EXTEND                 .25
 2025            MP     MPAC
 2026            AD     BIASLO
 2027  2         TCF    ARGHI +4        BEGIN SQUARE ROOT.
 2028   SQRTNM2  EXTEND                 SHIFT LEFT 2 AND INCREMENT RIGHT SHIFT
 2029            DCA    MPAC +1         COUNT (FOR TERMINAL UNNORMALIZATION).
 2030            DAS    MPAC +1
 2031            AD     MPAC
 2032  2         ADS    MPAC            (NO OVERFLOW).
 2033   SQRTNORM INCR   MPTEMP          FIRST TIME THROUGH, JUST SHIFT LEFT 1
 2034            EXTEND                 (PUTS IN EFFECTIVE RIGHT SHIFT SINCE
 2035            DCA    MPAC +1         WE WANT MPAC/2).
 2036            DAS    MPAC +1
 2037            AD     MPAC
 2038            ADS    MPAC            (AGAIN NO OVERFLOW).
 2039            DOUBLE
 2040  2         TS     CYL
 2041   NORMTEST CCS    CYL             SEE IF ARGUMENT NOW NORMALIZED AT
 2042            CCS    CYL             GREATER THAN .125.
 2043            TCF    SQRTNM2         NO - SHIFT LEFT 2 MORE AND TRY AGAIN.
 2044            TCF    ARGHI           YES - NOW BETWEEN .5 AND .25.
 2045            TCF    ARGLO           ARGUMENT NOW BETWEEN .25 AND .125.
P2046  2TRIGONOMETRIC FUNCTION PACKAGE.
R2047  2         THE FOLLOWING TRIGONOMETRIC FUNCTIONS ARE AVAILABLE AS INTERPRE
 2048  9TIVE OPERATIONS:
R2049            1.  SIN                COMPUTES (1/2)SINE(2 PI MPAC).
R2050  2         2.  COS                COMPUTES (1/2)COSINE(2 PI MPAC).
R2051            3.  ASIN               COMPUTES (1/2PI)ARCSINE(2 MPAC).
R2052  2         4.  ACOS               COMPUTES (1/2PI)ARCCOSINE(2 MPAC).
R2053  4SIN-ASIN AND COS-ACOS ARE MUTUALLY INVERSE, IE SIN(ASIN(X)) = X.
 2054   COSINE   TC     BRANCH          FINDS COSINE USING THE IDENTITY
 2055            TCF    +3              COS(X) = SIN(PI/2 - ABS(X)).
 2056            TCF    PRESINE
 2057  2         TCF    PRESINE
 2058    +3      EXTEND
 2059            DCS    MPAC
 2060  2         DXCH   MPAC
 2061   PRESINE  CAF    QUARTER         PI/2 SCALED.
 2062  4         ADS    MPAC
 2063   SINE     DXCH   MPAC            DOUBLE ARGUMENT.
 2064            DDOUBL
 2065            OVSK                   SEE IF OVERFLOW PRESENT.
 2066  2         TCF    +3              IF NOT, ARGUMENT OK AS IS.
 2067            EXTEND                 IF SO, WE LOST (OR GAINED) PI, SO
 2068            DCOM                   COMPLEMENT MPAC USING THE IDENTITY
A2069                                   SIN(X-(+)PI) = SIN(-X).
 2070    +3      DXCH   MPAC
 2071            CA     MPAC            SEE IF ARGUMENT GREATER THAN .5 IN
 2072            DOUBLE                 MAGNITUDE. IF SO, REDUCE IT TO LESS THAN
 2073            TS     L               .5 (+-PI/2 SCALED) AS FOLLOWS:
 2074  2         TCF    SN1
 2075            INDEX  A               IF POSITIVE, FORM PI - X, IF NEGATIVE
 2076            CAF    NEG1/2 +1       USE -PI - X.
 2077            DOUBLE
 2078            EXTEND
 2079            SU     MPAC            GUARANTEED NO OVERFLOW.
 2080            TS     MPAC
 2081            CS     MPAC +1
 2082  8         TS     MPAC +1
 2083   SN1      EXTEND                 SET UP TO EVALUATE HASTINGS POLYNOMIAL
 2084            DCA    MPAC
 2085            DXCH   BUF2
 2086  2         TC     DSQSUB          SQUARE MPAC.
 2087            TC     POLY            EVALUATE FOURTH ORDER POLYNOMIAL.
 2088            DEC    3
 2089            2DEC   +.3926990796
 2090            2DEC   -.6459637111
 2091            2DEC   +.318758717
 2092            2DEC   -.074780249
 2093            2DEC   +.009694988
 2094            CAF    LBUF2           MULTIPLY BY ARGUMENT AND SHIFT LEFT 2.
 2095  2         TC     DMPSUB -1
 2096            EXTEND
 2097            DCA    MPAC +1
 2098            DAS    MPAC +1
 2099            AD     MPAC
 2100            ADS    MPAC            NEITHER SHIFT OVERFLOWS.
 2101            EXTEND
 2102            DCA    MPAC +1
 2103            DAS    MPAC +1
 2104            AD     MPAC
 2105            ADS    MPAC
 2106            TCF    DANZIG
P2107  2         ARCSIN/ARCCOS ROUTINE.
 2108   ARCSIN   CAF    LASINEX         COMPUTE ARCSIN BY USING THE IDENTITY
 2109  2         TCF    +2              ARCSIN(X) = PI/2 - ARCCOS(X).
 2110   ARCCOS   CAF    LDANZIG         (EXITS IMMEDIATELY).
 2111            TS     ESCAPE
 2112            TC     BRANCH          TEST SIGN OF INPUT.
 2113            TCF    ACOSST          START IMMEDIATELY IF POSITIVE.
 2114            TCF    ACOSZERO        ARCCOS(0) = PI/2 = .25.
 2115            EXTEND                 IF NEGATIVE, USE THE IDENTITY
 2116            DCS    MPAC            ARCCOS(X) = PI - ARCCOS(-X), FORCING
 2117            DXCH   MPAC            ARGUMENT POSITIVE.
 2118            CAF    TCSUBTR         SET EXIT  TO DO ABOVE BEFORE
 2119            XCH    ESCAPE          ARCSIN/ARCCOS CONSIDERATIONS.
 2120  2         TS     ESCAPE2
 2121   ACOSST   CS     HALF            TEST MAGNITUDE OF INPUT.
 2122            AD     MPAC
 2123            CCS    A
 2124  2         TCF    ACOSOVF         THIS IS PROBABLY AN OVERFLOW CASE.
 2125  2LASINEX  TCF    ASINEX
 2126  2         TCF    ACOSST2         NO OVERFLOW - PROCEED.
 2127            CCS    MPAC +1         IF MAJOR PART IS .5, CALL ANSWER 0
 2128            CAF    ZERO            UNLESS MINOR PART NEGATIVE.
 2129  2         TCF    ACOS=0
 2130  2         TCF    ACOSST2
 2131   ACOS=0   TS     MPAC +1
 2132            TS     MPAC
 2133  2         TC     ESCAPE
 2134   ACOSST2  EXTEND                 NOW THAT ARGUMENT IS IN PROPER RANGE,
 2135            DCS    MPAC            BEGIN COMPUTATION. USE HASTINGS
 2136            AD     HALF            APPROXIMATION ARCCOS(X) = SQRT(1-X)P(X)
 2137            DXCH   MPAC            IN A SCALED VERSION WHERE P(X) IS A
 2138  2         DXCH   BUF2            SEVENTH ORDER POLYNOMIAL.
 2139  2         TC     SQRTSUB         RETURNS WITH NORMALIZED SQUARE ROOT.
 2140            CCS    MPTEMP          SEE IF UN-NORMALIZATION REQUIRED.
 2141  8         TCF    ACOSSHR         IF SO.
 2142   ACOS3    DXCH   MPAC            SET UP FOR POLYNOMIAL EVALUATION.
 2143            DXCH   BUF2
 2144  2         DXCH   MPAC
 2145            TC     POLY
 2146            DEC    6
 2147            2DEC   +.353553385     COEFFICIENTS ARE C 2(+I)/PISQRT(2) WHERE
 2148            2DEC*  -.0483017006 B+1*                 I
 2149            2DEC*  +.0200273085 B+2*    WHERE C STANDS FOR ORIGINAL COEFFS.
 2150            2DEC*  -.0112931863 B+3*
 2151            2DEC*  +.00695311612 B+4*
 2152            2DEC*  -.00384617957 B+5*
 2153            2DEC*  +.001501297736 B+6*
 2154            2DEC*  -.000284160334 B+7*
 2155            CAF    LBUF2           DO FINAL MULTIPLY AND GO TO ANY
 2156            TC     DMPSUB -1       EPILOGUE SEQUENCES.
 2157  2         TC     ESCAPE
 2158   SUBTR    EXTEND                 EPILOGUE FOR NEGATIVE INPUTS TO ARCCOS.
 2159            DCS    MPAC
 2160            AD     HALF            FORMS PI - ARCCOS(-X) = ARCCOS(X).
 2161            DXCH   MPAC
 2162  2         TC     ESCAPE2         GO TO POSSIBLE ARCSIN EPILOGUE.
 2163   ASINEX   EXTEND
 2164            DCS    MPAC            ARCSIN EPILOGUE - GET ARCSIN(X)
 2165            AD     QUARTER         = PI/2 - ARCCOS(X).
 2166            DXCH   MPAC
 2167  8LDANZIG  TCF    DANZIG
 2168   ACOSSHR  INDEX  A               THE SHIFT RIGHT IS LESS THAN 14 SINCE
 2169            CAF    BIT14           THE INPUT WAS NON-ZERO DP.
 2170            TS     MPTEMP
 2171            TC     VSHRRND         DP SHIFT RIGHT AND ROUND.
 2172  2         TCF    ACOS3           PROCEED.
 2173   ACOSOVF  CCS    A               IF MAJOR PART WAS ONLY 1 MORE THAN .5,
 2174            TCF    +2              CALL ANSWER 0.
 2175            TCF    ACOS=0
 2176  2         TCF    ACOS=0
 2177  2ACOSABRT TC
 2178   ACOSZERO CAF    QUARTER         ACOS(0) = PI/2.
 2179            TCF    ACOS=0 +1       SET MPAC AND EXIT VIA ESCAPE.
P2180  2         THE FOLLOWING INSTRUCTIONS ARE AVAILABLE FOR SETTING, MODIFYING
 2181  9, AND BRANCHING ON INDEX REGISTERS:
R2182            1.  AXT                ADDRESS TO INDEX TRUE.
R2183            1.  AXC                ADDRESS TO INDEX COMPLEMENTED.
R2184            3.  LXA                LOAD INDEX FROM ERASABLE.
R2185            4.  LXC                LOAD INDEX COMPLEMENTED FROM ERASABLE.
R2186            5.  SXA                STORE INDEX IN ERASABLE.
R2187  2         6.  XCHX               EXCHANGE INDEX REIGSTER WITH ERASABLE.
R2188            7.  INCR               INCREMENT INDEX REGISTER.
R2189            8.  XAD                ERASABLE ADD TO INDEX REGISTER.
R2190  2         9.  XSU                ERASABLE SUBTRACT FROM INDEX REGISTER.
R2191  4        10.  TIX                BRANCH ON INDEX REGISTER AND DECREMENT.
 2192  2         SETLOC 12000           SUFFIX CLASS 01 IS IN BANK 1.
 2193   AXT      TC     TAGSUB          SELECT APPROPRIATE INDEX REGISTER.
 2194            CA     POLISH
 2195   XSTORE   INDEX  INDEXLOC        CONTAINS C(FIXLOC) OR C(FIXLOC)+1.
 2196            TS     X1
 2197  2         TCF    DANZIG
 21971  AXC      TC     TAGSUB
 21972           CS     POLISH
 21973 2         TC     XSTORE
 2198   LXA      TC     TAGSUB          LOAD INDEX FROM ERASABLE.
 2199            INDEX  ADDRWD
 2200            CA     0
 2201  2         TCF    XSTORE
 2202   LXC      TC     TAGSUB          LOAD INDEX FROM ERASABLE COMPLEMENTED.
 2203            INDEX  ADDRWD
 2204            CS     0
 2205  2         TCF    XSTORE
 2206   SXA      TC     TAGSUB          STORE INDEX IN ERASABLE.
 2207            INDEX  INDEXLOC
 2208            CA     X1
 2209  2         TCF    STORE1          (STORE SINGLE PRECISION BEFORE EXIT).
 2210   XCHX     TC     TAGSUB          EXCHANGE INDEX REGISTER WITH ERASABLE.
 2211            INDEX  ADDRWD
 2212            CA     0
 2213            INDEX  INDEXLOC
 2214            XCH    X1
 2215  2         TCF    STORE1
 2216   XAD      TC     TAGSUB          ERASABLE ADD TO INDEX.
 2217            INDEX  ADDRWD
 2218            CA     0
 2219   XAD2     INDEX  INDEXLOC
 2220            ADS    X1              IGNORING OVERFLOWS.
 2221  2         TCF    DANZIG
 2222   INCR     TC     TAGSUB          INCREMENT INDEX REGISTER.
 2223            CA     POLISH
 2224  2         TCF    XAD2
 2225   XSU      TC     TAGSUB          ERASABLE SUBTRACT FROM INDEX.
 2226            INDEX  ADDRWD
 2227            CS     0
 2228  4         TCF    XAD2
 2229   TIX      TC     TAGSUB          BRANCH AND DECREMENT ON INDEX.
 2230            INDEX  INDEXLOC
 2231            CS     X1
 2232            INDEX  INDEXLOC
 2233            AD     X1
 2234            EXTEND                 NO OPERATION IF DECREMENTED INDEX IS
 2235  2         BZMF   DANZIG          NEGATIVE OR ZERO.
 2236   DOTIXBR  INDEX  INDEXLOC
 2237  2         XCH    X1              IGNORING OVERFLOWS.
 2238  4         TCF    GOTO            DO THE BRANCH USING THE CADR IN POLISH.
R2239  2         SUBROUTINE WHICH SETS THE ADDRESS OF THE SPECIFIED INDEX IN IND
 2240  9EXLOC. (ACTUALLY, THE ADDRESS -38D.)
 2241   TAGSUB   CA     FIXLOC
 2242  2         TS     INDEXLOC
 2243            CCS    CYR             BIT 15 SPECIFIES INDEX.
 2244            INCR   INDEXLOC        0 MEANS USE X2.
 2245            TC     Q
 2246            TC     Q               1 FOR X1.
P2247  2         MISCELLANEOUS OPERATION CODES WITH DIRECT ADDRESSES. INCLUDED H
 2248  9ERE ARE:
R2249            1.  ITA                STORE QPRET (RETURN ADDRESS) IN ERASABLE
 2250  9.
R2251            2.  CALL               CALL A SUBROUTINE, LEAVING RETURN IN QPR
 2252  9ET.
R2253            3.  RTB                RETURN TO BASIC LANGUAGE AT THE GIVEN AD
 2254  9DRESS.
R2255            4.  BHIZ               BRANCH IF THE HIGH ORDER OF MPAC IS ZERO
 2256  9 (SINGLE PRECISION).
R2257            5.  BOV                BRANCH ON OVERFLOW.
R2258  2         6.  GOTO               SIMPLE SEQUENCE CHANGE.
 2259   RTB/BHIZ CCS    CYR
 2260   RTB      CA     POLISH
 2261  2         TCF    BANKJUMP        CALL BASIC ROUTINE.
 2262   BHIZ     CCS    MPAC
 2263            TCF    DANZIG
 2264            TCF    GOTO
 2265            TCF    DANZIG
 2266  2         TCF    GOTO
 2267   BOV(B)   CCS    OVFIND          BRANCH ON OVERFLOW TO BASIC OR INTERP.
 2268            TCF    +2
 2269            TCF    DANZIG
 2270            TS     OVFIND
 2271            CCS    CYR
 2272            TCF    RTB             IF BASIC.
 2273   B5TOB8   OCT    360
 2274  8         TCF    GOTO
 2275   BZE/GOTO CCS    CYR             SEE WHICH OP-CODE IS DESIRED.
 2276            TC     BRANCH          DO BZE.
 2277            TCF    DANZIG
 2278            TCF    GOTO            DO GOTO.
 2279  2         TCF    DANZIG
 2280   BPL/BMN  CCS    CYR
 2281            TCF    BPL
 2282  25B10     DEC    5 B+10          SHIFTS OP CODE IN SWITCH INSTRUCTION ADR
 2283            TC     BRANCH          DO BMN.
 2284            TCF    DANZIG
 2285            TCF    DANZIG
 2286  2         TCF    GOTO            ONLY IF NNZ.
 2287   BPL      TC     BRANCH
 2288            TCF    GOTO            IF POSITIVE OR ZERO.
 2289            TCF    GOTO
 2290  2         TCF    DANZIG
 2291   CALL/ITA CCS    CYR
 2292  2         TCF    CALL
 2293  2LOW4     OCT    17              MASK USED BY SWITCH INSTRUCTIONS.
 2294            INDEX  FIXLOC          STORE QPRET.
 2295            CA     QPRET
 2296            TCF    STORE1
P2297  2         THE FOLLOWING OPERATIONS ARE AVAILABLE FOR ALTERING AND TESTING
 2298  9 INTERPRETIVE SWITCHES:
R2299   00       BONSET                 SET A SWITCH AND DO A GOTO IF IT WAS ON.
R2300   01       SETGO                  SET A SWITCH AND DO A GOTO.
R2301   02       BOFSET                 SET A SWITCH AND DO A GOTO IF IT WAS OFF
R2302  203       SET                    SET A SWITCH.
R2303   04       BONINV                 INVERT A SWITCH AND BRANCH IF IT WAS ON.
R2304   05       INVGO                  INVERT A SWITCH AND DO A GOTO.
R2305   06       BOFINV                 INVERT A SWITCH AND BRANCH IF IT WAS OFF
R2306  207       INVERT                 INVERT A SWITCH.
R2307   10       BONCLR                 CLEAR A SWITCH AND BRANCH IF IT WAS ON.
R2308   11       CLRGO                  CLEAR A SWITCH AND DO A GOTO.
R2309   12       BOFCLR                 CLEAR A SWITCH AND BRANCH IF IT WAS OFF.
R2310  213       CLEAR                  CLEAR A SWITCH.
R2311   14       BON                    BRANCH IF A SWITCH WAS ON.
R2312  416       BOFF                   BRANCH IF A SWITCH WAS OFF.
R2313  2         THE ADDRESS SUPPLIED WITH THE SWITCH INSTRUCTION IS INTERPRETED
 2314  9 AS FOLLOWS:
R2315            BITS 1-4    SWITCH BIT NUMBER (1-15).
R2316            BITS 5-8    SWITCH OPERATION NUMBER.
R2317  2         BITS 9-     SWITCH WORD NUMBER (UP TO 64 SWITCH WORDS).
R2318            THE ADDRESS ITSELF IS MADE UP BY THE YUL SYSTEM ASSEMBLER. THE
 2319  9BRANCH INSTRUCTIONS REQUIRE TWO
R2320  4ADDRESSES, THE SECOND TAKEN AS THE DIRECT (OR INDIRECT IF IN ERASABLE) A
 2321  9DDRESS OF THE BRANCH.
 2322   SWITCHES CAF    LOW4            LEAVE THE SWITCH BIT IN  SWBIT  .
 2323            MASK   POLISH
 2324            INDEX  A
 2325            CAF    BIT15           (NUMBER FROM LEFT TO RIGHT.)
 2326  2         TS     SWBIT
 2327            CAF    BIT8            LEAVE THE SWITCH WORD NUMBER IN  SWWORD
 2328            EXTEND
 2329            MP     POLISH
 2330  2         TS     SWWORD
 23305           INHINT                 DURING SWITCH CHANGE SO RUPT CAN USE TOO
 2331            INDEX  A               LEAVE THE SWITCH WORD ITSELF IN L.
 2332            CA     STATE
 2333  8         TS     Q               Q WILL BE USED AS A CHANNEL.
 2334            CAF    BIT11
 2335            EXTEND                 DISPATCH SWITCH BIT OPERATION AS IN BITS
 2336            MP     POLISH          7-8 OF POLISH.
 2337            MASK   B3TOB4          GETS 4X2-BIT CODE.
 2338            INDEX  A
 2339  2         TCF    +1
 2340    +1      CA     SWBIT           00 - SET SWITCH IN QUESTION.
 2341            EXTEND
 2342            ROR    Q
 2343  2         TCF    SWSTORE
 2344    +5      CA     SWBIT           01 - INVERT SWITCH.
 2345            EXTEND
 2346            RXOR   Q
 2347  2         TCF    SWSTORE
 2348    +9D     CS     SWBIT           10 - CLEAR.
 2349            MASK   Q
 2350   SWSTORE  INDEX  SWWORD
 2351  8         TS     STATE           NEW SWITCH WORD.
 2352    +13D    RELINT                 11 - NOOP.
 23525           CAF    BIT13
 2353            EXTEND                 DISPATCH SEQUCE CHANGING OR BRANCHING
 2354            MP     POLISH          CODE.
 2355            MASK   B3TOB4
 2356            INDEX  A
 2357  2         TCF    +1              ORIGINALLY STORED IN BITS 5-6.
 2358    +1      CS     Q               00 - BRANCH IF ON.
 2359   TEST     MASK   SWBIT
 2360            CCS    A
 2361  2         TCF    SWSKIP
 2362  2 +5      TCF    SWBRANCH        01 - GO TO.
 2363  2         TCF    SWSKIP          HERE ONLY ON BIT 15.
 2364  2         SETLOC +2
 2366    +9D     CA     Q               10 - BRANCH IF OFF.
 2367  2         TCF    TEST
 2368  2B3TOB4   OCT    14
 2369  2SWSKIP   INCR   LOC
 2370  2SW/      EQUALS SWITCHES
 2371  2 +13D    TCF    DANZIG          11 - NOOP.
 2372   ENDINTS1 EQUALS
L      2INTER-BANK COMMUNICATION
R0001            THE FOLLOWING ROUTINE CAN BE USED TO CALL A SUBROUTINE IN ANOTH
 0002  9ER BANK. IN THE BANKCALL VERSION, THE
R0003  2CADR OF THE SUBROUTINE IMMEDIATELY FOLLOWS THE  TC BANKCALL  INSTRUCTION
 0004  9, WITH C(A) AND C(L) PRESERVED.
 0005  2         SETLOC ENDINTFF
 0006   BANKCALL DXCH   BUF2            SAVE INCOMING A,L.
 0007            INDEX  Q               PICK UP CADR.
 0008            CA     0
 0009  2         INCR   Q               SO WE RETURN TO THE LOC. AFTER THE CADR.
R0010  2         SWCALL IS IDENTICAL TO BANKCALL, EXCEPT THAT THE CADR ARRIVES I
 0011  9N A.
 0012   SWCALL   TS     L
 0013            LXCH   FBANK           SWITCH BANKS, SAVING RETURN.
 0014            MASK   LOW10           GET SUB-ADDRESS OF CADR.
 0015            XCH    Q               A,L NOW CONTAINS DP RETURN.
 0016            DXCH   BUF2            RESTORING INPUTS IF THIS IS A BANKCALL.
 0017            INDEX  Q
 0018  2         TC     10000           SETTING Q TO SWRETURN.
 0019   SWRETURN XCH    BUF2 +1         COMES HERE TO RETURN TO CALLER. C(A,L)
 0020            XCH    FBANK           ARE PRESERVED FOR RETURN.
 0021            XCH    BUF2 +1
 0022  4         TC     BUF2
R0023            THE FOLLOWING ROUTINE CAN BE USED AS A UNILATERAL JUMP WITH C(A
 0024  9,L) PRESERVED AND THE CADR IMMEDIATELY
R0025  2FOLLOWING THE TC POSTJUMP INSTRUCTION.
 0026   POSTJUMP XCH    Q               SAVE INCOMING C(A).
 0027            INDEX  A               GET CADR.
 0028  2         CA     0
R0029  2         BANKJUMP IS THE SAME AS POSTJUMP, EXCEPT THAT THE CADR ARRIVES
 0030  9IN A.
 0031   BANKJUMP TS     FBANK
 0032            MASK   LOW10
 0033            XCH    Q               RESTORING INPUT C(A) IF THIS WAS A
 0034            INDEX  Q               POSTJUMP.
 0035            TCF    10000
P0036  2         THE FOLLOWING ROUTINE GETS THE RETURN CADR SAVED BY SWCALL OR B
 0037  9ANKCALL AND LEAVES IT IN A.
 0038   MAKECADR CAF    LOW10
 0039            MASK   BUF2
 0040            AD     BUF2 +1
 0041  4         TC     Q
R0042            THE FOLLOWING ROUTINE OBTAINS THE TWO WORDS BEGINNING AT THE AD
 0043  9DRESS ARRIVING IN A, AND LEAVES THEM IN
R0044  2A,L.
 0045   DATACALL TS     L
 0046            LXCH   FBANK
 0047            LXCH   MPTEMP          SAVE FORMER BANK.
 0048            MASK   LOW10
 0049            EXTEND
 0050            INDEX  A
 0051  2         DCA    10000
 0052            XCH    MPTEMP
 0053            TS     FBANK           RESTORE FBANK.
 0054            CA     MPTEMP
 0055  2         TC     Q
 0056   ENDIBNKF EQUALS
L      2EXECUTIVE
 0001  2         SETLOC ENDIBNKF
R0002  2         TO ENTER A JOB REQUEST REQUIRING NO VAC AREA:
 0003   NOVAC    TS     NEWPRIO         SAVE PRIORITY OF NEW JOB.
 0004            EXTEND
 0005            INDEX  Q               Q WILL BE UNDISTURBED THROUGHOUT.
 0006            DCA    0               2CADR OF JOB ENTERED.
 0007            DXCH   NEWLOC
 0008            CAF    EXECBANK
 0009            XCH    FBANK
 0010            TS     EXECTEM1
 0011  2         TCF    NOVAC2          ENTER EXECUTIVE BANK.
R0012  2         TO ENTER A JOB REQUEST REQUIRING A VAC AREA - E.G., ALL (PARTIA
 0013  9LLY) INTERPRETIVE JOBS.
 0014   FINDVAC  TS     NEWPRIO
 0015            EXTEND
 0016            INDEX  Q
 0017            DCA    0
 0018            DXCH   NEWLOC
 0019            CAF    EXECBANK
 0020            XCH    FBANK
 0021  2         TCF    FINDVAC2        OFF TO EXECUTIVE SWITCHED-BANK.
R0022  2         TO SUSPEND A BASIC JOB SO A HIGHER PRIORITY JOB MAY BE SERVICED
 0023  9:
 0024   CHANG1   CAF    EXECBANK
 0025            TS     L
 0026            CA     Q
 0027    +3      LXCH   BBANK
 0028            INHINT
 0029  2         TCF    CHANJOB
R0030  2         TO SUSPEND AN INTERPRETIVE JOB:
 0031   CHANG2   CAF    EXECBANK
 0032            TS     L
 0033            CS     LOC             NEGATIVE LOC SHOWS JOB INTERPRETIVE.
 0034            TCF    CHANG1 +3
P0037  2         TO VOLUNTARILY SUSPEND A JOB UNTIL THE COMPLETION OF SOME ANTIC
 0038  9IPATED EVENT (I/O EVENT ETC.):
 0039   JOBSLEEP TS     LOC
 0040            CAF    EXECBANK
 0041            TS     FBANK
 0042  2         TCF    JOBSLP1
R0043  2         TO AWAKEN A JOB PUT TO SLEEP IN THE ABOVE FASHION:
 0044   JOBWAKE  TS     NEWLOC
 0045            CS     TWO             EXIT IS VIA FINDVAC/NOVAC PROCEDURES.
 0046            ADS    Q
 0047            CAF    EXECBANK
 0048            XCH    FBANK
 0049  2         TCF    JOBWAKE2
R0050  2         TO CHANGE THE PRIORITY OF A JOB CURRENTLY UNDER EXECUTION:
 0051   PRIOCHNG INHINT                 NEW PRIORITY ARRIVES IN A. RETURNS TO
 0052            TS     NEWPRIO         CALLER AS SOON AS NEW JOB PRIORITY IS
 0053            CAF    EXECBANK        HIGHEST. PREPARE FOR POSSIBLE BASIC-
 0054            XCH    BBANK           STYLE CHANGE-JOB.
 0055            TS     BANKSET
 0056            CA     Q
 0057  2         TCF    PRIOCH2
R0058  2         TO REMOVE A JOB FROM EXECUTIVE CONSIDERATIONS:
 0059   ENDOFJOB CAF    EXECBANK
 0060            TS     FBANK
 0061  2         TCF    ENDJOB1
 0062   ENDFIND  CA     EXECTEM1        RETURN TO CALLER AFTER JOB ENTRY
 0063            TS     FBANK           COMPLETE.
 0064            INDEX  Q
 0065  2         TC     2
 0066   EXECBANK CADR   FINDVAC2
P0068  2         LOCATE AN AVAILABLE VAC AREA.
 0069  2         SETLOC ENDINTS1
 0070   FINDVAC2 TS     EXECTEM1        (SAVE CALLER'S BANK FIRST.)
 0071            CCS    VAC1USE
 0072            TCF    VACFOUND
 0073            CCS    VAC2USE
 0074            TCF    VACFOUND
 0075            CCS    VAC3USE
 0076            TCF    VACFOUND
 0077            CCS    VAC4USE
 0078            TCF    VACFOUND
 0079            CCS    VAC5USE
 0080            TCF    VACFOUND
 0081  2         TC                     ABORT IF NO VAC AREAS AVAILABLE.
 0082   VACFOUND AD     TWO             RESERVE THIS VAC AREA BY STORING A ZERO
 0083            ZL                     IN ITS VAC USE REGISTER AND STORE THE
 0084            INDEX  A               ADDRESS OF THE FIRST WORD OF IT IN THE
 0085            LXCH   0 -1            LOW NINE BITS OF THE PRIORITY WORD.
 0086  2         ADS    NEWPRIO
 0087   NOVAC2   CAF    ZERO            NOVAC ENTERS HERE. FIND A CORE SET.
 0088            TS     LOCCTR
 0089            CAF    NO.CORES        SEVEN SETS OF ELEVEN REGISTERS EACH.
 0090   NOVAC3   TS     EXECTEM2
 0091            INDEX  LOCCTR
 0092            CCS    PRIORITY        EACH PRIORITY REGISTER CONTAINS -0 IF
 0093            TCF    NEXTCORE        THE CORRESPONDING CORE SET IS AVAILABLE.
 0094   NO.CORES DEC    6
 0095            TCF    NEXTCORE        AN ACTIVE JOB HAS A POSITIVE PRIORITY
A0096  8                                BUT A DORMANT JOB'S PRIORITY IS NEGATIVE
 0097   CORFOUND CA     NEWPRIO         SET THE PRIORITY OF THIS JOB IN THE CORE
 0098            INDEX  LOCCTR          SET'S PRIORITY REGISTER AND SET THE
 0099            TS     PRIORITY        JOB'S PUSH-DOWN POINTER AT THE BEGINNING
 0100            MASK   LOW9            OF THE WORK AREA AND OVERFLOW INDICATOR
 0101            INDEX  LOCCTR
 0102  2         TS     PUSHLOC         OFF TO PREPARE FOR INTERPRETIVE PROGRAMS
 0103            CCS    LOCCTR          IF CORE SET ZERO IS BEING LOADED, SET UP
 0104            TCF    SETLOC          OVFIND AND FIXLOC IMMEDIATELY .
 0105            TS     OVFIND
 0106            CA     PUSHLOC
 0107  2         TS     FIXLOC
 01071  SPECTEST CCS    NEWJOB          SEE IF ANY ACTIVE JOBS WAITING (RARE).
 01072           TCF    SETLOC          MUST BE AWAKENED BUT UNCHANGED JOB.
 01073           SETLOC +2
 01074           TS     NEWJOB          +0 SHOWS ACTIVE JOB ALREADY SET.
 01075           DXCH   NEWLOC
 01076           DXCH   LOC
 01077 2         TCF    ENDFIND
 0108   SETLOC   DXCH   NEWLOC          SET UP THE LOCATION REGISTERS FOR THIS
 0109            INDEX  LOCCTR
 0110            DXCH   LOC
 0111            INDEX  NEWJOB          THIS INDEX INSTRUCTION INSURES THAT THE
 0112            CS     PRIORITY        HIGHEST ACTIVE PRIORITY WILL BE COMPARED
 0113            AD     NEWPRIO         WITH THE NEW PRIORITY TO SEE IF NEWJOB
 0114            EXTEND                 SHOULD BE SET TO SIGNAL A SWITCH.
 0115            BZMF   ENDFIND
 0116            CA     LOCCTR          LOCCTR IS LEFT SET AT THIS CORE SET IF
 0117            TS     NEWJOB          THE CALLER WANTS TO LOAD ANY MPAC
 0118  2         TCF    ENDFIND         REGISTERS, ETC.
 0119   NEXTCORE CAF    COREINC
 0120            ADS    LOCCTR
 0121            CCS    EXECTEM2
 0122            TCF    NOVAC3
 0123            TC                     ABORT IF NO MORE CORE SETS.
P0124  2         THE FOLLOWING ROUTINE SWAPS CORE SET 0 WITH THAT WHOSE RELATIVE
 0125  9 ADDRESS IS IN NEWJOB.
 0126    -1      DXCH   LOC
 0127   CHANJOB  INDEX  NEWJOB          LOC ARRIVES IN A AND BBANK IN L.
 0128            DXCH   LOC
 0129  2         DXCH   LOC
 0130            DXCH   MPAC            SWAP MULTI-PURPOSE ACCUMULATOR AREAS.
 0131            INDEX  NEWJOB
 0132            DXCH   MPAC
 0133            DXCH   MPAC
 0134            DXCH   MPAC +2
 0135            INDEX  NEWJOB
 0136            DXCH   MPAC +2
 0137            DXCH   MPAC +2
 0138            DXCH   MPAC +4
 0139            INDEX  NEWJOB
 0140            DXCH   MPAC +4
 0141            DXCH   MPAC +4
 0142            DXCH   MPAC +6
 0143            INDEX  NEWJOB
 0144            DXCH   MPAC +6
 0145  2         DXCH   MPAC +6
 0146            CAF    ZERO
 0148            XCH    OVFIND          MAKE PUSHLOC NEGATIVE IF OVFIND NZ.
 0149            EXTEND
 0150            BZF    +3
 0151            CS     PUSHLOC
 0152  2         TS     PUSHLOC
 0153            DXCH   PUSHLOC
 0154            INDEX  NEWJOB
 0155            DXCH   PUSHLOC
 0156            DXCH   PUSHLOC         SWAPS PUSHLOC AND PRIORITY.
 0157            CCS    PUSHLOC         SET OVERFLOW INDICATOR ACCORDING TO
 0158            CAF    ZERO
 0159            TCF    ENDPRCHG -1
 0160            CS     PUSHLOC
 0161            TS     PUSHLOC
 0162            CAF    ONE
 0163            XCH    OVFIND
 0164  2         TS     NEWJOB
 01645  ENDPRCHG RELINT
 0165            DXCH   LOC             BASIC JOBS HAVE POSITIVE ADDRESSES, SO
 0166            EXTEND                 DISPATCH WITH A DTCB.
 0167            BZMF   +2              IF INTERPRETIVE, SET UP EBANK, ETC.
 0168  8         DTCB
 0169            COM                    EPILOGUE TO JOB CHANGE FOR INTERPRETIVE
 0170            TS     LOC             RESUME.
 0171            CAF    FBANKMSK
 0172            MASK   L
 0173  2         TCF    INTRSM
R0174  2         COMPLETE JOBSLEEP PREPARATIONS.
 0175   JOBSLP1  INHINT
 0176            CS     PRIORITY        NNZ PRIORITY SHOWS JOB ASLEEP.
 0177            TS     PRIORITY
 0178            CAF    LOW7
 0179            MASK   BBANK
 0180            TS     BANKSET
 01803           CS     ZERO
 01806  JOBSLP2  TS     BUF +1          HOLDS - HIGHEST PRIORITY.
 0181            TCF    EJSCAN          SCAN FOR HIGHEST PRIORITY ALA ENDOFJOB.
P0182            TO WAKE UP A JOB, EACH CORE SET IS FOUND TO LOCATE ALL JOBS WHI
 0183  9CH ARE ASLEEP. IF THE FCADR IN THE
R0184   LOC REGISTER OF ANY SUCH JOB MATCHES THAT SUPPLIED BY THE CALLER, THAT J
 0185  9OB IS AWAKENED. IF NO JOB IS FOUND,
R0186  2LOCCTR IS SET TO -1 AND NO FURTHER ACTION TAKES PLACE.
 0187   JOBWAKE2 TS     EXECTEM1
 0188            CAF    ZERO            BEGIN CORE SET SCAN.
 0189            TS     LOCCTR
 0190            CAF    NO.CORES
 0191   JOBWAKE4 TS     EXECTEM2
 0192            INDEX  LOCCTR
 0193            CCS    PRIORITY
 0194            TCF    JOBWAKE3        ACTIVE JOB - CHECK NEXT CORE SET.
 0195   COREINC  DEC    12              12 REGISTERS PER CORE SET.
 0196  2         TCF    WAKETEST        SLEEPING JOB - SEE IF CADR MATCHES.
 0197   JOBWAKE3 CAF    COREINC
 0198            ADS    LOCCTR
 0199            CCS    EXECTEM2
 0200            TCF    JOBWAKE4
 0201            CS     ONE             EXIT IF SLEEPING JOB NOT FOUND.
 0202            TS     LOCCTR
 0203  2         TCF    ENDFIND
 0204   WAKETEST CS     NEWLOC
 0205            INDEX  LOCCTR
 0206            AD     LOC
 0207            EXTEND
 0208            BZF    +2              IF MATCH.
 0209  2         TCF    JOBWAKE3        EXAMINE NEXT CORE SET IF NO MATCH.
 0210            INDEX  LOCCTR          RE-COMPLEMENT PRIORITY TO SHOW JOB AWAKE
 0211            CS     PRIORITY
 0212            INDEX  LOCCTR
 0213  2         TS     PRIORITY
 0214            CS     FBANKMSK        MAKE UP THE 2CADR OF THE WAKE ADDRESS
 0215            MASK   NEWLOC          USING THE CADR IN NEWLOC AND THE EBANK
 0216            AD     2K              HALF OF BBANK SAVED IN BANKSET.
 0217            XCH    NEWLOC
 0218            MASK   FBANKMSK
 0219            INDEX  LOCCTR
 0220            AD     BANKSET
 0221  2         TS     NEWLOC +1
 0222            CCS    LOCCTR          SPECIAL TREATMENT IF THIS JOB WAS
 02222           TCF    SETLOC          ALREADY IN THE RUN (0) POSITION.
 02224           TCF    SPECTEST
P0223  2         PRIORITY CHANGE. CHANGE THE CONTENTS OF PRIORITY AND SCAN FOR T
 0224  9HE JOB OF HIGHEST PRIORITY.
 0225   PRIOCH2  TS     LOC
 02253           CAF    ZERO            SET FLAG TO TELL ENDJOB SCANNER IF THIS
 02256           TS     BUF             JOB IS STILL HIGHEST PRIORITY.
 0226            CAF    LOW9
 0227            MASK   PRIORITY
 0228            AD     NEWPRIO
 0229            TS     PRIORITY
 0230            COM
 0231            TCF    JOBSLP2         AND TO EJSCAN.
P0239  2         RELEASE THIS CORE SET AND VAC AREA AND SCAN FOR THE JOB OF HIGH
 0240  9EST ACTIVE PRIORITY.
 0241   ENDJOB1  INHINT
 0242            CS     ZERO
 02425           TS     BUF +1
 0243            XCH    PRIORITY
 0244            MASK   LOW9
 0245            CCS    A
 0246            INDEX  A
 0247  2         TS     0
 0248   EJSCAN   CCS    PRIORITY +12D
 02485           TC     EJ1
 0249            SETLOC +1
 02495 2         TCF    +1
 0250            CCS    PRIORITY +24D   EXAMINE EACH PRIORITY REGISTER TO FIND
 0251            TC     EJ1             THE JOB OF HIGHEST ACTIVE PRIORITY.
 0252   LOW9     OCT    00777
 0253  2         TCF    +1
 0254            CCS    PRIORITY +36D
 0255            TC     EJ1
 0256   -CCSPR  -CCS    PRIORITY
 0257  2         TCF    +1
 0258            CCS    PRIORITY +48D
 0259            TC     EJ1
 0260            SETLOC +1
 0261  2         TCF    +1
 0262            CCS    PRIORITY +60D
 0263            TC     EJ1
 0264            SETLOC +1
 0265  2         TCF    +1
 0266            CCS    PRIORITY +72D
 0267            TC     EJ1
 0268            SETLOC +1
 0269            TCF    +1
P0270  2         EVALUATE THE RESULTS OF THE SCAN.
 0271            CCS    BUF +1          SEE IF THERE ARE ANY ACTIVE JOBS WAITING
 0272            SETLOC +2
 02725           TCF    +2
 0273            TCF    DUMMYJOB
 0274            CCS    BUF             BUF IS ZERO IF THIS IS A PRIOCHNG AND
 0275            TCF    +2              CHANGED PRIORITY IS STILL HIGHEST.
 0276  2         TCF    ENDPRCHG
 0277            INDEX  A               OTHERWISE, SET NEWJOB TO THE RELATIVE
 0278            CAF    0 -1            ADDRESS OF THE NEW JOB'S CORE SET.
 0279            AD     -CCSPR
 0280            TS     NEWJOB
 0281  2         TCF    CHANJOB -1
 0282   EJ1      TS     BUF +2
 0283            AD     BUF +1          - OLD HIGH PRIORITY.
 0284            CCS    A
 0285            CS     BUF +2
 0286            TCF    EJ2             NEW HIGH PRIORITY.
 0287            NOOP
 0288            INDEX  Q
 0289  2         TC     2               PROCEED WITH SEARCH.
 0290   EJ2      TS     BUF +1
 0291            EXTEND
 0292            QXCH   BUF             FOR LOCATING CCS PRIORITY + X INSTR.
 0293            INDEX  BUF
 0294  2         TC     2
 02945  ENDEXECS EQUALS
P0295            IDLING AND COMPUTER ACTIVITY (GREEN) LIGHT MAINTENANCE. THE IDL
 0296  9ING ROUTINE IS NOT A JOB IN ITSELF,
R0297  2BUT RATHER A SUBROUTINE OF THE EXECUTIVE.
 02975 2         SETLOC EXECBANK +1
 0298   DUMMYJOB CS     ZERO            SET NEWJOB TO -0 FOR IDLING.
 0299            TS     NEWJOB
 0300            RELINT
 0301            CS     TWO             TURN OFF THE ACTIVITY LIGHT.
 0302            EXTEND
 0303            WAND   DSALMOUT
 03031 2         TCF    CHECKNJ +2
 03032  CHECKNJ  EXTEND                 SPECIAL NEWJOB TEST FOR SELF-CHECK,
 03033           QXCH   SELFRET         WHICH RUNS UNDER EXECUTIVE CONTROL,
 0304    +2      CCS    NEWJOB          BUT DOES NOT HAVE A JOBS CORE REGISTERS.
 0305            TCF    NUCHANGE        NEW JOB REQUIRING A CHANGE JOB.
 0306            CAF    TWO             NEW JOB ALREADY IN POSITION FOR
 0307  2         TCF    NUDIRECT        EXECUTION.
 0308            CAF    SELFBANK        RETURN TO SELF-CHECK.
 03081           TS     FBANK
 03082 2         TC     SELFRET
 0309   NUDIRECT EXTEND                 TURN THE GREEN LIGHT BACK ON.
 0310            WOR    DSALMOUT
 0311            DXCH   LOC             JOBS STARTED IN THIS FASHION MUST BE
 0312  2         DTCB                   BASIC.
 0313   NUCHANGE CAF    TWO
 0314            EXTEND
 0315            WOR    DSALMOUT
 03153           CAF    EXECBANK        SWAP CORE SETS.
 03156           TS     FBANK
 0316            INHINT                 CHANGE JOBS
 0317  2         TCF    CHANJOB -1
 03175  SELFBANK CADR   ENDEDOP
 0318   ENDEXECF EQUALS
L      2WAITLIST
R0001  2GROUNDRULE....DELTA T SHOULD NOT EXCEED 12000 (= 2 MINUTES)
 0002  2         SETLOC ENDEXECF
 0003  2         EBANK= LST1            TASK  LISTS IN SWITCHED E BANK.
 0004   WAITLIST XCH    Q                SAVE DELTA T IN Q AND RETURN IN
 0005            TS     WAITEXIT        WAITEXIT.
 0006            EXTEND
 0007            INDEX  A
 0008            DCA    0               PICK UP 2CADR OF TASK.
 0009            TS     WAITADR         BBCON WILL REMAIN IN L.
 0010            CAF    WAITBB
 0011            XCH    BBANK
 0012  2         TCF    WAIT2
R0013  2         RETURN TO CALLER AFTER TASK INSERTION:
 0014   LVWTLIST CA     WAITBANK
 0015            TS     BBANK
 0016            INDEX  WAITEXIT
 0017  2         TC     2
 0018  2WAITBB   BBCON  WAIT2
R0019  2ENDTASK MUST BE ENTERED IN FIXED-FIXED SO IT IS DISTINGUISHABLE BY ITS A
 0020  9DRES ALONE.
 0021   ENDTASK -2CADR  SVCT3
 0022   SVCT3    TCF    TASKOVER
P0023  2         BEGIN TASK INSERTION.
 0024  2         SETLOC ENDEXECS
 0025   WAIT2    TS     WAITBANK        BBANK OF CALLING PROGRAM.
 0026            CS     TIME3
 0027            AD     +1              CCS  A  = + 1/4
 0028            CCS    A               TEST  1/4 - C(TIME3).  IF POSITIVE,
A0029   IT MEANS THAT TIME3 OVERFLOW HAS OCCURRED PRIOR TO CS  TIME3 AND THAT
A0030   C(TIME3) = T - T1, INSTEAD OF 1.0 - (T1 - T).  THE FOLLOWING FOUR
A0031  2ORDERS SET C(A) = TD - T1 + 1 IN EITHER CASE.
 0032            AD     OCT40001        OVERFLOW HAS OCCURRED.  SET C(A) =
 0033  2         CS     A               T - T1 + 3/4 - 1
R0034  2NORMAL CASE (C(A) MINUS) YIELDS SAME C(A)  -(-(1.0-(T1-T))+1/4)-1
 0035            AD     OCT50001
 0036  2         AD     Q               RESULT = TD - T1 + 1.
 0037  2         CCS    A               TEST TD - T1 + 1
 0038            AD     LST1            IF TD - T1 POS, GO TO WTLST5 WITH
 0039  2         TCF    WTLST5          C(A) = (TD - T1) + C(LST1) = TD-T2+1
 0040            NOOP
 0041  2         CS     Q
R0042   NOTE THAT THIS PROGRAM SECTION IS NEVER ENTERED WHEN T-T1 G/E -1,
R0043   SINCE TD-T1+1 = (TD-T) + (T-T1+1), AND DELTA T = TD-T G/E +1 .  (G/E
R0044   SYMBOL MEANS GREATER THAN OR EQUAL TO).  THUS THERE NEED BE NO CON-
R0045  2CERN OVER A PREVIOUS OR IMMINENT OVERFLOW OF TIME3 HERE.
 0046            AD     POS1/2          WHEN TD IS NEXT, FORM QUANTITY
 0047            AD     POS1/2            1.0 - DELTA T = 1.0 - (TD - T)
 0048            XCH    TIME3
 0049            AD     NEGMAX
 0050            AD     Q               1.0 - DELTAT T NOW COMPLETE.
 0051            EXTEND                 ZERO INDEX Q.
 0052  8         QXCH   7               (ZQ)
 0053   WTLST4   XCH    LST1
 0054            XCH    LST1 +1
 0055            XCH    LST1 +2
 0056            XCH    LST1 +3
 0057  2         XCH    LST1 +4
 0058            CA     WAITADR         (MINOR PART OF TASK CADR HAS BEEN IN L.)
 0059            INDEX  Q
 0060  2         TCF    +1
 0061            DXCH   LST2
 0062            DXCH   LST2 +2
 0063            DXCH   LST2 +4
 0064            DXCH   LST2 +6
 0065            DXCH   LST2 +8D
 0066            DXCH   LST2 +10D       AT END, CHECK THAT C(LST2+10) IS STD
 0067            AD     ENDTASK           END ITEM, AS CHECK FOR EXCEEDING
A0068                                     THE LENGTH OF THE LIST.
 0069            EXTEND                 DUMMY TASK ADRES SHOULD BE IN FIXED-
 0070            BZF    LVWTLIST        FIXED SO ITS ADRES ALONE DISTINGUISHES
 0071  8         TCF    WTABORT         IT.
 0072   WTLST5   CCS    A               TEST  TD - T2 + 1
 0073            AD     LST1 +1
 0074            TCF    +4
 0075            AD     ONE
 0076            TC     WTLST2
 0077  2         OCT    1
 0078   +4       CCS    A               TEST  TD - T3 + 1
 0079            AD     LST1 +2
 0080            TCF    +4
 0081            AD     ONE
 0082            TC     WTLST2
 0083  2         OCT    2
 0084   +4       CCS    A               TEST  TD - T4 + 1
 0085            AD     LST1 +3
 0086            TCF    +4
 0087            AD     ONE
 0088            TC     WTLST2
 0089  2         OCT    3
 0090   +4       CCS    A               TEST  TD - T5 + 1
 0091            AD     LST1 +4
 0092            TCF    +4
 0093            AD     ONE
 0094            TC     WTLST2
 0095  2         OCT    4
 0096   +4       CCS    A               TEST  TD - T6 + 1
 0097            TCF    WTABORT
 0098   OCT50001 OCT    50001
 0099            AD     ONE
 0100            TC     WTLST2
 0101  2         OCT    5
 0102   WTABORT  TC                     LIST OVERFLOW.
P0103   THE ENTRY TO WTLST2 JUST PRECEDING OCT  N  IS FOR T  LE TD LE T   -1.
R0104  2                                                   N           N+1
R0105   (LE MEANS LESS THAN OR EQUAL TO).  AT ENTRY, C(A) = -(TD - T   + 1)
R0106  2                                                            N+1
R0107   THE LST1 ENTRY -(T   - T +1) IS TO BE REPLACED BY -(TD - T + 1), AND
R0108  2                  N+1   N                                 N
R0109   THE ENTRY -(T   - TD + 1) IS TO BE INSERTED IMMEDIATELY FOLLOWING.
R0110  2             N+1
 0111   WTLST2   TS     WAITTEMP            C(A) = -(TD - T   + 1)
 0112            INDEX  Q
 0113            CAF    0
 0114  2         TS     Q               INDEX VALUE INTO Q.
 0115            CAF    ONE
 0116            AD     WAITTEMP
 0117            INDEX  Q               C(A) = -(TD - T ) + 1.
 0118  2         ADS    LST1 -1                        N
 0119            CS     WAITTEMP
 0120            INDEX  Q
 0121  2         TCF    WTLST4
 0122  2ENDWAITS EQUALS                 LAST SWITCHABLE LOCATION.
R0123  2C(TIME3) = 1.0 - (T1 - T)
R0124   C(LST1  ) = - (T2 - T1) + 1
R0125   C(LST1+1) = - (T3 - T2) + 1
R0126   C(LST1+2) = - (T4 - T3) + 1
R0127   C(LST1+3) = - (T5 - T4) + 1
R0128  2C(LST1+4) = - (T6 - T5) + 1
R0129   C(LST2   ) = 2CADR  TASK1
R0130   C(LST2+2 ) = 2CADR  TASK2
R0131   C(LST2+4 ) = 2CADR  TASK3
R0132   C(LST2+6 ) = 2CADR  TASK4
R0133   C(LST2+8 ) = 2CADR  TASK5
R0134   C(LST2+10) = 2CADR  TASK6
P0135  2         ENTERS HERE ON T3 RUPT TO DISPATCH WAITLISTED TASK.
 0136  2         SETLOC SVCT3 +1
 0137   T3RUPT   TS     BANKRUPT
 0138            EXTEND
 0139  2         QXCH   QRUPT
 0140   T3RUPT2  CAF    NEG1/2          DISPATCH WAITLIST TASK.
 0141            XCH    LST1 +4         1.  MOVE UP LST1 CONTENTS, ENTERING
 0142            XCH    LST1 +3             A VALUE OF 1/2 +1 AT THE BOTTOM
 0143            XCH    LST1 +2             FOR T6-T5, CORRESPONDING TO THE
 0144            XCH    LST1 +1             INTERVAL 81.91 SEC FOR ENDTASK.
 0145            XCH    LST1
 0146            AD     POSMAX          2. SET T3 = 1.0 - T2 -T USING LIST 1.
 0147            ADS    TIME3           SO T3 WONT TICK DURING UPDATE.
 0148            TS     RUPTAGN
 0149            CS     ZERO
 0150  2         TS     RUPTAGN         SETS RUPTAGN TO +1 ON OVERFLOW.
 0151            EXTEND                 DISPATCH TASK.
 0152            DCS    ENDTASK
 0153            DXCH   LST2 +10D
 0154            DXCH   LST2 +8D
 0155            DXCH   LST2 +6
 0156            DXCH   LST2 +4
 0157            DXCH   LST2 +2
 0158  2         DXCH   LST2
 0159  4         DTCB
R0160  2RETURN, AFTER EXECUTION OF TIME3 OVERFLOW TASK.
 0161   TASKOVER CCS    RUPTAGN         IF +1 RETURN TO T3RUPT, IF -0 RESUME.
 0162            CAF    WAITBB
 0163            TS     BBANK
 0164  2         TCF    T3RUPT2         DISPATCH NEXT TASK IF IT WAS DUE.
 0165   RESUME   EXTEND
 0166            QXCH   QRUPT
 0167            CA     BANKRUPT
 0168            TS     BBANK
 0169            DXCH   ARUPT
 0170  2         RESUME
 0171   ENDWAITF EQUALS                 LAST FIXED-FIXED LOCATION OF T3RUPT.
L      2FRESH START AND RESTART
 0001  2         SETLOC ENDWAITS
 0002   SLAP1    INHINT                 FRESH START. COMES HERE FROM PINBALL.
 0003            CAF    ZERO             (ZERO FAILREG IN FRESH START ONLY).
 0004            TS     FAILREG
 0005            TS     UPLOCK          FREE UPLINK INTERLOCK
 00051           CAF    BIT15           TURNS OFF AUTO, HOLD, FREE, NO ATT,
 00052           TS     DSPTAB  +11D    SPARE, GIMBAL LOCK, SPARE, TRACKER,
A00053                                  PROG ALM (BITS 1-9 OF DSPTAB+11D),
A00054                                  IN FRESH START ONLY.
 00055           CS     BIT13           TURN OFF :TEST ALARM: OUTBIT (CHAN13
 00056           EXTEND                 BIT10).  FRESH START ONLY.
 00057           WAND   CHAN13
 000571          CS     BIT4            TURN OFF TEMP (FRESH START ONLY)
 000572          EXTEND
 000573          WAND   DSALMOUT
 00058           CAF    STARTEB
 00059           TS     EBANK           SET FOR E3
 0006   SLAP2    CAF    ZERO
 0007            TS     SMODE
 0008  2         TC     STARTSUB        SUBROUTINE DOES MOST OF THE WORK.
 0009  2         TCF    DUMMYJOB
 0010  4GOPROG   TC     SLAP2           COMES HERE FROM 4050  RESTART.
 00101           EBANK= LST1
 00102  STARTEB  ECADR  LST1
 0011   STARTSUB XCH    Q
 0012  2         TS     BUF             EXEC TEMPS ARE AVAILABLE TO US.
 0013            CAF    POSMAX          T3 AND T4 OVERFLOW AS SOON AS POSSIBLE.
 0014            TS     TIME3             (POSMAX IS PSEUDO INTERRUPT SIGNAL IN
 0015  2         TS     TIME4             CASE RUPT SIGNALLED BEFORE TS TIME3).
 0016            CAF    NEG1/2          INITIALIZE WAITLIST DELTA-TS.
 0017            TS     LST1  +4
 0018            TS     LST1  +3
 0019            TS     LST1  +2
 0020            TS     LST1  +1
 0021  2         TS     LST1
 0022            CS     ENDTASK
 0023            TS     LST2
 0024            TS     LST2 +2
 0025            TS     LST2 +4
 0026            TS     LST2 +6
 0027            TS     LST2 +8D
 0028            TS     LST2 +10D
 0029            CS     ENDTASK +1
 0030            TS     LST2 +1
 0031            TS     LST2 +3
 0032            TS     LST2 +5
 0033            TS     LST2 +7
 0034            TS     LST2 +9D
 0035  2         TS     LST2 +11D
 0036            CS     ZERO            MAKE ALL EXECUTIVE REGISTER SETS
 0037            TS     PRIORITY        AVAILABLE.
 0038            TS     PRIORITY +12D
 0039            TS     PRIORITY +24D
 0040            TS     PRIORITY +36D
 0041            TS     PRIORITY +48D
 0042            TS     PRIORITY +60D
 0043  2         TS     PRIORITY +72D
 00435 2         TS     NEWJOB          SHOWS NO ACTIVE JOBS.
 0044            CAF    VAC1ADRC        MAKE ALL VAC AREAS AVAILABLE.
 0045            TS     VAC1USE
 0046            AD     LTHVACA
 0047            TS     VAC2USE
 0048            AD     LTHVACA
 0049            TS     VAC3USE
 0050            AD     LTHVACA
 0051            TS     VAC4USE
 0052            AD     LTHVACA
 0053  2         TS     VAC5USE
 0054            CAF    ONE             GIVES 110 MS TO GET READY FOR T4.
 0055            TS     DSRUPTSW
 0056            CAF    TEN             TURN OFF ALL DISPLAY SYSTEM RELAYS.
 0057   DSPOFF   TS     MPAC
 0058            CS     BIT12
 0059            INDEX  MPAC
 0060            TS     DSPTAB
 0061            CCS    MPAC
 0062  2         TC     DSPOFF
 0063            TS     INLINK
 0064            TS     DSPCNT
 0066            TS     MODREG
 0067            TS     CADRSTOR
 0068            TS     REQRET
 0069            TS     CLPASS
 0070            TS     DSPLOCK
 0071            TS     MONSAVE         KILL MONITOR
 0072            TS     MONSAVE1
 0073            TS     GRABLOCK
 0074            TS     VERBREG
 0075            TS     NOUNREG
 0076            TS     DSPLIST
 0077            TS     DSPLIST +1
 0078  8         TS     DSPLIST +2
 0079            TS     STATE           TURN OFF INTERPRETER SWITCHES.
 0080            TS     STATE +1
 0081            TS     STATE +2
 0082            TS     STATE   +3
 0083            TS     EXTVBACT        MAKE EXTENDED VERBS AVAILABLE
 0084            CAF    NOUTCON
 0085  2         TS     NOUT
 00851           CS     CHAN11C         TURN OFF UPLINK ACTIVITY, KEY
 00852           EXTEND                 RLSE, V/N FLASH, OPERATOR ERROR
 00853           WAND   DSALMOUT        IN BOTH FRESH START AND RESTART.
 00854           CAF    LESCHK          SELF CHECK GO-TO REGISTER.
 00855           TS     SELFRET
 0086            CS     VD1
 0087            TS     DSPCOUNT
 0088  2         TC     BUF
 00881  CHAN11C  OCT    00164           CHAN 11 BITS 3,5,6,7.
A00882                                  UPLINK ACTIVITY, KEY RLSE,
A00883                                  V/N FLASH, OPERATOR ERROR.
 00884  LESCHK   ADRES  SMODECHK
 0089   VAC1ADRC ADRES  VAC1USE
 0090   LTHVACA  DEC    44
L      2T4RUPT PROGRAM
 0001   T4RUPT   TS     BANKRUPT
 0002            XCH    Q
 0003            TS     QRUPT
 0004            CAF    ZERO
 0005            EXTEND
 0006            WRITE  OUT0
 0007            CCS    DSRUPTSW
 0008            TC     SPECRUPT        ZERO OUT0 10 MS AFTER REGULAR T4RUPT.
 0009  2         TC     T4RUPTA
 0010   SPECRUPT CAF    ZERO
 0011            TS     DSRUPTSW
 0012            CAF    50MRUPT         RE ESTABLISH 40 MS PERIOD
 0013            TS     TIME4
 0014            TC     RESUME
 00141  60MRUPT  OCT    37772
 0015  450MRUPT  OCT    37773
R0016   RELTAB IS A PACKED TABLE. RELAYWORD CODE IN UPPER 4 BITS, RELAY CODE
R0017  2IN LOWER 5 BITS.
 0018  2         SETLOC ENDWAITF        IN F/F
 0019   RELTAB   OCT    04025
 0020            OCT    10003
 0021            OCT    14031
 0022            OCT    20033
 0023            OCT    24017
 0024            OCT    30036
 0025            OCT    34034
 0026            OCT    40023
 0027            OCT    44035
 0028            OCT    50037
 0029            OCT    54000
 0030  4RELTAB11 OCT    60000
 00301 4ENDT4FF  EQUALS
 0033  2         SETLOC 50MRUPT +1      IN BANK
 00331  T4RUPTA  CAF    60MRUPT
 00332           TS     TIME4
 0034   CDRVE    CCS    DSPTAB +11D
 0035            TC     DSPOUT
 0036  2         TC     DSPOUT
 0037            XCH    DSPTAB +11D
 0038            MASK   LOW11
 0039            TS     DSPTAB +11D
 0040            AD     RELTAB11
 0041            TC     DSPLAYC
P0058  2DSPOUT PROGRAM. PUTS OUT DISPLAYS.
 0059   DSPOUT   CCS    NOUT            ENTERED IN INTERRUPTED STATE AT END OF
 0060            TC     +2                                      DSRUPT
 0061            TC     LVDSRUPT
 0062            TS     NOUT
 0063            CS     ZERO
 0064            TS     DSRUPTEM        SET TO -0 FOR 1ST PASS THRU DSPTAB
 0065            XCH    DSPCNT
 0066            AD     NEG0            TO PREVENT +0
 0067            TS     DSPCNT
 0068   DSPSCAN  INDEX  DSPCNT
 0069            CCS    DSPTAB
 0070            CCS    DSPCNT          IF DSPTAB ENTRY +, SKIP
 0071            TC     DSPSCAN -2      IF DSPCNT +, AGAIN
 0072            TC     DSPLAY          IF DSPTAB ENTRY -, DISPLAY
 0073   TABLNTH  OCT    12              DEC 10   LENGTH OF DSPTAB
 0074            CCS    DSRUPTEM        IF DSRUPTEM=+0,2ND PASS THRU DSPTAB
 0075            LOC    +1              (DSPCNT=0). +0 INTO NOUT, RESUME
 0076            TS     NOUT
 0077            TC     LVDSRUPT
 0078            TS     DSRUPTEM        IF DSRUPTEM=-0,1ST PASS THRU DSPTAB
 0079            CAF    TABLNTH         (DSPCNT=0). +0 INTO DSRUPTEM. PASS AGAIN
 0080  2         TC     DSPSCAN -1
 0081   DSPLAY   AD     ONE
 0082            INDEX  DSPCNT
 0083            TS     DSPTAB          REPLACE POSITIVELY
 0084            MASK   LOW11           REMOVE BITS 12 TO 15
 0085            TS     DSRUPTEM
 0086            CAF    HI5
 0087            INDEX  DSPCNT
 0088            MASK   RELTAB          PICK UP BITS 12 TO 15 OF RELTAB ENTRY
 0089            AD     DSRUPTEM
 0090   DSPLAYC  EXTEND
 0091            WRITE  OUT0
 0092  2         TS     DISPBUF         THIS WILL BE SENT DOWN NEXT TM CYCLE.
 0093            CAF    10MSRUPT        SET T4 TO INTERRUPT IN 10 MS.
 0094            TS     TIME4
 0095            CAF    ONE
 0096  2         TS     DSRUPTSW        SET FOR SPECRUPT
 0097            TC     LVDSRUPT
 0098   LVDSRUPT EQUALS RESUME
 0099   10MSRUPT =      POSMAX
L      2KEYRUPT, UPRUPT
 0001   KEYRUPT1 TS     BANKRUPT
 0002            XCH    Q
 0003            TS     QRUPT
 0004            TC     LODSAMPT        TIME IS SNATCHED IN RUPT FOR NOUN 65.
 0005            CAF    LOW5
 0006            EXTEND
 0007            RAND   MNKEYIN
 0008   KEYCOM   AD     BIT11
 0009            TS     TMKEYBUF
 0010            CAF    CHRPRIO
 0011            TC     NOVAC
 0012            EBANK= DSPCOUNT
 0013            2CADR  CHARIN
 0014            CAF    LOW5
 0015            MASK   TMKEYBUF
 0016            INDEX  LOCCTR
 0017            TS     MPAC            LEAVE 5 BIT KEY CDE IN MPAC FOR CHARIN
 0018  4         TC     RESUME
 0019   KEYRUPT2 TS     BANKRUPT
 0020            XCH    Q
 0021            TS     QRUPT
 0022            TC     LODSAMPT        TIME IS SNATCHED IN RUPT FOR NOUN 65.
 0023            CAF    LOW5
 0024            EXTEND
 0025            RAND   NAVKEYIN
 0026            TC     KEYCOM
P0027  2UPRUPT PROGRAM
 0028   UPRUPT   TS     BANKRUPT
 0029            XCH    Q
 0030            TS     QRUPT
 0031            TC     LODSAMPT        TIME IS SNATCHED IN RUPT FOR NOUN 65.
 0032            CAF    ZERO
 0033            XCH    INLINK
 0034            TS     KEYTEMP1
 0035            CAF    BIT3            TURN ON UPACT LIGHT
 0036            EXTEND                 (BIT 3 OF CHANNEL 11)
 0037            WOR    DSALMOUT
 0038   UPRPT1   CAF    LOW5            TEST FOR TRIPLE CHAR REDUNDANCY
 0039            MASK   KEYTEMP1        LOW5 OF WORD
 0040            XCH    KEYTEMP1        LOW5 INTO KEYTEMP1
 0041            XCH    SR              WHOLE WORD INTO SR
 0042            TS     KEYTEMP2        ORIGINAL SR INTO KEYTEMP2
 0043            TC     SRGHT5
 0044            MASK   LOW5            MID 5
 0045            AD     HI10
 0046            TC     UPTEST
 0047            TC     SRGHT5
 0048            MASK   LOW5            HIGH 5
 0049            COM
 0050            TC     UPTEST
 0051   UPOK     TC     RESTORSR        CODE IS GOOD
 0052            CS     ELRCODE         IF CODE = ERROR LIGHT RESET, PUT +0
 0053            AD     KEYTEMP1        INTO BIT1 OF UPLOCK.
 0054            CCS    A               IF CODE NOT= ELR, PASS CODE ONLY IF
 0055            TC     TSTUPLOK        BIT1 OF UPLOCK = 0.
 0056   ELRCODE  OCT    22
 0057            TC     TSTUPLOK
 0058            CS     BIT1            PUT 0 INTO BIT1 OF UPLOCK
 0059            MASK   UPLOCK
 0060            TS     UPLOCK
 0061            TC     ACCEPTUP
 0062   TSTUPLOK CAF    BIT1
 0063            MASK   UPLOCK
 0064            CCS    A
 0065            TC     RESUME          BIT1 OF UPLOCK = 1.
 0066   ACCEPTUP XCH    KEYTEMP1        BIT1 OF UPLOCK = 0.
 0067            AD     BIT6
 0068  2         TC     KEYCOM
 0069   TMFAIL2  TC     RESTORSR        CODE IS BAD
 0070            CS     BIT1            LOCK OUT FURTHER UPLINK ACTIVITY (BY
 0071            MASK   UPLOCK          PUTTING 1 INTO BIT1 OF UPLOCK) UNTIL ELR
 0072            AD     BIT1            IS SENT UP UPLINK.
 0073            TS     UPLOCK
 0074            CAF    BIT9            SEND DOWN INDICATION THAT UPLINK HAS
 0075            AD     BIT11           RECEIVED BAD CODE.
 0076            TS     TMKEYBUF
 0077   TMFAIL1  TC     TMALM
 0078  2         TC     RESUME
 0079   RESTORSR XCH    KEYTEMP2
 0080            DOUBLE
 0081            TS     SR
 0082  2         TC     Q
 0083  2TMALM    =      RESUME          FOR NOW
 0084   SRGHT5   CS     SR
 0085            CS     SR
 0086            CS     SR
 0087            CS     SR
 0088            CS     SR
 0089            CS     A
 0090  2         TC     Q               DELIVERS WORD UNCOMPLEMENTED
 0091   UPTEST   AD     KEYTEMP1
 0092            CCS    A
 0093            TC     TMFAIL2
 0094            LOC    +1
 0095            TC     TMFAIL2
 0096  2         TC     Q
 0097   HI10     OCT    77740
 0098  2UPBANK   EQUALS EXECBANK        IN SAME BANK AS EXEC.
 0099  2B12-1    OCT    3777
R0100  8UPACT IS TURNED OFF BY VBRELDSP, ALSO BY ERROR LIGHT RESET.
R0101   THE RECEPTION OF A BAD CODE BY UPLINK LOCKS OUT FURTHER UPLINK ACTIVITY
R0102   BY PLACING A 1 INTO BIT1 OF UPLOCK. BIT9 (ALONG WITH BIT11) OF TMKEYBUF
R0103   IS SET TO 1 TO SEND AN INDICATION OF THIS SITUATION DOWN THE DOWNLINK.
R0104   THE UPLINK INTERLOCK IS ALLOWED WHEN AN ERROR LIGHT RESET CODE IS SENT
R0105   UP THE UPLINK, OR WHEN A FRESH START IS PERFORMED.
L      2PINBALL GAME  BUTTONS AND LIGHTS
R0001  4KEYBOARD AND DISPLAY PROGRAM
R0002  2THE FOLLOWING QUOTATION IS PROVIDED THROUGH THE COUTESY OF THE AUTHORS.
R0003         ::IT WILL BE PROVED TO THY FACE THAT THOU HAST MEN ABOUT THEE THAT
R0004   USUALLY TALK OF A NOUN AND A VERB, AND SUCH ABOMINABLE WORDS AS NO
R0005  2CHRISTIAN EAR CAN ENDURE TO HEAR.::
R0006  4                     HENRY 6, ACT 2, SCENE 4
R0007  4THE FOLLOWING ASSIGNMENTS FOR PINBALL ARE MADE ELSEWHERE
R0008  2RESERVED FOR PINBALL EXECUTIVE ACTION
R0009   DSPCOUNT ERASE                  DISPLAY POSITION INDICATOR
R0010   DECBRNCH ERASE                  +DEC, - DEC, OCT INDICATOR
R0011   VERBREG  ERASE                  VERB CODE
R0012   NOUNREG  ERASE                  NOUN CODE
R0013   XREG     ERASE                  R1 INPUT BUFFER
R0014   YREG     ERASE                  R2 INPUT BUFFER
R0015   ZREG     ERASE                  R3 INPUT BUFFER
R0016   XREGLP   ERASE                  LO PART OF XREG (FOR DEC CONV ONLY)
R0017   YREGLP   ERASE                  LO PART OF YREG (FOR DEC CONV ONLY)
R0018   ZREGLP   ERASE                  LO PART OF ZREG (FOR DEC CONV ONLY)
R0019   MODREG   ERASE                  MODE CODE
R0020   DSPLOCK  ERASE                  KEYBOARD/SUBROUTINE CALL INTERLOCK
R0021   REQRET   ERASE                  RETURN REGISTER FOR LOAD
R0022   LOADSTAT ERASE                  STATUS INDICATOR FOR LOADTST
R0023   CLPASS   ERASE                  PASS INDICATOR CLEAR
R0024   NOUT     ERASE                  ACTIVITY COUNTER FOR DSPTAB
R0025   NOUNCADR ERASE                  MACHINE CADR FOR NOUN
R0026   MONSAVE  ERASE                  N/V CODE FOR MONITOR. (= MONSAVE1-1)
R0027   MONSAVE1 ERASE                  NOUNCADR FOR MONITOR(MATBS) =MONSAVE +1
R0028   DSPTAB   ERASE          +13D    0-10,DISPLAY PANEL BUFFER.11-13,C RELAYS
R0029   CADRSTOR ERASE                  ENDIDLE STORAGE
R0030   GRABLOCK ERASE                  INTERNAL INTERLOCK FOR DISPLAY SYSTEM
R0031   NVQTEM   ERASE                  NVSUB STORAGE FOR CALLING ADDRESS
R0032                                   MUST = NVBNKTEM-1
R0033   NVBNKTEM ERASE                  NVSUB STORAGE FOR CALLING BANK
R0034                                   MUST = NVQTEM+1
R0035   DSPLIST  ERASE          +2      WAITING LIST FOR DSP SYST INTERNAL USE
R0036   EXTVBACT REASE                  EXTENDED VERB ACTIVITY INTERLOCK
R0037   DSPTEM1  ERASE          +2      BUFFER STORAGE AREA 1 (MOSTLY FOR TIME)
R0038   DSPTEM2  ERASE          +2      BUFFER STORAGE AREA 2 (MOSTLY FOR DEG)
R0039  4END OF ERASABLES RESERVED FOR PINBALL EXECUTIVE ACTION
R0040  2TEMPORARIES FOR PINBALL EXECUTIVE ACTION
R0041   DSEXIT   =      INTB15+         RETURN FOR DSPIN
R0042   EXITEM   =      INTB15+         RETURN FOR SCALE FACTOR ROUTINE SELECT
R0043  2BLANKRET =      INTB15+         RETURN FOR 2BLANK
R0044   WRDRET   =      INTBIT15        RETURN FOR 5BLANK
R0045   WDRET    =      INTBIT15        RETURN FOR DSPWD
R0046   DECRET   =      INTBIT15        RETURN FOR PUTCOM(DEC LOAD)
R0047  221/22REG =      INTBIT15        TEMP FOR CHARIN
R0048   UPDATRET =      POLISH          RETURN FOR UPDATNN, UPDATVB
R0049   CHAR     =      POLISH          TEMP FOR CHARIN
R0050   ERCNT    =      POLISH          COUNTER FOR ERROR LIGHT RESET
R0051  2DECOUNT  =      POLISH          COUNTER FOR SCALING AND DISPLAY (DEC)
R0052   SGNON    =      VBUF            TEMP FOR +,- ON
R0053   NOUNTEM  =      VBUF            COUNTER FOR MIXNOUN FETCH
R0054   DISTEM   =      VBUF            COUNTER FOR OCTAL DISPLAY VERBS
R0055  2DECTEM   =      VBUF            COUNTER FOR FETCH (DEC DISPLAY VERBS)
R0056   SGNOFF   =      VBUF    +1      TEMP FOR +,- ON
R0057   NVTEMP   =      VBUF    +1      TEMP FOR NVSUB
R0058  2SFTEMP1  =      VBUF    +1      STORAGE FOR SF CONST HI PART(=SFTEMP2-1)
R0059   CODE     =      VBUF    +2      FOR DSPIN
R0060  2SFTEMP2  =      VBUF    +2      STORAGE FOR SF CONST LO PART(=SFTEMP1+1)
R0061   MIXTEMP  =      VBUF    +3      FOR MIXNOUN DATA
R0062  2SIGNRET  =      VBUF    +3      RETURN FOR +,- ON
R0063  2ALSO MIXTEMP+1 = VBUF+4, MIXTEMP+2 = VBUF+5.
R0064  2ENTRET   =      DOTINC          EXIT FROM ENTER
R0065   WDCNT    =      DOTRET          CHAR COUNTER FOR DSPWD
R0066  2INREL    =      DOTRET          INPUT BUFFER SELECTOR ( X,Y,Z, REG )
R0067   DSPMMTEM =      MATINC          DSPCOUNT SAVE FOR DSPMM
R0068  2MIXBR    =      MATINC          INDICATOR FOR MIXED OR NORMAL NOUN
R0069   TEM1     ERASE                  EXEC TEMP
R0070  2DSREL    =      TEM1            REL ADDRESS FOR DSPIN
R0071   TEM2     ERASE                  EXEC TEMP
R0072   DSMAG    =      TEM2            MAGNITUDE STORE FOR DSPIN
R0073  2IDADDTEM =      TEM2            MIXNOUN INDIRECT ADDRESS STORAGE
R0074   TEM3     ERASE                  EXEC TEMP
R0075  2COUNT    =      TEM3            FOR DSPIN
R0076   TEM4     ERASE                  EXEC TEMP
R0077   LSTPTR   =      TEM4            LIST POINTER FOR GRABUSY
R0078   RELRET   =      TEM4            RETURN FOR RELDSP
R0079  2FREERET  =      TEM4            RETURN FOR FREEDSP
R0080   TEM5     ERASE                  EXEC TEMP
R0081  2NOUNADD  =      TEM5            TEMP STORAGE FOR NOUN ADDRESS
R0082   NNADTEM  ERASE                  TEMP FOR NOUN ADDRESS TABLE ENTRY
R0083   NNTYPTEM ERASE                  TEMP FOR NOUN TYPE TABLE ENTRY
R0084   IDAD1TEM ERASE                  TEMP FOR INDIR ADRESS TABLE ENTRY(MIXNN)
R0085                                   MUST = IDAD2TEM-1, = IDAD3TEM-2.
R0086   IDAD2TEM ERASE                  TEMP FOR INDIR ADRESS TABLE ENTRY(MIXNN)
R0087                                   MUST = IDAD1TEM+1, = IDAD3TEM-1.
R0088   IDAD3TEM ERASE                  TEMP FOR INDIR ADRESS TABLE ENTRY(MIXNN)
R0089                                   MUST = IDAD1TEM+2, = IDAD2TEM+1.
R0090   RUTMXTEM ERASE                  TEMP FOR SF ROUT TABLE ENTRY(MIXNN ONLY)
R0091  4END OF TEMPORARIES FOR PINBALL EXECUTIVE ACTION
R0092  2RESERVED FOR PINBALL INTERRUPT ACTION
R0093   DSPCNT   ERASE                  COUNTER FOR DSPOUT
R0094   UPLOCK   ERASE                  BIT1 = UPLINK INTERLOCK (ACTIVATED BY
A0095                                   RECEPTION OF A BAD MESSAGE IN UPLINK)
R0096  4END OF ERASABLES RESERVED FOR PINBALL INTERRUPT ACTION
R0097  2TEMPORARIES FOR PINBALL INTERRUPT ACTION
R0098   KEYTEMP1 =      WAITEXIT        TEMP FOR KEYRUPT, UPRUPT
R0099   DSRUPTEM =      WAITEXIT        TEMP FOR DSPOUT
R0100   KEYTEMP2 =      RUPTAGN         TEMP FOR KEYRUPT, UPRUPT
R0101   END OF TEMPORARIES FOR PINBALL INTERRUPT ACTION
P0102   THE INPUT CODES ASSUMED FOR THE KEYBOARD ARE,
R0103   0        10000
R0104   1        00001
R0105   9        01001
R0106   VERB     10001
R0107   ERROR RES10010
R0108   KEY RLSE 11001
R0109   +        11010
R0110   -        11011
R0111   ENTER    11100
R0112   CLEAR    11110
R0113  4NOUN     11111
R0114   OUTPUT FORMAT FOR DISPLAY PANEL. SET OUT0 TO  AAAABCCCCCDDDDD.
R0115   A-S SELECT A RELAYWORD. THIS DETERMINES WHICH PAIR OF CHARACTERS ARE
R0116   ENERGIZED.
R0117   B FOR SPECIAL RELAYS SUCH AS SIGNS ETC.
R0118   C-S  5 BIT RELAY CODE FOR LEFT CHAR OF PAIR SELECTED BY RELAYWORD
R0119  2D-S  5 BIT RELAY CODE FOR RIGHTCHAR OF PAIR SELECTED BY RELAYWORD.
R0120   THE PANEL APPEARS AS FOLLOWS,
R0121   MD1    MD2                         (MAJOR MODE)
R0122   VD1    VD2 (VERB)    ND1    ND2    (NOUN)
R0123   R1D1   R1D2   R1D3   R1D4   R1D5   (R1)
R0124   R2D1   R2D2   R2D3   R2D4   R2D5   (R2)
R0125  2R3D1   R3D2   R3D3   R3D4   R3D5   (R3)
R0126   EACH OF THESE IS GIVEN A DSPCOUNT NUMBER FOR USE WITHIN COMPUTATION ONLY
R0127   MD1   25     R2D1  11         ALL ARE OCTAL
R0128   MD2   24     R2D2  10
R0129   VD1   23     R2D3   7
R0130   VD2   22     R2D4   6
R0131   ND1   21     R2D5   5
R0132   ND2   20     R3D1   4
R0133   R1D1  16     R3D2   3
R0134   R1D2  15     R3D3   2
R0135   R1D3  14     R3D4   1
R0136   R1D4  13     R3D5   0
R0137  4R1D5  12
R0138  2THERE IS AN 11 REGISTER TABLE (DSPTAB) FOR THE DISPLAY PANEL.
R0139   DSPTAB RELAYWD       BIT11     BITS 10-6     BITS 5-1
R0140   RELADD
R0141   10     1011                    MD1  (25)     MD2  (24)
R0142   9      1010                    VD1  (23)     VD2  (22)
R0143   8      1001                    ND1  (21)     ND2  (20)
R0144   7      1000                                  R1D1 (16)
R0145   6      0111          +R1       R1D2 (15)     R1D3 (14)
R0146   5      0110          -R1       R1D4 (13)     R1D5 (12)
R0147   4      0101          +R2       R2D1 (11)     R2D2 (10)
R0148   3      0100          -R2       R2D3 (7)      R2D4 (6)
R0149   2      0011                    R2D5 (5)      R3D1 (4)
R0150   1      0010          +R3       R3D2 (3)      R3D3 (2)
R0151   0      0001          -R3       R3D4 (1)      R3D5 (0)
R0152  4       0000   NO RELAYWORD
R0153   THE 5 BIT RELAY CODES ARE,
R0154   BLANK      00000
R0155   0          10101
R0156   1          00011
R0157   2          11001
R0158   3          11011
R0159   4          01111
R0160   5          11110
R0161   6          11100
R0162   7          10011
R0163   8          11101
R0164   9          11111
P0165  4START OF EXECUTIVE SECTION OF PINBALL
 0166  2         SETLOC 20000
 0167   GRABUSYB TC     GRABUSY1        STANDARD LEAD INS. DONT MOVE.
 0168  2NVSUBSYB TC     NVSUBSY1
 0169   CHARIN   CAF    ONE             BLOCK DISPLAY SYST
 0170            XCH    DSPLOCK         MAKE DSP SYST BUSY, BUT SAVE OLD
 0171            TS     21/22REG        C(DSPLOCK) FOR ERROR LIGHT RESET.
 0172            XCH    MPAC
 0173            TS     CHAR
 0174            INDEX  A
 0175            TC     +1              INPUT CODE     FUNCTION
 0176            TC     CHARALRM        0
 0177            TC     NUM             1
 0178            TC     NUM             2
 0179            TC     NUM             3
 0180            TC     NUM             4
 0181            TC     NUM             5
 0182            TC     NUM             6
 0183            TC     NUM             7
 0184            TC     89TEST          10                 8
 0185            TC     89TEST          11                 9
 0186            TC     CHARALRM        12
 0187            TC     CHARALRM        13
 0188            TC     CHARALRM        14
 0189            TC     CHARALRM        15
 0190            TC     CHARALRM        16
 0191            TC     CHARALRM        17
 0192            TC     NUM     -2      20                 0
 0193            TC     VERB            21                 VERB
 0194            TC     ERROR           22                 ERROR LIGHT RESET
 0195            TC     CHARALRM        23
 0196            TC     CHARALRM        24
 0197            TC     CHARALRM        25
 0198            TC     CHARALRM        26
 0199            TC     CHARALRM        27
 0200            TC     CHARALRM        30
 0201            TC     VBRELDSP        31                 KEY RELEASE
 0202            TC     POSGN           32                 +
 0203            TC     NEGSGN          33                 -
 0204            TC     ENTERJMP        34                 ENTER
 0205            TC     CHARALRM        35
 0206            TC     CLEAR           36                 CLEAR
 0207  4         TC     NOUN            37                 NOUN
 0208   ENTERJMP TC     POSTJUMP
 0209  2         CADR   ENTER
 0211   89TEST   CAF    THREE
 0212            MASK   DECBRNCH
 0213            CCS    A
 0214            TC     NUM             IF DECBRNCH IS +, 8 OR 9 OK
 0215  4         TC     CHARALRM        IF DECBRNCH IS +0, REJECT 8 OR 9
R0216   NUM ASSEMBLES OCTAL 3 BITS AT A TIME. FOR DECIMAL IT CONVERTS INCOMING
R0217   WORD AS A FRACTION, KEEPING RESULTS TO DP.
R0218   OCTAL RESULTS ARE LEFT IN XREG, YREG, OR ZREG. HI PART OF DEC IN XREG,
R0219   YREG, ZREG. THE LOW PARTS IN XREGLP, YREGLP, OR ZREGLP)
R0220   DECBRNCH IS LEFT AT +0 FOR OCT, +1 FOR + DEC, +2 FOR - DEC.
R0221  2IF DSPCOUNT WAS LEFT -, NO MORE DATA IS ACCEPTED.
 0222            CAF    ZERO
 0223            TS     CHAR
 0224   NUM      CCS    DSPCOUNT
 0225            TC     +4              +
 0226            TC     +3              +0
 0227            TC     +1              -BLOCK DATA IN IF DSPCOUNT IS -
 0228            TC     ENDOFJOB        -0
 0229            TC     GETINREL
 0230            CCS    CLPASS          IF CLPASS IS + OR +0, MAKE IT +0.
 0231            CAF    ZERO
 0232            TS     CLPASS
 0233            TC     +1
 0234            INDEX  CHAR
 0235            CAF    RELTAB
 0236            MASK   LOW5
 0237            TS     CODE
 0238            CA     DSPCOUNT
 0239            TS     COUNT
 0240            TC     DSPIN
 0241            CAF    THREE
 0242            MASK   DECBRNCH
 0243            CCS    A               +0, OCTAL.  +1, + DEC.  +2, - DEC.
 0244            TC     DECTOBIN        +
 0245            INDEX  INREL           +0 OCTAL
 0246            XCH    VERBREG
 0247            TS     CYL
 0248            CS     CYL
 0249            CS     CYL
 0250            XCH    CYL
 0251            AD     CHAR
 0252            TC     ENDNMTST
 0253   DECTOBIN INDEX  INREL
 0254            XCH    VERBREG
 0255            TS     MPAC            SUM X 2EXP-14 IN MPAC
 0256            CAF    ZERO
 0257            TS     MPAC    +1
 0258            CAF    TEN             10 X 2EXP-14
 0259            TC     SHORTMP         10SUM X 2EXP-28 IN MPAC, MPAC+1
 0260            XCH    MPAC    +1
 0261            AD     CHAR
 0262            TS     MPAC    +1
 0263            TC     ENDNMTST        NO OF
 0264            ADS    MPAC            OF MUST BE 5TH CHAR
 0265            TC     DECEND
 0266   ENDNMTST INDEX  INREL
 0267            TS     VERBREG
 0268            CS     DSPCOUNT
 0269            INDEX  INREL
 0270            AD     CRITCON
 0271            EXTEND
 0272            BZF    ENDNUM          -0, DSPCOUNT = CRITCON
 0273            TC     MORNUM          - , DSPCOUNT G/ CRITCON
 0274   ENDNUM   CAF    THREE
 0275            MASK   DECBRNCH
 0276            CCS    A
 0277            TC     DECEND
 0278   ENDALL   CS     DSPCOUNT        BLOCK NUMIN BY PLACING DSPCOUNT
 0279            TC     MORNUM  +1      NEGATIVELY
 0280   DECEND   TC     DMP             MULT SUM X 2EXP-28 IN MPAC, MPAC+1 BY
 0281            ADRES  DECON           2EXP14/10EXP5. GIVES(SUM/10EXP5)X2EXP-14
 0282            CAF    THREE           IN MPAC, +1, +2.
 0283            MASK   DECBRNCH
 0284            INDEX  A
 0285            TC     +0
 0286            TC     +DECSGN
 0287            EXTEND                 - CASE
 0288            DCS    MPAC    +1
 0289            DXCH   MPAC    +1
 0290   +DECSGN  XCH    MPAC    +2
 0291            INDEX  INREL
 0292            TS     XREGLP  -2
 0293            XCH    MPAC    +1
 0294            INDEX  INREL
 0295            TS     VERBREG
 0296            TC     ENDALL
 0297   MORNUM   CCS    DSPCOUNT        DECREMENT DSPCOUNT
 0298            TS     DSPCOUNT
 0299  2         TC     ENDOFJOB
 0300   CRITCON  OCT    22              (DEC 18)
 0301            OCT    20              (DEC 16)
 0302            OCT    12              (DEC 10)
 0303            OCT    5
 0304  2         OCT    0
 0305  4DECON    2DEC   E-5 B14         2EXP14/10EXP5 = .16384 DEC
R0306   GETINREL GETS PROPER DATA REG REL ADDRESS FOR CURRENT C(DSPCOUNT) AND
R0307  2PUTS IN INTO INREL. +0 VERBREG, 1 NOUNREG, 2 XREG, 3 YREG, 4 ZREG.
 0308   GETINREL INDEX  DSPCOUNT
 0309            CAF    INRELTAB
 0310            TS     INREL           (A TEMP, REG)
 0311  2         TC     Q
 0312   INRELTAB OCT    4               R3D5 (DSPCOUNT = 0)
 0313            OCT    4               R3D4           =(1)
 0314            OCT    4               R3D3           =(2)
 0315            OCT    4               R3D2           =(3)
 0316            OCT    4               R3D1           =(4)
 0317            OCT    3               R2D5           =(5)
 0318            OCT    3               R2D4           =(6)
 0319            OCT    3               R2D3           =(7)
 0320            OCT    3               R2D2           =(8D)
 0321            OCT    3               R2D1           =(9D)
 0322            OCT    2               R1D5           =(10D)
 0323            OCT    2               R1D4           =(11D)
 0324            OCT    2               R1D3           =(12D)
 0325            OCT    2               R1D2           =(13D)
 0326            OCT    2               R1D1           =(14D)
 0327            LOC    +1              NO DSPCOUNT NUMBER = 15D
 0328            OCT    1               ND2            =(16D)
 0329            OCT    1               ND1            =(17D)
 0330            OCT    0               VD2            =(18D)
 0331  4         OCT    0               VD1            =(19D)
 0332   VERB     CAF    ZERO
 0333            TS     VERBREG
 0334            CAF    VD1
 0335   NVCOM    TS     DSPCOUNT
 0336            TC     2BLANK
 0337            CAF    ZERO
 0338            TS     DECBRNCH
 0339            TS     REQRET          SET FOR ENTPAS0
 0340            CAF    ENDINST         IF DSPALARM OCCURS BEFORE FIRST ENTPAS0
 0341            TS     ENTRET          OR NVSUB, ENTRET MUST ALREADY BE SET
A0342                                   TO TC ENDOFJOB
 0343            TC     ENDOFJOB
 0344   NOUN     CAF    ZERO
 0345            TS     NOUNREG
 0346            CAF    ND1             ND1, OCT 21 (DEC 17)
 0347  4         TC     NVCOM
 0348   NEGSGN   TC     SIGNTEST
 0349            TC     -ON
 0350            CAF    TWO
 0351   BOTHSGN  INDEX  INREL           SET DEC COMP BIT TO 1 (IN DECBRNCH)
 0352            AD     BIT7            BIT 5 FOR R1,  BIT 4 FOR R2,
 0353            ADS    DECBRNCH        BIT 3 FOR R3.
 0354   FIXCLPAS CCS    CLPASS          IF CLPASS IS + OR +0, MAKE IT +0.
 0355            CAF    ZERO
 0356            TS     CLPASS
 0357            TC     +1
 0358  2         TC     ENDOFJOB
 0359   POSGN    TC     SIGNTEST
 0360            TC     +ON
 0361            CAF    ONE
 0362  2         TC     BOTHSGN
 0363   +ON      LXCH   Q
 0364            TC     GETINREL
 0365            INDEX  INREL
 0366            CAF    SGNTAB  -2
 0367            TS     SGNOFF
 0368            AD     ONE
 0369            TS     SGNON
 0370   SGNCOM   CAF    ZERO
 0371            TS     CODE
 0372            XCH    SGNOFF
 0373            TC     11DSPIN
 0374            CAF    BIT11
 0375            TS     CODE
 0376            XCH    SGNON
 0377            TC     11DSPIN
 0378            TC     L
 0379   -ON      LXCH   Q
 0380            TC     GETINREL
 0381            INDEX  INREL
 0382            CAF    SGNTAB  -2
 0383            TS     SGNON
 0384            AD     ONE
 0385            TS     SGNOFF
 0386  2         TC     SGNCOM
 0387   SGNTAB   OCT    5               -R1
 0388            OCT    3               -R2
 0389  4         OCT    0               -R3
 0390   SIGNTEST LXCH   Q               ALLOWS +,- ONLY WHEN DSPCOUNT=R1D1,
 0391            CS     R1D1            R2D1, OR R3D1.
 0392            TC     SGNTST1
 0393            CS     R2D1
 0394            TC     SGNTST1
 0395            CS     R3D1
 0396            TC     SGNTST1
 0397            TC     ENDOFJOB        NO MATCH FOUND. SIGN ILLEGAL
 0398   SGNTST1  AD     DSPCOUNT
 0399            EXTEND
 0400            BZF    +2              MATCH FOUND
 0401            TC     Q
 0402  4         TC     L               SIGN LEGAL
R0403   ERROR LIGHT RESET (RSET) TURNS OFF,
R0404   UPLINK ACTIVITY, AUTO, HOLD, FREE, NO ATT, OPERATOR ERROR, TEMP, GIMBAL
R0405   LOCK, PROG ALM, TRACKER.
R04051  IT ALSO ZEROES THE :TEST ALARM: OUT BIT, WHICH TURNS OFF STBY,RESTART.
R04052 2IT ALSO FORCES BIT 12 OF ALL DSPTAB ENTRIES TO 1.
 0406   ERROR    XCH    21/22REG        RESTORE ORIGINAL C(DSPLOCK). THUS ERROR
 0407            TS     DSPLOCK         LIGHT RESET LEAVES DSPLOCK UNCHANGED.
 0408            CAF    BIT15           TURNS OFF  AUTO, HOLD, FREE, NO ATT,
 0409            TS     DSPTAB  +11D    GIMBAL LOCK, TRACKER, PROG ALM.
 0410            CS     BIT10           TURN OFF :TEST ALARM: OUTBIT.
 0411            EXTEND
 0412            WAND   CHAN13
 0413            CS     ERCON           TURNS OFF  UPLINK ACTIVITY, TEMP,
 0414            EXTEND                 OPERATOR ERROR.
 0415            WAND   DSALMOUT
 0416   TSTAB    CAF    BINCON          (DEC 10)
 0417            TS     ERCNT           ERCNT = COUNT
 0418            INHINT
 0419            INDEX  ERCNT
 0420            CCS    DSPTAB
 0421            AD     ONE
 0422            TC     ERPLUS
 0423            AD     ONE
 0424   ERMINUS  CS     A
 0425            MASK   NOTBIT12
 0426            TC     ERCOM
 0427   ERPLUS   CS     A
 0428            MASK   NOTBIT12
 0429            CS     A               MIGHT WANT TO RESET CLPASS, DECBRNCH,
 0430   ERCOM    INDEX  ERCNT           ETC.
 0431            TS     DSPTAB
 0432            RELINT
 0433            CCS    ERCNT
 0434            TC     TSTAB   +1
 0435            CAF    ZERO
 0436            TS     FAILREG
 0437            TS     OLDERR
 0438            TS     SFAIL
 0442  2         TC     ENDOFJOB
 0443   ERCON    OCT    00114           CHAN 11  BIT 3,4,7.
A04431                                  UPLINK ACTIVITY, TEMP, OPERATOR
A04432                                  ERROR.
 0446  4NOTBIT12 OCT    73777
R0448   CLEAR BLANKS WHICH R1, R2, R3 IS CURRENT OR LAST TO BE DISPLAYED(PERTINE
R0449   NT XREG,YREG,ZREG IS CLEARED). SUCCESSIVE CLEARS TAKE CARE OF EACH RX
R0450  2L/ RC UNTIL R1 IS DONE. THEN NO FURTHER ACTION
R0451   THE SINGLE COMPONENT LOAD VERBS ALLOW ONLY THE SINGLE RC THAT IS
R0452  2APPROPRIATE TO BE CLEARED.
R0453   CLPASS   +0  PASS0, CAN BE BACKED UP
R0454            +NZ  HIPASS, CAN BE BACKED UP
R0455  2         -NZ  PASS0, CANNOT BE BACKED UP
 0456   CLEAR    CCS    DSPCOUNT
 0457            AD     ONE
 0458            TC     +2
 0459            AD     ONE
 0460            TS     DSPCOUNT        MAG OF DSPCOUNT
 0461            TC     GETINREL        MUST SET INREL, EVEN FOR HIPASS
 0462            CCS    CLPASS
 0463            TC     CLPASHI         +
 0464            TC     +2              +0    IF CLPASS IS +0 OR -, IT IS PASS0
 0465            TC     +1              -
 0466            CA     INREL
 0467            TC     LEGALTST
 0468            TC     CLEAR1
 0469   CLPASHI  CCS    INREL
 0470            TS     INREL
 0471            TC     LEGALTST
 0472            CAF    DOUBLK +2       +3 TO - NUMBER. BACKS DATA REQUESTS.
 0473            ADS    REQRET
 0474            CA     INREL
 0475            TS     MIXTEMP         TEMP STORAGE FOR INREL
 0476            EXTEND
 0477            DIM    VERBREG         DECREMENT VERB AND RE-DISPLAY
 0478            TC     BANKCALL
 0479            CADR   UPDATVB
 0480            CA     MIXTEMP
 0481            TS     INREL           RESTORE INREL
 0482   CLEAR1   TC     CLR5
 0483            INCR   CLPASS          ONLY IF CLPASS IS + OR +0,
 0484            TC     ENDOFJOB        SET FOR HIGHER PASS.
 0485   CLR5     LXCH   Q               USES 5BLANK  BUT AVOIDS ITS TC GETINREL
 0486            TC     5BLANK  +2
 0487   LEGALTST AD     NEG2
 0488            CCS    A
 0489            TC     Q               LEGAL  INREL G/ 2
 0490            LOC    +1
 0491            TC     ENDOFJOB        ILLEGAL   INREL= 0,1
 0492  4         TC     Q               LEGAL    INREL = 2
R0494   5BLANK BLANKS 5 CHAR DISPLAY WORD IN R1, R2, OR R3. IT ALSO ZEROES XREG,
R0495   YREG, OR ZREG.PLACE ANY + DSPCOUNT NUMBER FOR PERTINENT RC INTO DSPCOUNT
R0496  2DSPCOUNT IS LEFT SET TO LEFT MOST DSP NUMB FOR RC JUST BLANKED.
 0497   5BLANK   LXCH   Q
 0498            TC     GETINREL
 0499            CAF    ZERO
 0500            INDEX  INREL
 0501            TS     VERBREG         ZERO X, Y, Z REG.
 0502            INDEX  INREL
 0503            TS     XREGLP  -2
 0504            TS     CODE
 0505            INDEX  INREL           ZERO PERTINENT DEC COMP BIT.
 0506            CS     BIT7            PROTECT OTHERS
 0507            MASK   DECBRNCH
 0508            MASK   BRNCHCON        ZERO LOW 2 BITS.
 0509            TS     DECBRNCH
 0510            INDEX  INREL
 0511            CAF    SINBLANK -2     BLANK ISOLATED CHAR SEPARATELY
 0512            TS     COUNT
 0513            TC     DSPIN
 0514   5BLANK1  INDEX  INREL
 0515            CAF    DOUBLK  -2
 0516            TS     DSPCOUNT
 0517            TC     2BLANK
 0518            CS     TWO
 0519            ADS    DSPCOUNT
 0520            TC     2BLANK
 0521            INDEX  INREL
 0522            CAF    R1D1    -2
 0523            TS     DSPCOUNT        SET DSPCOUNT TO LEFT MOST DSP NUMBER
 0524  2         TC     L               OF REG. JUST BLANKED
 0525   SINBLANK OCT    16              DEC 14
 0526            OCT    5
 0527            OCT    4
 0528   DOUBLK   OCT    15              DEC 13
 0529            OCT    11              DEC 9
 0530  2         OCT    3
 0531  2BRNCHCON OCT    77774
R0532   2BLANK BLANKS TWO CHAR. PLACE DSP NUMBER OF LEFT CHAR  OF THE PAIR INTO
R0533  2DSPCOUNT. THIS NUMBER IS LEFT IN DSPCOUNT
 0534   2BLANK   CA     DSPCOUNT
 0535            TS     SR
 0536            CS     BLANKCON
 0537            INHINT
 0538            INDEX  SR
 0539            XCH    DSPTAB
 0540            EXTEND
 0541            BZMF   +2              IF OLD CONTENTS -, NOUT OK
 0542            INCR   NOUT            IF OLD CONTENTS +, +1 TO NOUT
 0543            RELINT                 IF -,NOUT OK
 0544            TC     Q
 0545  2BLANKCON OCT    4000
P0546   ENTER PASS 0 IS THE EXECUTE FUNCTION. HIGHER ORDER ENTERS ARE TO LOAD
R0547   DATA. THE SIGN OF REQRET DETERMINES THE PASS, + FOR PASS 0,- FOR HIGHER
R0548  4PASSES.
R0549   MACHINE CADR TO BE SPECIFIED (MCTBS) NOUNS DESIRE AN ECADR TO BE LOADED
R0550   WHEN USED WITH LOAD VERBS, MONITOR VERBS, OR DISPLAY VERBS (EXCEPT
R0551  4VERB = FIXED MEMORY DISPLAY, WHICH REQUIRES AN FCADR).
 0552  2         SETLOC 22000
 0553   NVSUBB   TC     NVSUB1          STANDARD LEAD INS. DONT MOVE.
 0554   DSPMM    TCF    DSPMM1
 0555   LOADLV1  TC     LOADLV
A0556  4                                END OF STANDARD LEAD INS.
 0557   ENTER    CAF    ZERO
 0558            TS     CLPASS
 0559            CAF    ENDINST
 0560            TS     ENTRET
 0561            CCS    REQRET
 0562            TC     ENTPAS0         IF +, PASS 0
 0563            TC     ENTPAS0         IF +, PASS 0
 0564            TC     +1              IF -, NOT PASS 0
 0565            CAF    THREE           IF DEC, ALARM IF LESS THAN 5 CHAR IN,
 0566            MASK   DECBRNCH        BUT LEAVE REQRET - AND FLASH ON, SO
 0567            CCS    A               OPERATOR CAN SUPPLY MISSING NUMERICAL
 0568            TC     +2              CHARACTERS AND CONTINUE.
 0569            TC     ACCEPTWD        OCTAL. ANY NUMBER OF CHAR OK.
 0570            CCS    DSPCOUNT
 0571            TC     GODSPALM        LESS THAN 5 CHAR DEC(DSPCOUNT IS +)
 0572            TC     GODSPALM        LESS THAN 5 CHAR DEC(DSPCOUNT IS +)
 0573            TC     +1              5 CHAR IN (DSPCOUNT IS -)
 0574   ACCEPTWD CS     REQRET          5 CHAR IN (DSPCOUNT IS -)
 0575            TS     REQRET          SET REQRET +.
 0576            TC     FLASHOFF
 0577  2         TC     REQRET
 0578  2ENTEXIT  =      ENTRET
 0579  2LOWVERB  OCT    30              LOWER VERB THAT AVOIDS NOUN TEST
 0580   ENTPAS0  CAF    ZERO             NOUN VERB SUB ENTERS HERE
 0581            TS     DECBRNCH
 0582   TESTVB   CS     VERBREG         IF VERB IS 30-77, SKIP NOUN TEST
 0583            AD     LOWVERB         30-VB
 0584            EXTEND
 0585            BZMF   VERBFAN         VERB G/E 30
 0586   TESTNN   EXTEND                 VERB L/ 30
 0587            DCA    LODNNLOC        SWITCH BANKS TO NOUN TABLE READING
 0588            DXCH   Z               ROUTINE.
 0589            INDEX  MIXBR
 0590            TC     +0
 0591            TC     +2              NORMAL
 0592            TC     MIXNOUN         MIXED
 0593            CCS    NNADTEM         NORMAL
 0594            TC     VERBFAN -2           NORMAL IF +
 0595            TC     GODSPALM        NOT IN USE   IF +0
 0596            TC     REQADD          SPECIFY MACHINE CADR IF -
 0597            INCR   NOUNCADR        AUGMENT MACHINE CADR IF -0
 0598            TC     SETNADD         ECADR FROM NOUNCADR. SETS EB, NOUNADD.
 0599            TC     INTMCTBS +2
 0600   REQADD   CAF    BIT15           SET CLPASS FOR PASS0 ONLY
 0601            TS     CLPASS
 0602            CS     ENDINST         TEST IF REACHED HERE FROM INTERNAL OR
 0603            AD     ENTEXIT                     FROM EXTERNAL
 0604            EXTEND
 0605            BZF    +2              EXTERNAL MACH CADR TO BE SPECIFIED
 0606            TC     INTMCTBS
 0607            TC     REQDATZ         EXTERNAL MACH CADR TO BE SPECIFIED
 0608            CCS    DECBRNCH
 0609            TC     GODSPALM        ALARM IF DECIMAL USED FOR MCTBS
 0610            XCH    ZREG            OCTAL USED    OK
 0611            TC     SETNCADR        ECADR INTO NOUNCADR. SET EB, NOUNADD.
 0612            EXTEND
 0613            DCA    LODNNLOC        SWITCH BANKS TO NOUN TABLE READING
 0614            DXCH   Z               ROUTINE.
 0615  2         TC     VERBFAN
 0616            EBANK= DSPCOUNT
 0617   LODNNLOC 2CADR  LODNNTAB
 06171 2NEG5     OCT    77772
 0618   INTMCTBS CA     MPAC    +2      INTERNAL MACH CADR TO BE SPECIFIED.
 0619            TC     SETNCADR        ECADR INTO NOUNCADR. SET EB, NOUNADD.
 0620            CS     BIT4            NVSUB CALL LEFT CADR IN MPAC+2 FOR MACH
 06201           MASK   VERBREG         CADR TO BE SPECIFIED.
 06202           AD     NEG5            MASKING MAKES VB15 LOOK LIKE VB05.
 06203           EXTEND
 06204           BZF    VERBFAN         VB = 05 OR 15, DO NOT DISPLAY CADR.
 06205           CAF    R3D1            VB NOT = 05 OR 15, DISPLAY CADR.
 0621            TS     DSPCOUNT
 0622            CA     NOUNCADR
 0623            TC     DSPOCTWD
 0624  2         TC     VERBFAN
 0625            AD     ONE
 0626            TC     SETNCADR        ECADR INTO NOUNCADR. SETS EB, NOUNADD.
 0627   VERBFAN  CS     LST2CON
 0628            AD     VERBREG         VERB-LST2CON
 0629            CCS    A
 0630            AD     ONE             VERB G/ LST2CON
 0631            TC     +2
 0632            TC     VBFANDIR        VERB L/ LST2CON
 0633            TS     MPAC
 0634            TC     RELDSP          RELEASE DISPLAY SYST
 0635            XCH    MPAC            ALSO TURN OFF RELEASE DISPLAY SYST LIGHT
 0636            AD     LST2CADR
 0637            TC     BANKJUMP
 0638   LST2CON  OCT    40              FIRST LST2 VERB
 0639  2LST2CADR CADR   LST2FAN
 0643   VBFANDIR INDEX  VERBREG
 0644            CAF    VERBTAB
 0645  2         TC     BANKJUMP
 0646   VERBTAB  CADR   GODSPALM        VB00 ILLEGAL
 0647            CADR   DSPA            VB01 DISPLAY OCT COMP 1 (R1)
 0648            CADR   DSPB            VB02 DISPLAY OCT COMP 2 (R1)
 0649            CADR   DSPC            VB03 DISPLAY OCT COMP 3 (R1)
 0650            CADR   DSPAB           VB04 DISPLAY OCT COMP 1,2 (R1,R2)
 0651            CADR   DSPABC          VB05 DISPLAY OCT COMP 1,2,3 (R1,R2,R3)
 0652            CADR   DECDSP          VB06 DECIMAL DISPLAY
 0653            CADR   DSPDPDEC        VB07 DP DECIMAL DISPLAY (R1,R2)
 0654            CADR   DSPALARM        VB10 SPARE
 0655            CADR   MONITOR         VB11 MONITOR OCT COMP 1 (R1)
 0656            CADR   MONITOR         VB12 MONITOR OCT COMP 2 (R1)
 0657            CADR   MONITOR         VB13 MONITOR OCT COMP 3 (R1)
 0658            CADR   MONITOR         VB14 MONITOR OCT COMP 1,2 (R1,R2)
 0659            CADR   MONITOR         VB15 MONITOR OCT COMP 1,2,3 (R1,R2,R3)
 0660            CADR   MONITOR         VB16 MONITOR DECIMAL
 0661            CADR   MONITOR         VB17 MONITOR DP DEC  (R1,R2)
 0662            CADR   GODSPALM        VB20 SPARE
 0663            CADR   ALOAD           VB21 LOAD COMP 1 (R1)
 0664            CADR   BLOAD           VB22 LOAD COMP 2 (R2)
 0665            CADR   CLOAD           VB23 LOAD COMP 3 (R3)
 0666            CADR   ABLOAD          VB24 LOAD COMP 1,2 (R1,R2)
 0667            CADR   ABCLOAD         VB25 LOAD COMP 1,2,3 (R1,R2,R3)
 0668            CADR   GODSPALM        VB26 SPARE
 0669            CADR   DSPFMEM         VB27 FIXED MEMORY DISPLAY
A0670                                   THE FOLLOWING VERBS MAKE NO NOUN TEST
 0671   REQEXLOC CADR   VBRQEXEC        VB30 REQUEST EXECUTIVE
 0672            CADR   VBRQWAIT        VB31 REQUEST WAITLIST
 0673            CADR   BUMP            VB32 C(R2) INTO R3, C(R1) INTO R2
 0674            CADR   VBPROC          VB33 PROCEED WITHOUT DATA
 0675            CADR   VBTERM          VB34 TERMINATE CURRENT TEST OR LOAD REQ
 0676            CADR   VBTSTLTS        VB35 TEST LIGHTS
 0677            CADR   SLAP1           VB36 FRESH START
 0678  4ENDVBFAN CADR   MMCHANG         VB37 CHANGE MAJOR MODE
R0679   THE LIST2 VERBFAN IS LOCATED IN THE EXTENDED VERB BANK.
P0680   NNADTAB CONTAINS A RELATIVE ADDRESS, IDADDREL(IN LOW 10 BITS), REFERRING
R0681   TO WHERE 3 CONSECUTIVE ADDRESSES ARE STORED (IN IDADDTAB).
R0682   MIXNOUN GETS DATA AND STORES IN MIXTEMP,+1,+2. IT SETS NOUNADD FOR
R0683  2 MIXTEMP.
 0685   MIXNOUN  CCS    NNADTEM
 0686            TC     +4              +  IN USE
 0687            TC     GODSPALM        +0  NOT IN USE
 0688            TC     +2              -  IN USE
 0689            TC     +1              -0  IN USE
 0690            CS     SIX
 0691            AD     VERBREG
 0692            EXTEND
 0693            BZMF   +2              VERB L/E 6
 0694            TC     VERBFAN         AVOID MIXNOUN SWAP IF VB NOT = DISPLAY
 0695            CAF    TWO
 0696   MIXNN1   TS     DECOUNT
 0697            AD     MIXAD
 0698            TS     NOUNADD         SET NOUNADD TO MIXTEMP + K
 0699            INDEX  DECOUNT         GET IDADDTAB ENTRY FOR COMPONENT K
 0700            CA     IDAD1TEM        OF NOUN.
 0701            TS     NOUNTEM
A0702                                   TEST FOR DP(FOR OCT DISPLAY). IF SO, GET
A0703                                     MINOR PART ONLY.
 0704            TC     SFRUTMIX        GET SF ROUT NUMBER IN A
 0706            TC     DPTEST
 0707            TC     MIXNN2          NO DP
 0708            INCR   NOUNTEM         DP  GET MINOR PART
 0709   MIXNN2   CA     NOUNTEM
 0710            MASK   LOW11           ESUBK (NO DP)  OR (ESUBK)+1    FOR DP
 0711            TC     SETEBANK        SET EBANK, LEAVE EADRES IN A.
 0712            INDEX  A               PICK UP C(ESUBK)  NOT DP
 0713            CA     0               OR C((ESUBK)+1)  FOR DP MINOR PART
 0714            INDEX  NOUNADD
 0715            XCH    0               STORE IN MIXTEM + K
 0716            CCS    DECOUNT
 0717            TC     MIXNN1
 0718  2         TC     VERBFAN
 0719  4MIXAD    TC     MIXTEMP
R0720   DPTEST   ENTER WITH SF ROUT NUMBER IN A.
R0721            RETURNS TO L+1 IF NO DP.
R0722  2         RETURNS TO L+2 IF DP.
 0723   DPTEST   INDEX  A
 0724            TCF    +1
 07241           TC     Q               OCTAL ONLY  NO DP
 0725            TC     Q               FRACT NO DP
 0726            TC     Q               DEG  NO DP
 0727            TC     Q               ARITH  NO DP
 0728            TCF    DPTEST1         DP1OUT
 0729            TCF    DPTEST1         DP2OUT
 0730            TC     Q               OPDEG  NO DP
 0731            TCF    DPTEST1         DP3OUT
 0732   DPTEST1  INDEX  Q
 0733  4         TC     1               RETURN TO L+2
 0734   REQDATX  CAF    R1D1
 0735            TCF    REQCOM
 0736   REQDATY  CAF    R2D1
 0737            TCF    REQCOM
 0738   REQDATZ  CAF    R3D1
 0739   REQCOM   TS     DSPCOUNT
 0740            CS     Q
 0741            TS     REQRET
 0742            TC     BANKCALL
 0743            CADR   5BLANK
 0744            TC     FLASHON
 0745            CS     ENDINST
 0746            AD     ENTEXIT
 0747            EXTEND
 0748            BZF    ENDRQDAT        ENTEXIT = ENDOFJOB. EXTERNALLY INITIATED
 0749            CS     ZERO            ENTEXIT NOT ENDOFJOB. NVSUB INITIATED
 0750            TS     CADRSTOR        NVSUB INITIATED LOAD. SET CADRSTOR TO -0
 0751  2ENDRQDAT TC     ENTEXIT
R0752   IF NVSUB INITIATED LOAD, SET CADRSTOR TO -0 TO TELL RECALTST TO RELEASE
R0753  4DISPLAY IF ENDIDLE WAS NOT USED. (NECESSARY FOR DATAWAIT)
 0755            TS     NOUNREG
 0756   UPDATNN  XCH    Q
 0757            TS     UPDATRET
 0758            EXTEND
 0759            DCA    LODNNLOC        SWITCH BANKS TO NOUN TABLE READING
 0760            DXCH   Z               ROUTINE.
 0761            CCS    NNADTEM
 0762            AD     ONE             NORMAL
 0763            TCF    PUTADD
 0764            TCF    PUTADD  +1      MCTBS  DONT CHANGE NOUNADD
 0765            TCF    PUTADD  +1      MCTBI  DONT CHANGE NOUNADD
 0766   PUTADD   TC     SETNCADR        ECADR INTO NOUNCADR. SETS EB, NOUNADD.
 0767            CAF    ND1
 0768            TS     DSPCOUNT
 0769            CA     NOUNREG
 0770  2         TCF    UPDAT1
 0771            TS     VERBREG
 0772   UPDATVB  XCH    Q
 0773            TS     UPDATRET
 0774            CAF    VD1
 0775            TS     DSPCOUNT
 0776            CA     VERBREG
 0777   UPDAT1   TC     DSP2BIT
 0778  4         TC     UPDATRET
 0779   GODSPALM TC     POSTJUMP
 0780            CADR   DSPALARM
P0781            NOUN   TABLES
R0782   NOUN CODE L/ 55, NORMAL CASE.  NOUN CODE G/E 55, MIXED NOUN CASE.
R0783   FOR NORMAL CASE, NNADTAB CONTAINS ONE       ECADR     FOR EACH NOUN.
R0784   +0 INDICATES NOUN NOT USED.   - ENTRY INDICATES MACHINE CADR(E OR F) TO
R0785   BE SPECIFIED. -1 INDICATES CHANNEL TO BE SPECIFIED. -0 INDICATES AUGMENT
R07851 2OF LAST MACHINE CADR SUPPLIED.
R0786   FOR MIXED CASE, NNADTAB CONTAINS ONE INDIRECT ADDRESS(IDADDREL) IN LOW
R0787  210 BITS, AND THE COMPONENT CODE NUMBER IN THE HIGH 5 BITS.
R0788  2NNTYPTAB IS A PACKED TABLE OF THE FORM MMMMMNNNNNPPPPP.
R0789   FOR THE NORMAL CASE, M-S ARE THE COMPONENT CODE NUMBER.
R0790                        N-S ARE THE SF ROUTINE CODE NUMBER.
R0791  2                     P-S ARE THE SF CONSTANT CODE NUMBER.
R0792   MIXED CASE,M-S ARE THE SF CONSTANT3 CODE NUMBER     3 COMPONENT CASE
R0793              N-S ARE THE SF CONSTANT2 CODE NUMBER
R0794              P-S ARE THE SF CONSTANT1 CODE NUMBER
R0795              N-S ARE THE SF CONSTANT2 CODE NUMBER     2 COMPONENT CASE
R0796              P-S ARE THE SF CONSTANT1 CODE NUMBER
R0797  2           P-S ARE THE SF CONSTANT1 CODE NUMBER      1 COMPONENT CASE
R0798   THERE IS ALSO AN INDIRECT ADDRESS TABLE(IDADDTAB) FOR MIXED CASE ONLY.
R0799   EACH ENTRY CONTAINS ONE ECADR.    IDADDREL IS THE RELATIVE ADDRESS OF
R0800   THE FIRST OF THESE ENTRIES.
R0801   THERE IS ONE ENTRY IN THIS TABLE FOR EACH COMPONENT OF A MIXED NOUN
R0802  2THEY ARE LISTED IN ORDER OF ASCENDING K.
R0803   THERE IS ALSO A SCALE FACTOR ROUTINE NUMBER TABLE( RUTMXTAB ) FOR MIXED
R0804   CASE ONLY. THERE IS ONE ENTRY PER MIXED NOUN. THE FORM IS,
R0805         QQQQQRRRRRSSSSS
R0806   Q-S ARE THE SF ROUTINE 3 CODE NUMBER     3 COMPONENT CASE
R0807   R-S ARE THE SF ROUTINE 2 CODE NUMBER
R0808   S-S ARE THE SF ROUTINE 1 CODE NUMBER
R0809   R-S ARE THE SF ROUTINE 2 CODE NUMBER     2 COMPONENT CASE
R0810  4S-S ARE THE SF ROUTINE 1 CODE NUMBER
R0811   IN OCTAL DISPLAY AND LOAD (OCT OR DEC) VERBS, EXCLUDE USE OF VERBS WHOSE
R0812   COMPONENT NUMBER IS GREATER THAN THE NUMBER OF COMPONENTS IN NOUN.
R0813   ALL MACHINE ADDRESS TO BE SPECIFIED NOUNS ARE 1 COMPONENT.
R0814   ONLY EXCEPTION IS NOUN 01 TO ALLOW OCTAL DISPLAYS AND LOADS OF
R0815  4AN UNCONTOLLED NUMBER OF COMPONENTS.
R0816   IN MULTI-COMPONENT LOAD VERBS, NO MIXING OF OCTAL AND DECIMAL DATA
R0817  2COMPONENT WORDS IS ALLOWED. ALARM IF VIOLATION.
R0818   IN DECIMAL LOADS OF DATA, 5 NUMERICAL CHARACTERS MUST BE KEYED IN
R0819   BEFORE EACH ENTER. IF NOT, ALARM.
P0820            DISPLAY  VERBS
 0821   DSPABC   CS     TWO
 0822            TC     COMPTEST
 0823            INDEX  NOUNADD
 0824            CS     2
 0825            XCH    BUF     +2
 0826   DSPAB    CS     ONE
 0827            TC     COMPTEST
 0828            INDEX  NOUNADD
 0829            CS     1
 0830            XCH    BUF     +1
 0831   DSPA     TC     TSTFORDP
 0832            INDEX  NOUNADD
 0833            CS     0
 0834   DSPCOM1  XCH    BUF
 0835            TC     DSPCOM2
 0836   DSPB     CS     ONE
 0837            TC     COMPTEST
 0838            INDEX  NOUNADD
 0839            CS     1
 0840            TC     DSPCOM1
 0841   DSPC     CS     TWO
 0842            TC     COMPTEST
 0843            INDEX  NOUNADD
 0844            CS     2
 0845            TC     DSPCOM1
 0846   DSPCOM2  CS     TWO             A  B  C  AB  ABC
 0847            AD     VERBREG         -1 -0 +1 +2  +3   IN A
 0848            CCS    A               +0 +0 +0 +1  +2    IN A AFTER CCS
 0849            TC     DSPCOM3
 0850            TC     ENTEXIT
 0851            TC     +1
 0852   DSPCOM3  TS     DISTEM          +0,+1,+2 INTO DISTEM
 0853            INDEX  A
 0854            CAF    R1D1
 0855            TS     DSPCOUNT
 0856            INDEX  DISTEM
 0857            CS     BUF
 0858            TC     DSPOCTWD
 0859            XCH    DISTEM
 0860  2         TC     DSPCOM2 +2
R0861   COMPTEST ALARMS IF COMPONENT NUMBER OF VERB(LOAD OR OCT DISPLAY) IS
R0862   GREATER THAN THE HIGHEST COMPONENT NUMBER OF NOUN.
R0863   NOUN 01 IS EXCLUDED FROM TEST.
 0864   COMPTEST TS     SFTEMP1         - VERB COMP
 0865            LXCH   Q
 0866   COMPTST1 CS     ONE
 0867            AD     NOUNREG
 0868            EXTEND
 0869            BZF    NDCMPTST        NOUN = 01, ANY COMP OK
 0870            INDEX  MIXBR           NOUN NOT = 01.
 0871            CAF    COMPICK -1
 0872            INDEX  A
 0873            CA     0
 0874            MASK   HI5
 0875            TC     LEFT5           NOUN COMP
 0876            AD     SFTEMP1         NOUN COMP - VERB COMP
 0877            CCS    A
 0878            TC     L               NOUN COMP G/ VERB COMP
 0879            LOC    +1
 0880            TC     GODSPALM        NOUN COMP L/ VERB COMP
 0881  4NDCMPTST TC     L               NOUN COMP = VERB COMP
 0882   TSTFORDP LXCH   Q               TEST FOR DP. IF SO, GET MINOR PART ONLY.
 08821           CA     NNADTEM
 08822           AD     ONE             IF NNADTEM = -1, CHANNEL TO BE SPECIFIED
 08823           EXTEND
 08824           BZF    CHANDSP
 0883            INDEX  MIXBR
 0884            TC     +0
 0885            TC     +2              NORMAL
 0886            TC     L               MIXED CASE ALREADY HANDLED IN MIXNOUN
 0887            TC     SFRUTNOR
 0888            TC     DPTEST
 0889            TC     L               NO DP
 0890            INCR   NOUNADD         DP    E+1 INTO NOUNADD FOR MINOR PART.
 0891  4         TC     L
 08911  CHANDSP  EXTEND
 08912           INDEX  NOUNCADR
 08913           READ   0
 08914           CS     A
 08915 4         TCF    DSPCOM1
 0892   COMPICK  ADRES  NNTYPTEM
 0893  2         ADRES  NNADTEM
 0894   DECDSP   INDEX  MIXBR           NORMAL                MIXED
 0895            CAF    COMPICK -1      ADRES NNTYPTEM        ADRES NNADTEM
 0896            INDEX  A
 0897            CA     0               C(NNTYPTEM)           C(NNADTEM)
 0898            MASK   HI5             GET HI5 OF NNTYPTAB(NORM)OF NNADTAB(MIX)
 0899            TC     LEFT5
 0900            TS     DECOUNT         COMP NUMBER INTO DECOUNT
 0901   DSPDCGET TS     DECTEM          PICKS UP DATA
 0902            AD     NOUNADD         DECTEM  1COMP +0, 2COMP +1, 3COMP +2
 0903            INDEX  A
 0904            CS     0
 0905            INDEX  DECTEM
 0906            XCH    XREG            CANT USE BUF SINCE DMP USES IT.
 0907            CCS    DECTEM
 0908            TC     DSPDCGET        MORE TO GET
 0909   DSPDCPUT CAF    ZERO            DISPLAYS DATA
 0910            TS     MPAC    +1      DECOUNT 1COMP +0, 2COMP +1, 3COMP +2
 0911            TS     MPAC    +2
 0912            INDEX  DECOUNT
 0913            CAF    R1D1
 0914            TS     DSPCOUNT
 0915            INDEX  DECOUNT
 0916            CS     XREG
 0917            TS     MPAC
 0918            TC     SFCONUM         2X( SF CON NUMB ) IN A
 0919            TS     SFTEMP1
 0920            EXTEND                 SWITCH BANKS TO SF CONSTANT TABLE
 0921            DCA    GTSFOUTL           READING ROUTINE.
 0922            DXCH   Z               LOADS SFTEMP1, SFTEMP2.
 0923            INDEX  MIXBR
 0924            TC     +0
 0925            TC     DSPSFNOR
 0926            TC     SFRUTMIX
 0927  2         TC     DECDSP3
 0928   DSPSFNOR TC     SFRUTNOR
 0929  2         TC     DECDSP3
 0930            EBANK= DSPCOUNT
 0931  4GTSFOUTL 2CADR  GTSFOUT
 0932   DSPDCEND TC     BANKCALL        ALL SFOUT ROUTINES END HERE
 0933            CADR   DSPDECWD
 0934            CCS    DECOUNT
 0935            TC     +2
 0936            TC     ENTEXIT
 0937            TS     DECOUNT
 0938  4         TC     DSPDCPUT        MORE TO DISPLAY
 0940   DECDSP3  INDEX  A
 0941            CAF    SFOUTABR
 0942  2         TC     BANKJUMP
 0943   SFOUTABR CADR   DSPALARM        ALARM IF DEC DISP WITH OCTAL ONLY NOUN
 09431           CADR   DSPDCEND
 0944            CADR   DEGOUTSF
 0945            CADR   ARTOUTSF
 0946            CADR   DP1OUTSF
 0947            CADR   DP2OUTSF
 0948            CADR   OPDEGOUT
 0949            CADR   DP3OUTSF
 09491 4ENDRTOUT EQUALS
R0950           THE FOLLOWING IS ATYPICAL SF ROUTINE . IT USES MPAC. LEAVES RESU
R0951  4LTS IN MPAC, MPAC+1. ENDS WITH TC DSPDCEND
 0952  2         SETLOC BLANKCON +1
R0953      DEGOUTSF SCALES BY .18 THE LOW 14 BITS OF ANGLE , ADDING .18 FOR
R0954  2NUMBERS IN THE NEGATIVE (AGC) RANGE.
 0955   DEGOUTSF CAF    ZERO
 0956            TS     MPAC    +2      SET INDEX FOR FULL SCALE
 0957            TC     FIXRANGE
 0958            TC     +2              NO AUGMENT NEEDED (SFTEMP1 AND 2 ARE 0)
 0959            TC     SETAUG          SET AUGMENTER ACCORDING TO C(MPAC +2)
 0960  2         TC     DEGCOM
R0961  2OPDEGOUT SCALES BY .45 (THE RANGE IS 90 DEGREES) AND ADDS A 20 DEG BIAS.
 0962   OPDEGOUT CCS    MPAC            RANGE IS 90 DEG
 0963            XCH    MPAC            IF POS OR POS 0 THEN ADD BIAS AND
 0964            TC     +3              CORRECT FOR POSSIBLE OVERFLOW
 0965            TC     NEGOPT          IF NEG NON ZERO
 0966            AD     NEG1            IF NEG ZERO SUBTRACT 1
 0967            AD     20BIAS
 0968   BIASCOM  TS     MPAC            TEST FOR OVERFLOW
 0969            TC     +3              NO OVFLOW
 0970            CAF    BIT15           IF OVFLOW
 0971            ADS    MPAC
 0972            CAF    TWO             SET MULTIPLIER TO .45
 0973  2         TC     DEGOUTSF +1
 0974   NEGOPT   XCH    MPAC            NEGATIVE CASE
 0975            AD     20BIAS
 0976            CCS    A
 0977            TC     BIASCOM         IF POS THEN SUBTRACT 1 BECAUSE OF 2SCOM
 0978            LOC    +1
 0979            AD     ONE             IF NEG RESTORE SUM
 0980            COM                    IF NEG 0 LEAVE NEG 0
 0981  2         TC     BIASCOM
 0982   SETAUG   EXTEND                 LOADS SFTEMP1 AND SFTEMP2 WITH THE
 0983            INDEX  MPAC    +2      DP AUGMENTER CONSTANT
 0984            DCA    DEGTAB
 0985            DXCH   SFTEMP1
 0986  2         TC     Q
 0987   FIXRANGE CCS    MPAC            IF MPAC IS + RETURN TO L+1
 0988            TC     Q               IF MPAC IS - RETURN TO L+2 AFTER
 0989            TC     Q               MASKING OUT THE SIGN BIT
 0990            TCF    +1
 0991            CS     BIT15
 0992            MASK   MPAC
 0993            TS     MPAC
 0994            INDEX  Q
 0995  2         TC     1
 0996   DEGCOM   EXTEND                 LOADS MULTIPLIER , DOES SHORTMP, AND
 0997            INDEX  MPAC    +2      ADDS AUGMENTER.
 0998            DCA    DEGTAB
 0999            DXCH   MPAC            ADJUSTED ANGLE IN A
 1000            TC     SHORTMP
 1001            DXCH   SFTEMP1
 1002            DAS    MPAC
 1003  4         TC     SCOUTEND
 1004   DEGTAB   OCT    05605           HI PART OF     .18
 1005            OCT    03656           LOW PART OF    .18
 1006            OCT    16314           HI PART OF     .45
 1007  2         OCT    31463           LO PART OF     .45
 1008  220BIAS   OCT    16040           20 DEG BIAS FOR OPTICS
 1009   ARTOUTSF DXCH   SFTEMP1         ASSUMES POINT AT LEFT OF DP SFCON
 1010            DXCH   MPAC
 1011            TC     SHORTMP
 1012   SCOUTEND TC     POSTJUMP
 1013  2         CADR   DSPDCEND
 1016   DP1OUTSF TC     DPOUT           SCALES MPAC, MPAC +1 BY DP SCALE FACTOR
 1017            XCH    MPAC    +2      IN SFTEMP1, SFTEMP2.  THEN SCALE RESULT
 1018            XCH    MPAC    +1      BY B14.
 1019            TS     MPAC
 1020  4         TC     SCOUTEND
 1021   DP2OUTSF TC     DPOUT           SCALES MPAC , MPAC +1 BY DP SCALE FACTOR
 1022  4         TC     SCOUTEND
 1023   DP3OUTSF TC     DPOUT           ASSUMES POINT BETWEEN BITS 7-8 OF HIGH
 1027            TC     TPLEFT7         PART OF SFCON. SHIFTS RESULTS LEFT 7.
 1028  4         TC     SCOUTEND
R1029   DPOUT PICKS UP FRESH DATA FOR BOTH HI AND LO COMPONENTS.
R1030  2THIS IS NEEDED FOR TIME DISPLAY.
 1032   DPOUT    XCH    Q
 1033            TS     OVFIND
 1034            INDEX  MIXBR
 1035            TC     +0
 1036            TC     DPOUTNOR
 1037            INDEX  DECOUNT         GET IDADDTAB ENTRY FOR COMPONENT K
 1038            CA     IDAD1TEM            OF NOUN.
 1039            MASK   LOW11           E SUBK
 1040            TC     SETEBANK        SET EB, LEAVE EADRES IN A.
 1041   DPOUTCOM EXTEND
 1042            INDEX  A               MIXED         NORMAL
 1043            DCA    0               C(ESUBK)      C(E)
 1044            DXCH   MPAC            C((E SUBK)+1)      C(E+1)
 1045            TC     DMP
 1046            ADRES  SFTEMP1
 1047            TC     TPAGREE
 1048  2         TC     OVFIND
 1049   DPOUTNOR CA     NOUNADD         E
 1050  4         TC     DPOUTCOM
R1051   THIS IS A SPECIAL PURPOSE VERB FOR DISPLAYING A DOUBLE PRECISION AGC
R1052   WORD AS 10 DECIMAL DIGITS ON THE AGC DISPLAY PANEL.  IT CAN BE USED WITH
R1053   ANY NOUN, EXCEPT MIXED NOUNS. IT DISPLAYS THE CONTENTS
R1054   OF THE REGISTER NOUNADD IS POINTING TO .  IF USED WITH NOUNS WHICH ARE
R1055   INHERENTLY NOT DP SUCH AS THE CDU COUNTERS THE DISPLAY WILL BE GARBAGE.
R1056  4DISPLAY IS IN R1 AND R2 ONLY WITH THE SIGN IN R1.
 1058   DSPDPDEC INDEX  MIXBR
 1059            TC     +0
 1060            TC     +2              NORMAL NOUN
 1061            TC     DSPALARM
 1062            EXTEND
 1063            INDEX  NOUNADD
 1064            DCA    0
 1065            DXCH   MPAC
 1066            CAF    R1D1
 1067            TS     DSPCOUNT
 1068            CAF    ZERO
 1069            TS     MPAC  +2
 1070            TC     TPAGREE
 1071            TC     DSP2DEC
 1072   ENDDPDEC TC     ENTEXIT
P1073  4         LOAD   VERBS
 1074  2         SETLOC ENDRTOUT
 1075   ABCLOAD  CS     TWO
 1076            TC     COMPTEST
 1077            CAF    VBSP1LD
 1078            TC     UPDATVB  -1
 1079            TC     REQDATX
 1080            CAF    VBSP2LD
 1081            TC     UPDATVB  -1
 1082            TC     REQDATY
 1083            CAF    VBSP3LD
 1084            TC     UPDATVB -1
 1085  4         TC     REQDATZ
 1086   PUTXYZ   CS     SIX             TEST THAT THE 3 DATA WORDS LOADED ARE
 1087            TC     ALLDC/OC        ALL DEC OR ALL OCT.
 1088            EXTEND
 1089            DCA    LODNNLOC        SWITCH BANKS TO NOUN TABLE READING
 1090            DXCH   Z               ROUTINE.
 1091            CAF    ZERO            X COMP
 1092            TC     PUTCOM
 1093            INDEX  NOUNADD
 1094            TS     0
 1095            CAF    ONE             Y COMP
 1096            TC     PUTCOM
 1097            INDEX   NOUNADD
 1098            TS     1
 1099            CAF    TWO             Z COMP
 1100            TC     PUTCOM
 1101            INDEX  NOUNADD
 1102            TS     2
 1103  2         TC     LOADLV
 1104   ABLOAD   CS     ONE
 1105            TC     COMPTEST
 1106            CAF    VBSP1LD
 1107            TC     UPDATVB -1
 1108            TC     REQDATX
 1109            CAF    VBSP2LD
 1110            TC     UPDATVB -1
 1111            TC     REQDATY
 1112   PUTXY    CS     FIVE            TEST THAT THE 2 DATA WORDS LOADED ARE
 1113            TC     ALLDC/OC        ALL DEC OR ALL OCT.
 1114            EXTEND
 1115            DCA    LODNNLOC        SWITCH BANKS TO NOUN TABLE READING
 1116            DXCH   Z               ROUTINE.
 1117            CAF    ZERO            X COMP
 1118            TC     PUTCOM
 1119            INDEX  NOUNADD
 1120            TS     0
 1121            CAF    ONE             Y COMP
 1122            TC     PUTCOM
 1123            INDEX  NOUNADD
 1124            TS     1
 1125  2         TC     LOADLV
 1126   ALOAD    TC     REQDATX
 1127            EXTEND
 1128            DCA    LODNNLOC        SWITCH BANKS TO NOUN TABLE READING
 1129            DXCH   Z               ROUTINE.
 1130            CAF    ZERO            X COMP
 1131            TC     PUTCOM
 1132            INDEX  NOUNADD
 1133            TS     0
 1134  2         TC     LOADLV
 1135   BLOAD    CS     ONE
 1136            TC     COMPTEST
 1137            CAF    BIT15           SET CLPASS FOR PASS0 ONLY
 1138            TS     CLPASS
 1139            TC     REQDATY
 1140            EXTEND
 1141            DCA    LODNNLOC        SWITCH BANKS TO NOUN TABLE READING
 1142            DXCH   Z               ROUTINE.
 1143            CAF    ONE
 1144            TC     PUTCOM
 1145            INDEX  NOUNADD
 1146            TS     1
 1147  2         TC     LOADLV
 1148   CLOAD    CS     TWO
 1149            TC     COMPTEST
 1150            CAF    BIT15           SET CLPASS FOR PASS0 ONLY
 1151            TS     CLPASS
 1152            TC     REQDATZ
 1153            EXTEND
 1154            DCA    LODNNLOC        SWITCH BANKS TO NOUN TABLE READING
 1155            DXCH   Z               ROUTINE.
 1156            CAF    TWO
 1157            TC     PUTCOM
 1158            INDEX  NOUNADD
 1159            TS     2
 1160  2         TC     LOADLV
 1161   LOADLV   CAF    ZERO
 1162            TS     DECBRNCH
 1163            CS     ZERO
 1164            TS     LOADSTAT
 1165            CS     VD1             TO BLOCK NUMERICAL CHARACTERS AND
 1166            TS     DSPCOUNT        CLEARS AFTER A COMPLETED LOAD
 1167            TC     POSTJUMP        AFTER COMPLETED LOAD, GO TO RECALTST
 1168  2         CADR   RECALTST        TO SEE IF THERE IS RECALL FROM ENDIDLE.
 1170   VBSP1LD  OCT    21              VB21 = ALOAD
 1171   VBSP2LD  OCT    22              VB22 = BLOAD
 1172  4VBSP3LD  OCT    23              VB23 = CLOAD
 1173   ALLDC/OC TS     DECOUNT         TESTS THAT DATA WORDS LOADED ARE EITHER
 1174            CS     DECBRNCH        ALL DEC OR ALL OCT. ALARMS IF NOT.
 1175            TS     SR
 1176            CS     SR
 1177            CS     SR              SHIFTED RIGHT 2
 1178            CCS    A               DEC COMP BITS IN LOW 3
 1179            TCF    +2              SOME ONES IN LOW 3
 1180            TC     Q               ALL ZEROS. ALL OCTAL.  OK
 1181            AD     DECOUNT         DEC COMP = 7 FOR 3COMP, =6 FOR 2COMP
 1182            EXTEND                 (BUT IT HAS BEEN DECREMENTED BY CCS)
 1183            BZF    +2              MUST MATCH 6 FOR 3COMP, 5 FOR 2COMP.
 1184            TC     GODSPALM
 1185  4GOQ      TC     Q               ALL REQUIRED ARE DEC. OK
 1186   SFRUTNOR XCH    Q               GETS SF ROUTINE NUMBER FOR NORMAL CASE
 1187            TS     EXITEM          CANT USE L FOR RETURN. TSTFORDP USES L.
 1188            CAF    MID5
 1189            MASK   NNTYPTEM
 1190            TC     RIGHT5
 1191  2         TC     EXITEM          SF ROUTINE NUMBER IN A
 1192   SFRUTMIX XCH    Q               GETS SF ROUTINE NUMBER FOR MIXED CASE
 1193            TS     EXITEM
 1194            INDEX  DECOUNT
 1195            CAF    DISPLACE        PUT TC GOQ, TC RIGHT5, OR TC LEFT5 IN L
 1196            TS     L
 1197            INDEX  DECOUNT
 1198            CAF    LOW5            LOW5, MID5, OR HI5 IN A
 1199            MASK   RUTMXTEM        GET HI5, MID5, OR LOW5 OF RUTMXTAB ENTRY
 1200            INDEX  L
 1201            TC     0
R1202   DO TC GOQ(DECOUNT=0), DO TC RIGHT5(DECOUNT=1), DO TC LEFT5(DECOUNT=2).
 1203  2SFRET1   TC     EXITEM          SF ROUTINE NUMBER IN A
 1204   SFCONUM  XCH    Q               GETS 2X( SF CONSTANT NUMBER)
 1205            TS     EXITEM
 1206            INDEX  MIXBR
 1207            TC     +0
 1208            TC     CONUMNOR        NORMAL NOUN
 1209            INDEX  DECOUNT         MIXED NOUN
 1210            CAF    DISPLACE
 1211            TS     L               PUT TC GOQ, TC RIGHT5, OR TC LEFT5 IN L
 1212            INDEX  DECOUNT
 1213            CAF    LOW5
 1214            MASK   NNTYPTEM
 1215            INDEX  L
 1216            TC     0
R1217   DO TC GOQ(DECOUNT=0), DO TC RIGHT5(DECOUNT=1), DO TC LEFT5(DECOUNT=2).
 1218   SFRET    DOUBLE                 2X(SF CONSTANT NUMBER ) IN A
 1219  2         TC     EXITEM
 1220   DISPLACE TC     GOQ
 1221            TC     RIGHT5
 1222  2         TC     LEFT5
 1223   CONUMNOR CAF    LOW5            NORMAL NOUN ALWAYS GETS LOW 5 OF
 1224            MASK   NNTYPTEM        NNTYPTAB FOR SF CONUM.
 1225            DOUBLE
 1226  4         TC     EXITEM          2X( SF CONSTANT NUMBER) IN A
 1227   PUTCOM   TS     DECOUNT
 1228            XCH    Q
 1229            TS     DECRET
 1230            CAF    ZERO
 1231            TS     OVFIND
 1232            INDEX  DECOUNT
 1233            XCH    XREGLP
 1234            TS     MPAC  +1
 1235            INDEX  DECOUNT
 1236            XCH    XREG
 1237            TS     MPAC
 1238            INDEX  MIXBR
 1239            TC     +0
 1240            TC     PUTNORM         NORMAL NOUN
R1241   IF MIXNOUN, PLACE ADDRESS FOR COMPONENT K INTO NOUNADD, SET EBANK BITS.
 1242            INDEX  DECOUNT         GET IDADDTAB ENTRY FOR COMPONENT K
 1243            CA     IDAD1TEM                OF NOUN.
 1244            MASK   LOW11           (ECADR)SUBK FOR CURRENT COMP OF NOUN
 1247            TC     SETNCADR        ECADR INTO NOUNCADR. SETS EB, NOUNADD.
 12471           EXTEND                 C(NOUNADD) IN A UPON RETURN
 12472           SU     DECOUNT         PLACE (ESUBK)-K INTO NOUNADD
 12473           TS     NOUNADD
 1248            CCS    DECBRNCH
 1249            TC     PUTDECSF        +  DEC
 1250            TC     SFRUTMIX        +0  OCTAL
 1251            TC     DPTEST
 1252            TC     PUTCOM2         NO DP
A1253                                   TEST FOR DP SCALE FOR OCT LOAD. IF SO,
A1254                                   +0 INTO MAJOR PART. SET NOUNADD FOR
A1255                                   LOADING OCTAL WORD INTO MINOR PART.
 1256   PUTDPCOM INCR   NOUNADD         DP  (ESUBK)-K+1  OR  E+1
 1257            CA     NOUNADD         NOUNADD NOW SET FOR MINOR PART
 1258            ADS    DECOUNT         (ESUBK)+1  OR  E+1  INTO DECOUNT
 1259            CAF    ZERO            NOUNADD SET FOR MINOR PART
 1260            INDEX  DECOUNT
 1261            TS     0       -1      ZERO MAJOR PART(ESUBK OR E)
 1262  2         TC     PUTCOM2
 1263   PUTNORM  TC     SETNADD         ECADR FROM NOUNCADR. SETS EB, NOUNADD.
 1264            CCS    DECBRNCH
 1265            TC     PUTDECSF        +  DEC
 1266            TC     SFRUTNOR        +0  OCTAL
 1267            TC     DPTEST
 1268            TC     PUTCOM2 -4      NO DP
 1269            CAF    ZERO            DP
 1270            TS     DECOUNT
 1271  2         TC     PUTDPCOM
 12711           CA     NNADTEM
 12712           AD     ONE             IF NNADTEM = -1, CHANNEL TO BE SPECIFIED
 12713           EXTEND
 12714           BZF    CHANLOAD
 1272   PUTCOM2  XCH    MPAC
 1273  2         TC     DECRET
 1274            EBANK= DSPCOUNT
 1275  4GTSFINLC 2CADR  GTSFIN
 12751  CHANLOAD XCH    MPAC
 12752           EXTEND
 12753           INDEX  NOUNCADR
 12754           WRITE  0
 12755 4         TC     LOADLV
R1276  2PUTDECSF FINDS MIXBR AND DECOUNT STILL SET FROM PUTCOM
 1277   PUTDECSF TC     SFCONUM         2X(SF CON NUMB) IN A
 1278            TS     SFTEMP1
 1279            EXTEND                 SWITCH BANKS TO SF CONSTANT TABLE
 1280            DCA    GTSFINLC        READING ROUTINE.
 1281            DXCH   Z               LOADS SFTEMP1, SFTEMP2.
 1282            INDEX  MIXBR
 1283            TC     +0
 1284            TC     PUTSFNOR
 1285            TC     SFRUTMIX
 1286            TC     PUTDCSF2
 1287  2PUTSFNOR TC     SFRUTNOR
 1288   PUTDCSF2 INDEX  A
 1289            CAF    SFINTABR
 1290            TC     BANKJUMP        SWITCH BANKS FOR EXPANSHION ROOM
 1291   SFINTABR CADR   DSPALARM        ALARM IF DEC LOAD WITH OCTAL ONLY NOUN
 12911           CADR   BINROUND
 1292            CADR   DEGINSF
 1293            CADR   ARTHINSF
 1294            CADR   DPINSF
 1295            CADR   DPINSF2
 1296            CADR   OPTDEGIN
 1297            CADR   DPINSF          SAME AS ARITHDP1
 12971 4ENDRUTIN EQUALS
R1298   SCALE FACTORS FOR THOSE ROUTINES NEEDING THEM ARE AVAILABLE IN SFTEMP1.
R1299  4ALL SFIN ROUTINES USE MPAC MPAC+1. LEAVE RESULT IN A. END WITH TC DECRET
 1300  2         SETLOC ENDDPDEC +1
R1301  2DEGINSF APPLIES 1000/180 =5.55555(10) = 5.43434(8)
 1302   DEGINSF  TC     DMP             SF ROUTINE FOR DEC DEGREES
 1303            ADRES  DEGCON1         MULT BY 5.5  5(10)X2EXP-3
 1304            CCS    MPAC    +1      THIS ROUNDS OFF MPAC+1 BEFORE SHIFT
 1305            CAF    BIT11           LEFT 3, AND CAUSES 360.00 TO OF/UF
 1306            TC     +2              WHEN SHIFTED LEFT AND ALARM.
 1307            CS     BIT11
 1308            AD     MPAC    +1
 1309            TC     2ROUND  +2
 1310            TC     TPSL1           LEFT 1
 1311   DEGINSF2 TC     TPSL1           LEFT 2
 1312            TC     TESTOFUF
 1313            TC     TPSL1           RETURNS IF NO OF/UF (LEFT3)
 1314            CCS    MPAC
 1315            TC     SIGNFIX         IF+, GO TO SIGNFIX
 1316            TC     SIGNFIX         IF +0, GO TO SIGNFIX
 1317            COM                    IF - , USE -MAGNITUDE +1
 1318            TS     MPAC            IF -0, USE +0
 1319   SIGNFIX  CCS    OVFIND
 1320            TC     SGNTO1          IF OVERFLOW
 1321            TC     ENDSCALE        NO OVERFLOW/UNDERFLOW
 1322            CCS    MPAC            IF UF FORCE SIGN TO 0 EXCEPT -180
 1323            LOC    +1
 1324            TC     NEG180
 1325            TC     +1
 1326            XCH    MPAC
 1327            MASK   POSMAX
 1328            TS     MPAC
 1329   ENDSCALE TC     POSTJUMP
 1330  2         CADR   PUTCOM2
 1331   NEG180   CS     POSMAX
 1332  2         TC     ENDSCALE  -1
 1333   SGNTO1   CS     MPAC            IF OF FORCE SIGN TO 1
 1334            MASK   POSMAX
 1335            CS     A
 1336  2         TC     ENDSCALE  -1
 1337   DEGCON1  2DEC   5.555555555 B-3
 1338   DEGCON2  2DEC   2.222222222 B-2
 1339  2NEG.2    OCT    -06250          = .197753906  I.E. THE BIAS SCALED
 1341   ARTHINSF TC     DMP             SCALES MPAC, +1 BY SFTEMP1, SFTEMP2.
 1342            ADRES  SFTEMP1         ASSUMES POINT BETWEEN HI AND LO PARTS
 1343            XCH    MPAC    +2      OF SFCON. SHIFTS RESULTS LEFT BY 14.
 1344            XCH    MPAC    +1      (BY TAKING RESULTS FROM MPAC+1, MPAC+2)
 1345            XCH    MPAC
 1346            EXTEND
 1347            BZF    BINROUND
 1348            TC     DSPALARM        TOO LARGE A LOAD
 1349   BINROUND TC     2ROUND
 1350            TC     TESTOFUF
 1351  4         TC     ENDSCALE        RETURNS IF NO OF/UF
 1352   OPTDEGIN CCS    MPAC            OPTICS SCALING ROUTINE
 1353            TC     +4
 1354            TC     +3
 1355            TC     DSPALARM        REJECT NEGATIVE INPUT
 1356            TC     DSPALARM               DITTO
 1357   OPDEGIN2 CAF    NEG.2           RANGE IS 90 DEG
 1358            ADS    MPAC            SUBTRACT BIAS
 1359            TC     DMP             MULT BY 100 / 45  B-2
 1360            ADRES  DEGCON2
 1361            CAF    BIT12           ROUND AS IN DEGINSF
 1362            AD     MPAC    +1
 1363            TC     2ROUND  +2
 1364  2         TC     DEGINSF2
 1365   DPINSF   TC     DMP             SCALES MPAC, MPAC +1 BY SFTEMP1,
 1366            ADRES  SFTEMP1         SFTEMP2.  STORES LOW PART OF RESULT
 1367            XCH    MPAC    +2      IN (E SUBK) +1 OR E+1
 1368            DOUBLE
 1369            TS     MPAC    +2
 1370            CAF    ZERO
 1371            AD     MPAC    +1
 1372            TC     2ROUND  +2
 1373            TC     TESTOFUF
 1374            INDEX  MIXBR           RETURNS IF NO OF/UF
 1375            TC     +0
 1376            TC     DPINORM
 1377            CA     DECOUNT         MIXEDNOUN
 1378   DPINCOM  AD     NOUNADD             MIXED               NORMAL
 1379            TS     Q                 E SUBK            E
 1380            XCH    MPAC    +1
 1381            INDEX  Q
 1382            TS     1               PLACE LOW PART IN
 1383            TC     ENDSCALE        (E SUBK) +1    MIXED
 1384   DPINORM  CAF    ZERO            E +1         NORMAL
 1385  4         TC     DPINCOM
 1386   DPINSF2  TC     DMP             ASSUMES POINT BETWEEN BITS 7-8 OF HIGH
 1387            ADRES  SFTEMP1         PART OF SF CONST. DPINSF2 SHIFTS RESULTS
 1388            TC     TPLEFT7         LEFT BY 7, ROUNDS MPAC+2 INTO MPAC+1.
 1389  4         TC     DPINSF  +2
 1390   TPLEFT7  XCH    Q               OPERATES ON MPAC, MPAC+1, MPAC+2
 1391            TS     SFTEMP2         CANT USE L FOR RETURN. TPSL1 USES L.
 1392            CAF    SIX             LEFT BY 7
 1393   LEFT7COM TS     SFTEMP1
 1394            TC     TPSL1
 1395            CCS    SFTEMP1
 1396            TC     LEFT7COM
 1397  4         TC     SFTEMP2
 1398   2ROUND   XCH    MPAC    +1
 1399            DOUBLE
 1400            TS     MPAC    +1
 1401            TC     Q               IF MPAC+1 DOES NOT OF/UF
 1402            AD     MPAC
 1403            TS     MPAC
 1404            TC     Q               IF MPAC DOES NOT OF/UF
 1405            TS     OVFIND
 1406  42RNDEND  TC     Q
 1407   TESTOFUF CCS    OVFIND          RETURNS IF NO OF/UF
 1408            TC     DSPALARM        OF
 1409            TC     Q
 1410            TC     DSPALARM        UF
P1411   MONITOR ALLOWS OTHER KEYBOARD ACTIVITY. IT IS ENDED BY VERB TERMINATE,
R1412  2ANY NVSUB CALL THAT PASSES THE DSPLOCK, OR ANOTHER MONITOR.
R1413   MONITOR ACTION IS SUSPENDED, BUT NOT ENDED, BY ANY KEYBOARD ACTION,
R1414   EXCEPT ERROR LIGHT RESET. IT BEGINS AGAIN WHEN KEY RELEASE IS PERFORMED.
R1415   MONITOR SAVES THE NOUN AND APPROPRIATE DISPLAY VERB IN MONSAVE. IT SAVES
R1416   NOUNCADR IN MONSAVE1, IF NOUN = MACHINE CADR TO BE SPECIFIED. BIT 15 OF
R1417  2MONSAVE1 IS THE KILL MONITOR SIGNAL (KILLER BIT).
R1418   MONSAVE INDICATES IF MONITOR IS ON(+=ON, +0=OFF)
R1419   IF MONSAVE IS +, MONITOR ENTERS NO REQUEST, BUT TURNS KILLER BIT OFF.
R1420  2IF MONSAVE IS +0, MONITOR ENTERS REQUEST AND TURNS KILLER BIT OFF.
R1421  2NVSUB AND VB=TERMINATE TURN KILL MONITOR BIT ON.
R1422   IF KILLER BIT IS ON, MONREQ ENTERS NO FURTHER REQUESTS, ZEROS MONSAVE
R1423  4AND MONSAVE1 (TURNING OFF KILLER BIT).
R1424   MONITOR DOSENT TEST FOR MATBS SINCE NVSUB CAN HANDLE INTERNAL MATBS NOW
 1425  2         SETLOC ENDRUTIN
 1426   MONITOR  CS     BIT15
 1427            MASK   NOUNCADR
 1428   MONIT1   TS     MPAC    +1      TEMP STORAGE
 1429            CAF    LOW6
 1430            MASK   VERBREG
 1431            TC     LEFT5
 1432            TS     CYL
 1433            XCH    CYL
 1434            AD     NOUNREG
 1435            TS     MPAC            TEMP STORAGE
 1436            CS     GRABLOCK        NEITHER CASE SEARCHES LIST.
 1437            AD     TWO
 1438            CCS    A
 1439            TC     RELDSP1         GRABLOCK=0,1. +0 INTO DSPLOCK AND
 1440            TC     +4              TURN OFF KEY RLSE LIGHT.
 1441            LOC    +1
 1442            CAF    ZERO            GRABLOCK=2. +0 INTO DSPLOCK AND
 1443            TS     DSPLOCK         LEAVE KEY RLSE LIGHT ALONE
 1444            INHINT
 1445            CCS    MONSAVE
 1446            TC     +5              IF MONSAVE WAS +, NO REQUEST
 1447            CAF    ONE             IF MONSAVE WAS 0, REQUEST MONREQ
 1448            TC     WAITLIST
 1449            EBANK= DSPCOUNT
 1450            2CADR  MONREQ
 1451            DXCH   MPAC            PLACE MONITOR VERB AND NOUN INTO MONSAVE
 1452            DXCH   MONSAVE         ZERO THE KILL MONITOR BIT
 1453            RELINT
 1454  4         TC     ENTRET
 1455   MONREQ   TC     LODSAMPT        CALLED BY WAITLIST
 1456            CCS    MONSAVE1        TIME IS SNATCHED IN RUPT FOR NOUN 65
 1457            TC     +4              IF KILLER BIT = 0, ENTER REQUESTS
 1458            TC     +3              IF KILLER BIT = 0, ENTER REQUESTS
 1459            TC     KILLMON         IF KILLER BIT = 1, NO REQUESTS
 1460            TC     KILLMON         IF KILLER BIT = 1, NO REQUESTS
 1461            CAF    MONDEL
 1462            TC     WAITLIST        ENTER WAITLIST REQUEST FOR MONREQ
 1463            EBANK= DSPCOUNT
 1464            2CADR  MONREQ
 1465            CAF    CHRPRIO
 1466            TC     NOVAC           ENTER EXEC REQUEST FOR MONDO
 1467            EBANK= DSPCOUNT
 1468            2CADR  MONDO
 1469  2         TC     TASKOVER
 1470   KILLMON  CAF    ZERO            ZERO MONSAVE AND TURN KILLER BIT OFF
 1471            TS     MONSAVE
 1472            TS     MONSAVE1        TURN OFF KILL MONITOR BIT.
 1473  4         TC     TASKOVER
 1474  4MONDEL   OCT    144             FOR 1 SEC MONITOR INTERVALS
 1475   MONDO    CCS    MONSAVE1        CALLED BY EXEC
 1476            TC     +4              IF KILLER BIT = 0, CONTINUE
 1477            TC     +3              IF KILLER BIT = 0, CONTINUE
 1478            TC     ENDOFJOB        IN CASE TERMINATE CAME SINCE LAST MONREQ
 1479            TC     ENDOFJOB        IN CASE TERMINATE CAME SINCE LAST MONREQ
 1480            CCS    DSPLOCK
 1481            TC     MONBUSY         NVSUB IS BUSY
 1482            CAF    LOW6            NVSUB IS AVAILABLE
 1483            MASK   MONSAVE
 1484            TS     NVTEMP
 1485            TC     NVSUBMON        PLACE NOUN INTO NOUNREG AND DISPLAY IT
 1486            TC     ENDOFJOB        IN CASE OF ALARM DURING DISPLAY
 1487            CAF    MONMASK
 1488            MASK   MONSAVE         CHANGE MONITOR VERB TO DISPLAY VERB
 1489            TC     RIGHT5
 1490            TS     CYR
 1491            XCH    CYR
 1492            TS     VERBREG
 1493            CAF    MONBACK         SET RETURN TO PASTEVB AFTER DATA DISPLAY
 1494            TS     ENTRET
 1495            CS     BIT15
 1496            MASK   MONSAVE1        PUT ECADR INTO MPAC +2. INTMCTBS WILL
 1497            TS     MPAC    +2      DISPLAY IT AND SET NOUNCADR, NOUNADD,
 1498  2ENDMONDO TC     TESTNN          EBANK.
 1499  2         SETLOC ENDT4FF
 1500   PASTEVB  CAF    MIDSIX
 1501            MASK   MONSAVE
 1502            TS     NVTEMP          PLACE MONITOR VERB INTO VERBREG AND
 1503            TC     NVSUBMON             DISPLAY IT.
 1504            TC     +1              IN CASE OF ALARM DURING DISPLAY
 1505  2ENDPASTE TC     ENDOFJOB
 1506  4MIDSIX   OCTAL  07700
 1507            SETLOC ENDMONDO +1
 1508   MONMASK  OCT    700
 1509  2MONBACK  ADRES  PASTEVB
 1510   MONBUSY  TC     RELDSPON        TURN KEY RELEASE LIGHT
 1511  4         TC     ENDOFJOB
R1512   DSPFMEM IS USED TO DISPLAY (IN OCTAL) ANY FIXED REGISTER.
R1513   IT IS USED WITH NOUN = MACHINE CADR TO BE SPECIFIED. THE FCADR OF THE
R1514  2DESIRED LOCATION IS THEN PUNCHED IN. IT HANDLES F/F ( FCADR 4000-7777)
 1515   DSPFMEM  CAF    R1D1            IF F/F, DATACALL USES BANK 02 OR 03.
 1516            TS     DSPCOUNT
 1517            CA     NOUNCADR        ORIGINAL FCADR LOADED STILL IN NOUNCADR.
 1518            TC     DATACALL
 1519            TC     DSPOCTWD
 1520            TC     ENDOFJOB
P1521    DSPDECWD CONVERTS C(MPAC) AND C(MPAC +1)TO A SIGN AND 5 CHAR DECIMAL
R1522  2STARTING IN LOC SPECIFIED IN DSPCOUNT
 1523  2         SETLOC TESTOFUF +4
 1524   DSPDECWD XCH    Q               USES SHORTMP THROUGHOUT
 1525            TS     WDRET           CANT USE L FOR RETURN.+ON USES L.
 1526            CCS    MPAC
 1527            TC     +7
 1528            TC     +6
 1529            AD     ONE
 1530            TS     MPAC
 1531            TC     -ON
 1532            CS     MPAC  +1
 1533            TC     +3
 1534            TC     +ON
 1535            XCH    MPAC    +1
 1536            AD     DECROUND
 1537            TS     MPAC    +1
 1538            CAF    ZERO
 1539            AD     MPAC
 1540            TS     MPAC
 1541            TC     +4
 1542            CAF    POSMAX
 1543            TS     MPAC
 1544            TS     MPAC    +1
 1545            CAF    FOUR
 1546   DSPDCWD1 TS     WDCNT
 1547            CAF    BINCON
 1548            TC     SHORTMP
 1549   TRACE1   INDEX  MPAC
 1550            CAF    RELTAB
 1551            MASK   LOW5
 1552            TS     CODE
 1553            CAF    ZERO
 1554            XCH    MPAC    +2
 1555            XCH    MPAC    +1
 1556            TS     MPAC
 1557            XCH    DSPCOUNT
 1558   TRACE1S  TS     COUNT
 1559            CCS    A               DECREMENT DSPCOUNT EXCEPT AT +0
 1560            TS     DSPCOUNT
 1561            TC     DSPIN
 1562            CCS    WDCNT
 1563            TC     DSPDCWD1
 1564            CS     VD1
 1565            TS     DSPCOUNT
 1566  2         TC     WDRET
 1567  2DECROUND OCT    02476
R1568   DSP2DEC CONVERTS C(MPAC) AND C(MPAC+1) INTO A SIGN AND 10 CHAR DECIMAL
R1569  2STARTING IN THE LOC SPECIFIED IN DSPCOUNT.
 1570   DSP2DEC  XCH    Q
 1571            TS     WDRET           MUST USE SAME RETURN AS DSPDECWD
 1572            CAF    ZERO
 1573            TS     CODE
 1574            CAF    THREE
 1575            TC     11DSPIN         -R2 OFF
 1576            CAF    FOUR
 1577            TC     11DSPIN         +R2 OFF
 1578            CCS    MPAC
 1579            TC     +8D
 1580            TC     +7
 1581            AD     ONE
 1582            TS     MPAC
 1583            TC     -ON
 1584            CS     MPAC  +1
 1585            TS     MPAC  +1
 1586            TC     +2
 1587            TC     +ON
 1588            CAF    R2D1
 1589  4END2DEC  TC     DSPDCWD1
 1590            SETLOC DSPFMEM +6
R1591   DSPOCTWD DISPLAYS C(A) UPON ENTRY AS A 5 CHAR OCT STARTING IN THE DSP
R1592  2CHAR SPECIFIED IN DSPCOUNT. IT STOPS AFTER 5 CHAR HAVE BEEN DISPLAYED.
 1593   DSPOCTWD TS     CYL
 1594            XCH    Q
 1595            TS     WDRET           MUST USE SAME RETURN AS DSP2BIT.
 1596            CAF    BIT14           TO BLANK SIGNS
 1597            ADS    DSPCOUNT
 1598            CAF    FOUR
 1599   WDAGAIN  TS     WDCNT
 1600            CS     CYL
 1601            CS     CYL
 1602            CS     CYL
 1603            CS     A
 1604            MASK   DSPMSK
 1605            INDEX  A
 1606            CAF    RELTAB
 1607            MASK   LOW5
 1608            TS     CODE
 1609            XCH    DSPCOUNT
 1610            TS     COUNT
 1611            CCS    A               DECREMENT DSPCOUNT EXCEPT AT +0
 1612            TS     DSPCOUNT
 1613            TC     POSTJUMP
 1614            CADR   DSPOCTIN
 1615   OCTBACK  CCS    WDCNT
 1616            TC     WDAGAIN         +
 1617   DSPLV    CS     VD1             TO BLOCK NUMERICAL CHARACTERS, CLEARS,
 1618            TS     DSPCOUNT        AND SIGNS AFTER A COMPLETED DISPLAY.
 1619  2         TC     WDRET
 1620  4DSPMSK   =      SEVEN
R1622   DSP2BIT DISPLAYS C(A) UPON ENTRY AS A 2 CHAR OCT BEGINNING IN THE DSP
R1623   LOC SPECIFIED IN DSPCOUNT BY PRE CYCLING RIGHT C(A) AND USING THE LOGIC
R1624  2OF THE 5 CHAR OCTAL DISPLAY
 1625   DSP2BIT  TS     CYR
 1626            XCH    Q
 1627            TS     WDRET           CANT USE L AS RETURN. UPDATNN USES L.
 1628            CAF    ONE
 1629            TS     WDCNT
 1630            CS     CYR
 1631            CS     CYR
 1632            XCH    CYR
 1633            TS     CYL
 1634  4         TC     WDAGAIN +5
R1635   FOR DSPIN PLACE 0/25 OCT INTO COUNT, 5 BIT RELAY CODE INTO CODE. BOTH
R1636   ARE DESTROYED. IF BIT14 OF COUNT IS 1, SIGN IS BLANKED WITH LEFT CHAR.
R1637   FOR DSPIN1 PLACE 0,1 INTO BIT11 OF CODE, 2 INTO COUNT, REL ADDRESS OF
R1638  2DSPTAB ENTRY INTO DSREL.
 1639  2         SETLOC END2DEC  +1
 1640   DSPIN    XCH    Q               CANT USE L FOR RETURN, SINCE MANY OF THE
 1641            TS     DSEXIT          ROUTINES CALLING DSPIN USE L AS RETURN.
 1642            CAF    LOW5
 1643            MASK   COUNT
 1644            TS     SR
 1645            XCH    SR
 1646            TS     DSREL
 1647            CAF    BIT1
 1648            MASK   COUNT
 1649            CCS    A
 1650            TC     +2              LEFT IF COUNT IS ODD
 1651            TC     DSPIN1  -1      RIGHT IF COUNT IS EVEN
 1652            XCH    CODE
 1653            TC     SLEFT5          DOES NOT USE CYL
 1654            TS     CODE
 1655            CAF    BIT14
 1656            MASK   COUNT
 1657            CCS    A
 1658            CAF    TWO             BIT14 = 1, BLANK SIGN
 1659            AD     ONE             BIT14 = 0, LEAVE SIGN ALONE
 1660            TS     COUNT           +0 INTO COUNT FOR RIGHT
A1661                                   +1 INTO COUNT FOR LEFT(SIGN LEFT ALONE)
A1662                                   +3 INTO COUNT FOR LEFT(TO BLANK SIGN)
 1663   DSPIN1   INHINT
 1664            INDEX  DSREL
 1665            CCS    DSPTAB
 1666            TC     +2              IF +
 1667            LOC    +1
 1668            AD     ONE             IF-
 1669            TS     DSMAG
 1670            INDEX  COUNT
 1671            MASK   DSMSK
 1672            EXTEND
 1673            SU     CODE
 1674            EXTEND
 1675            BZF    DSLV            SAME
 1676   DFRNT    INDEX  COUNT
 1677            CS     DSMSK           MASK WITH 77740,76037, OR 75777
 1678            MASK   DSMAG
 1679            AD     CODE
 1680            CS     A
 1681            INDEX  DSREL
 1682            XCH    DSPTAB
 1683            EXTEND
 1684            BZMF   DSLV            DSPTAB ENTRY WAS -
 1685            INCR   NOUT            DSPTAB ENTRY WAS +
 1686   DSLV     RELINT
 1687  2         TC     DSEXIT
 1688   DSMSK    OCT    37
 1689            OCT    1740
 1690            OCT    2000
 1691  4         OCT    3740
R1692   FOR 11DSPIN, PUT REL ADDRESSS OF DSPTAB ENTRY INTO A, 1 IN BIT11 OR 0 IN
R1693  2BIT11 OF CODE.
 1694   11DSPIN  TS     DSREL
 1695            CAF    TWO
 1696            TS     COUNT
 1697            XCH    Q               MUST USE SAME RETURN AS DSPIN
 1698            TS     DSEXIT
 1699  4         TC     DSPIN1
 1700   DSPOCTIN TC     DSPIN           SO DSPOCTWD DOESNT USE SWCALL
 1701            CAF    +2
 1702            TC     BANKJUMP
 1703  4ENDSPOCT CADR   OCTBACK
R1704   DSPALARM FINDS TC NVSUBEND IN ENTRET FOR NVSUB INITIATED ROUTINES.
R1705   ABORT WITH 01501.
R1706   DSPALARM FINDS TC ENDOFJOB IN ENTRET FOR KEYBOARD INITIATED ROUTINES.
R1707  2DO TC ENTRET.
 1708   CHARALRM CAF    ENDINST         ALARMS WHICH MUST DO ENDOFJOBS COME
 1709  2         TS     ENTRET          HERE. ALLOWS ENTRET TO BE TEMP ERASABLE
 1710   DSPALARM TC     FALTON          TURN ON OPERATOR ERROR LIGHT
 1711            CS     NVSBENDL
 1712            AD     ENTEXIT
 1713            EXTEND
 17131           BZF    +2              NVSUB INITIATED. ABORT
 17132           TC     ENTEXIT         NOT NVSUB INITIATED.
 17133           TC     ABORT
 17134           OCT    01501
 17135 4NVSBENDL TC     NVSUBEND
R1714   MMCHANG USES NOUN DISPLAY UNTIL ENTER. THEN IT USES MODE DISP.
R1715   IT GOES TO MODROUT WITH THE NEW M M CODE IN A, BUT NOT DISPLAYED IN
R1716  2M M LIGHTS.
 1717  2         SETLOC DSP2BIT  +10D
 1718   MMCHANG  TC     REQMM
 1719            CAF    ZERO
 1720            XCH    NOUNREG
 1721            TS     MPAC
 1722            CAF    ND1
 17221           TS     DSPCOUNT
 1723            TC     BANKCALL
 1724            CADR   2BLANK
 1725            CA     MPAC
 1726            TC     POSTJUMP
 1727  4         CADR   MODROUTB        GO THRU STANDARD LOC.
 1728   MODROUTB =      DSPALARM        **FIX LATER**
 1729   REQMM    CS     Q
 1730            TS     REQRET
 1731            CAF    ND1
 1732            TS     DSPCOUNT
 1733            CAF    ZERO
 1734            TS     NOUNREG
 1735            TC     BANKCALL
 1736            CADR   2BLANK
 1737            TC     FLASHON
 1738  4         TC     ENTEXIT
R1741   VBRQEXEC ENTERS REQUEST TO EXEC     FOR ANY ADDRESS WITH ANY PRIORITY.
R1742   IT DOES ENDOFJOB AFTER ENTERING REQUEST. DISPLAY SYST IS RELEASED.
R1743   IT ASSUMES NOUN 26 HAS BEEN PRELOADED WITH
R1744   COMPONENT 1  PRIORITY(BITS 10-14) BIT1=0 FOR NOVAC, BIT1=1 FOR FINDVAC.
R1745   COMPONENT 2  JOB ADRES (12 BIT )
R1746  2COMPONENT 3  BBCON
 1747   VBRQEXEC CAF    BIT1
 1748            MASK   DSPTEM1
 1749            CCS    A
 1750            TC     SETVAC          IF BIT1 = 1, FINDVAC
 1751            CAF    TCNOVAC         IF BIT1 = 0, NOVAC
 1752   REQEX1   TS     MPAC            TC NOVAC  OR  TC FINDVAC INTO MPAC
 1753            CS     BIT1
 1754            MASK   DSPTEM1
 1755            TS     MPAC    +4      PRIO INTO MPAC+4 AS A TEMP
 1756   REQUESTC TC     RELDSP
 1757            CA     ENDINST
 1758            TS     MPAC    +3      TC ENDOFJOB INTO MPAC+3
 1759            EXTEND
 1760            DCA    DSPTEM1 +1      JOB ADRES INTO MPAC+1
 1761            DXCH   MPAC    +1      BBCON INTO MPAC+2
 1762            CA     MPAC    +4      PRIO IN A
 1763            INHINT
 1764  2         TC     MPAC
 1765   SETVAC   CAF    TCFINDVC
 1766  2         TC     REQEX1
R1767   VBRQWAIT ENTERS REQUEST TO WAITLIST FOR ANY ADDRESS WITH ANY DELAY.
R1768   IT DOES ENDOFJOB AFTER ENTERING REQUEST.DISPLAY SYST IS RELEASED.
R1769   IT ASSUMES NOUN 26 HAS BEEN PRELOADED WITH
R1770   COMPONENT 1  DELAY (LOW BITS)
R1771   COMPONENT 2  TASK ADRES (12 BIT)
R1772  2COMPONENT 3  BBCON
 1773   VBRQWAIT CAF    TCWAIT
 1774            TS     MPAC            TC WAITLIST INTO MPAC
 1775            CA     DSPTEM1         TIME DELAY
 1776  2ENDRQWT  TC     REQUESTC -1
R1777   REQUESTC WILL PUT TASK ADRES INTO MPAC+1, BBCON INTO MPAC+2,
R1778   TC ENDOFJOB INTO MPAC+3. IT WILL TAKE TIME DELAY OUT OF MPAC+4 AND
R1779  4LEAVE IT IN A, INHINT AND TC MPAC.
 17791           SETLOC NVSBENDL +1
 1780   VBPROC   CAF    ONE             PROCEED WITHOUT DATA
 1781            TS     LOADSTAT
 1782            TC     RELDSP
 1783            TC     FLASHOFF
 1784  4         TC     RECALTST        SEE IF THERE IS ANY RECALL FROM ENDIDLE
 1785   VBTERM   TC     KILMONON        TURN ON KILL MONITOR BIT
 1786            CS     ONE
 1787  4         TC     VBPROC  +1      TERM VERB SETS LOADSTAT NEG
R1788  4FLASH IS TURNED OFF ONLY BY PROCEED WITHOUT DATA, TERMINATE, END OF LOAD
R1789   VBRELDSP TURNS OFF RELEASE DISPLAY SYSTEM LIGHT(AND SEARCHES LIST ONLY
R1790  2IF THIS LIGHT WAS TURNED ON BY NVSUBUSY), AND TURNS OFF UPACT LIGHT.
 1791   VBRELDSP CS     BIT3
 1792            EXTEND
 1793            WAND   DSALMOUT        TURN OFF UPACT LIGHT
 1794            TC     RELDSP          SEARCHES LIST
 1795  4         TC     ENDOFJOB
R1796  2BUMP SHIFTS WORD DISPLAYED IN R2 TO R3, R1 TO R2. IT BLANKS R1.
 1797   BUMP     CAF    FIVE            R2D5
 1798            TS     DSPCOUNT
 1799            TS     COUNT
 1800            CAF    ONE             SHIFT DATA OF R2 TO R3, R1 TO R2
 1801            MASK   COUNT
 1802            XCH    COUNT           +0 INTO COUNT IF EVEN (RIGHT)
 1803            TS     SR              +1 INTO COUNT IF ODD (LEFT)
 1804            XCH    SR              DSREL IN A
 1805            INDEX  A
 1806            CCS    DSPTAB
 1807            TC     +2
 1808            LOC    +1
 1809            AD     ONE             DSMAG IN A
 1810            INDEX  COUNT
 1811            MASK   DSMSK
 1812            INDEX  COUNT
 1813            TC     +1
 1814            TC     +2              EVEN(RIGHT)  OK
 1815            TC     RIGHT5          ODD(LEFT)  SHIFT RIGHT
 1816            TS     CODE
 1817            CS     FIVE
 1818            AD     DSPCOUNT        DSPCOUNT-5
 1819            CCS    A               TO PREVENT -0
 1820            AD     ONE
 1821            TC     +2
 1822            LOC    +1
 1823            TS     COUNT
 1824            TC     DSPIN           CODE ALREADY IN CODE
 1825            CS     DSPCOUNT
 1826            AD     R1D1            OCT 16
 1827            CCS    A
 1828            XCH    DSPCOUNT        +, DSPCOUNT L/ OCT 16
 1829            AD     ONE             INCREMENT DSPCOUNT
 1830  2         TC     BUMP    +1
 1831   SWSGN    CAF    ZERO            -0, DSPCOUNT= OCT 16. DO SIGN SHIFT
 1832            TS     DSPCOUNT
 1833            AD     SWTAB   +2      OCT 3
 1834            INDEX  A               PICKUP ORDER , DSREL=3,4,5,6.
 1835            CCS    DSPTAB                           (-R2,+R2,-R1,+R1)
 1836            TC     +2
 1837            LOC    +1
 1838            AD     ONE
 1839            MASK   BIT11
 1840            TS     CODE
 1841            INDEX  DSPCOUNT
 1842            CAF    SWTAB           PUT AWAY ORDER, DSREL= 0,1,3,4.
 1843            TC     11DSPIN                          (-R3,+R3,-R2,+R2.)
 1844            CS     DSPCOUNT
 1845            AD     SWTAB   +2      OCT 3
 1846            CCS    A
 1847            XCH    DSPCOUNT        +, DSPCOUNT L/ 3
 1848            AD     ONE             INCREMENT DSPCOUNT
 1849            TC     SWSGN   +1
 1850            CAF    R1D1            -0,       DSPCOUNT = 3
 1851            TS     DSPCOUNT
 1852            TC     5BLANK          BLANKS R1
 1853  2         TC     ENTEXIT
 1854   SWTAB    OCT    0               -R3
 1855            OCT    1               +R3
 1856            OCT    3               -R2
 1857            OCT    4               +R2
P1858   NVSUB IS USED FOR SUB ROUTINE CALLS FROM WITHIN COMPUTER. IT CAN BE
R1859   USED TO DO ANY THING THE KEYBOARD CAN CALL. PLACE  ...VVVVVVNNNNNN
R1860  2INTO A.      V-S ARE 6 BIT VERB CODE. N-S , 6 BIT NOUN CODE.
R1861   NVSUB CAN BE USED WITH MACH CADR TO BE SPEC BY PLACING THE CADR INTO
R1862  2MPAC+2 BEFORE THE STANDARD NVSUB CALL.
R1863    NVSUB RETURNS TO 2+ CALLING LOC AFTER PERFORMING TASK, IF DISPLAY
R1864   SYSTEM IS AVAILABLE. THE NEW NOUN AND VERB CODES ARE DISPLAYED.
R1865   IF V:S =0, THE NEW NOUN CODE IS DISPLAYED ONLY(RETURN WITH NO FURTHER
R1866   ACTION). IF N-S =0, THE NEW VERB CODE IS DISPLAYED ONLY(RETURN WITH NO
R1867  2FURTHER ACTION).
R1868   IT RETURNS TO 1+ CALLING LOC WITHOUT PERFORMING TASK, IF DISPLAY
R1869   SYSTEM IS BLOCKED (NOTHING IS DISPLAYED IN THIS CASE).
R1870   IT DOES TC ABORT (WITH OCT 01501) IF IT ENCOUNTERS A DISPLAY PROGRAM
R18701 2ALARM CONDITION BEFORE RETURN TO CALLER.
R1871   THE DISPLAY SYSTEM IS BLOCKED BY THE DEPRESSION OF ANY
R1872   KEY, EXCEPT ERROR LIGHT RESET. ALSO BY ENDIDLE.
R1873        IT IS RELEASED BY SPECIAL VERB = RELEASE DISPLAY, ALL GO TO VERBS,
R1874   PROCEED WITHOUT DATA, TERMINATE, INITIALIZE EXECUTIVE,
R1875   RECALL PART OF RECALTST IF ENDIDLE WAS USED,
R1876   IN RECALTST IF NVSUB INITIATED LOAD AND ENDIDLE WAS NOT USED,
R1877   VB = REQUEST EXECUTIVE, VB = REQUEST WAITLIST,
R1878  2MONITOR SET UP.
R1879  2A NVSUB CALL THAT PASSES DSPLOCK ENDS OLD MONITOR.
R1880   DSPLOCK IS THE INTERLOCK FOR USE OF KEYBOARD AND DISPLAY SYSTEM WHICH
R1881  2LOCKS OUT INTERNAL USE WHENEVER THERE IS EXTERNAL KEYBOARD ACTION.
R1882   NVSUB IN FIXED-FIXED PLACES 2+CALLING LOC INTO NVQTEM, TC NVSUBEND INTO
R1883  2ENTRET. (THIS WILL RESTORE OLD CALLING BANK BITS)
 1884            SETLOC MIDSIX  +1
 1885   NVSUB    TS     NVTEMP          IN FIXED FIXED
 1886            CCS    DSPLOCK
 1887            TC     Q               DSP SYST BLOCKED. RET TO 1+ CALLING LOC
 1888            CA     Q               DSP SYST AVAILABLE
 1889            AD     ONE
 18891           TS     NVQTEM          2 + CALLING LOC INTO NVQTEM
 1890            TC     KILMONON        TURN ON KILL MONITOR BIT
 1891  2NVSUBCOM CAF    NVSBBBNK
 1892            XCH    BBANK
 1893            TS     NVBNKTEM
 1894            TC     NVSUBB          GO TO NVSUB1 THRU STANDARD LOC
 1895            EBANK= DSPCOUNT
 1896  2NVSBBBNK BBCON  NVSUB1
 1897   NVSUBMON CA     Q               MONDO COMES HERE
 1898            AD     ONE
 18981           TS     NVQTEM          2 + CALLING LOC INTO NVQTEM
 1899  4         TC     NVSUBCOM
 1900   NVSUBEND DXCH   NVQTEM          NVBNKTEM MUST = NVQTEM+1
 1901  2         DXCH   Z               DTCB
 1902  2         SETLOC ENDRQWT +1
 1903   NVSUB1   CAF    ENTSET          IN BANK
 1904            TS     ENTRET          SET RETURN TO NVSUBEND
 1905            CAF    LOW6
 1906            MASK   NVTEMP
 1907            TS     MPAC            TEMP STORAGE
 1908            CAF    MID6
 1909            MASK   NVTEMP
 1910            TC     RIGHT5
 1911            TS     CYR
 1912            XCH    CYR
 1913            TS     MPAC    +1      TEMP STORAGE
 1914            CCS    MPAC            TEST NOUN
 1915            TC     +4              IF NOUN NOT +0, GO ON
 1916            XCH    MPAC    +1
 1917            TC     UPDATVB -1      IF NOUN = +0, DISPLAY VERB . THEN RETURN
 1918   ENTSET   TC     NVSUBEND
 1919            CCS    MPAC    +1      TEST VERB
 1920            TC     +4              IF VERB NOT +0, GO ON
 1921            XCH    MPAC
 1922            TC     UPDATNN -1      IF VERB = +0, DISPLAY NOUN. THEN RETURN
 1923            TC     NVSUBEND
 1924            XCH    MPAC    +1
 1925            TC     UPDATVB -1      IF BOTH NOUN AND VERB NOT +0, DISPLAY
 1926            XCH    MPAC            BOTH AND GO TO ENTPAS0
 1927            TC     UPDATNN -1
 1928            CAF    ZERO
 1929            TS     LOADSTAT        SET FOR WAITING FOR DATA CONDITION
 1930            TS     CLPASS
 1931  2         TC     ENTPAS0
R1932   IF INTERNAL MACH CADR TO BE SPECIFIED, MPAC+2 WILL BE PLACED INTO
R1933  4NOUNCADR IN ENTPAS0 (INTMCTBS ).
 1934   LOW6     OCT    77
 1935  2MID6     OCT    7700
 1936            SETLOC NVSUBEND +2
 1937   KILMONON CS     BIT15           FORCE BIT 15 OF MONSAVE1 TO 1.
 1938            INHINT                         THIS IS THE KILL MONITOR BIT.
 1939            MASK   MONSAVE1
 1940            AD     BIT15
 1941            TS     MONSAVE1
 1942            RELINT
 1943  4         TC     Q
R1944   LOADSTAT  +0 INACTIVE(WAITING FOR DATA). SET BY NVSUB
R1945             +1  PROCEED NO DATA. SET BY SPECIAL VERB
R1946            -1 TERMINATE   SET BY SPECIAL VERB
R1947  4         -0 DATA IN   SET BY END OF LOAD ROUTINE
R1948   L  TC ENDIDLE  (FIXED FIXED)
R1949   ROUTINES THAT REQUEST LOADS THROUGH NVSUB SHOULD USE ENDIDLE WHILE
R1950   WAITING FOR THE DATA TO BE LOADED. ENDIDLE PUTS CURRENT JOB TO SLEEP.
R1951   ENDIDLE CANNOT BE CALLED FROM ERASABLE MEMORY, SINCE JOBSLEEP AND
R1952   JOBWAKE CAN HANDLE ONLY FIXED MEMORY.
R1953   RECALTST TESTS LOADSTAT AND WAKES JOB UP TO,
R1954   L+1      FOR TERMINATE
R1955   L+2      FOR PROCEED WITHOUT DATA
R1956   L+3      FOR DATA IN
R1957  2IT DOES NOTHING     IF LOADSTAT INDICATES WAITING FOR DATA.
 1958   ENDIDLE  CAF    ONE
 1959            TS     DSPLOCK
 1960            LXCH   FBANK
 1961            XCH    Q
 1962            DXCH   BUF2
 1963            TC     MAKECADR
 1964            TS     CADRSTOR
 1965  4         TC     JOBSLEEP
 1966  2ENDINST  TC     ENDOFJOB
R1967   DATAWAIT IS AN ALTERNATIVE TO ENDIDLE. IT RETURNS IMMEDIATELY IF
R1968   LOADSTAT INDICATES THAT DATA IS ALREADY IN, OR PROCEED OR TERMINATE HAS
R1969   BEEN EXECUTED. RETURN FORMAT IS SAME AS FOR ENDIDLE.
R1970   DATAWAIT CANNOT BE CALLED FROM ERASABLE MEMORY, SINCE JOBSLEEP
R1971   AND JOBWAKE CAN HANDLE ONLY FIXED MEMORY.
R1972  2DATAWAIT SHOULD BE USED ONLY AFTER REQUESTING A LOAD VERB.
 1973   DATAWAIT CCS    LOADSTAT
 1974            TCF    DATWAIT1        PROCEED. RETURN TO L+2.
 1975            TCF    ENDIDLE         STILL WAITING. GO TO SLEEP.
 1976            TC     Q               TERMINATE. RETURN TO L+1.
 1977            INDEX  Q               DATA IN. RETURN TO L+3.
 1978            TC     2
 1979   DATWAIT1 INDEX  Q               RETURN TO L+2.
 1980  2         TC     1
R1981   DATAWAIT DOES NOT RELEASE DISPLAY SYST. IT IS RELEASED AT END OF NVSUB
R1982  4INITIATED LOAD, IF ENDIDLE WAS NOT USED.
 1983            SETLOC MID6  +1
R1984  2DSPMM  PLACE MAJOR MODE CODE INTO MODREG
 1985   DSPMM1   CAF    MD1             GETS HERE THRU DSPMM (STANDARD LEAD IN)
 1986            XCH    DSPCOUNT
 19861           TS     DSPMMTEM        SAVE DSPCOUNT
 1987            CA     MODREG
 1988            LXCH   Q
 1989            TC     DSP2BIT
 19891           XCH    DSPMMTEM        RESTORE DSPCOUNT
 19892           TS     DSPCOUNT
 1990  4DSPMMEND TC     L
R1991   RECALTST IS ENTERED DIRECTLY AFTER DATA IS
R1992   LOADED, TERMINATE VERB IS EXECUTED, OR THE PROCEED WITHOUT DATA VERB IS
R1993  2EXECUTED. IT WAKES UP JOB THAT DID TC ENDIDLE.
R1994   IF NVSUB INITIATED LOAD, AND ENDIDLE WAS NOT USED, THEN IT RELEASES
R1995  2DISPLAY SYST. (NEEDED FOR DATAWAIT)
 1996  2         SETLOC SWTAB  +4
 1997   RECALTST CCS    CADRSTOR
 1998            TC     RECAL1
 1999            TC     ENDOFJOB        NORMAL EXIT IF KEYBOARD INITIATED
 2000            TC     RECAL1
 2001            TS     CADRSTOR        -0. CONCLUSION OF NVSUB INITIATED LOAD.
 2002            TC     RECAL3          +0 INTO CADRSTOR, RELEASE DISPLAY,
A2003                                      AND ENDOFJOB. NEEDED FOR DATAWAIT.
 2004   RECAL1   CAF    ZERO
 2005            XCH    CADRSTOR
 2006            INHINT
 2007            TC     JOBWAKE
 2008            CCS    LOADSTAT
 2009            TC     DOPROC          + PROCEED WITHOUT DATA
 2010            TC     ENDOFJOB        PATHALOGICAL CASE EXIT
 2011            TC     DOTERM          -   TERMINATE
 2012            CAF    TWO
 2013   RECAL2   INDEX  LOCCTR
 2014            AD     LOC             LOC IS + FOR BASIC JOBS
 2015            INDEX  LOCCTR
 2016            TS     LOC
 2017            RELINT
 2018   RECAL3   TC     RELDSP1         DOES NOT SEARCH LIST
 2019  2         TC     ENDOFJOB
 2020   DOTERM   CAF    ZERO
 2021  2         TC     RECAL2
 2022   DOPROC   CAF    ONE
 2023            TC     RECAL2
P2024  4THE FOLLOWING REFERS TO THE NOUN TABLES
R2025  2COMPONENT CODE NUMBER           INTERPRETATION
R2026   00000                           1 COMPONENT
R2027   00001                           2 COMPONENT (EACH S P)
R2028  400010                           3 COMPONENT (EACH SP)
R2029  2SF ROUTINE CODE NUMBER          INTERPRETATION
R2030   00000    OCTAL ONLY
R2031   00001    STRAIGHT FRACTIONAL
R2032   00010    DEGREES (XXX.XX)
R2033   00011    ARITHMETIC SF
R2034   00100    ARITH DP1   OUT(MULT BY 2/14 AT END)      IN(STRAIGHT)
R2035   00101    ARITH DP2   OUT(STRAIGHT)                 IN(SL 7 AT END)
R2036   00110    OPTICS DEGREES(XX.XXX MAX 89.999) OR (XXX.XX MAX 179.99)
R20361  00111    ARITH DP3   OUT ( SL 7 AT END)       IN ( STRAIGHT)
R20362 4END OF SF ROUTINE CODE NUMBERS
R2037  2SF CONSTANT CODE NUMBER         INTERPRETATION
R2038   00000                           WHOLE
R2039   00000                           TIME SEC(XXX.XX)SAME AS WHOLE(ARITH DP1)
R2040   00001                           TIME HOURS(XXX.XX) USE ARITH DP2
R2041   00010                           DEGREES
R20411  00010                           OPTICS DEGREES
R2042   00011                           GYRO DEGREES(XX.XXX) USE ARITH DP1
R2043   00100                           GYRO BIAS DRIFT .BBXXXXX MILLIRAD/SEC
R2044   00101                           GYRO AXIS ACCEL. DRIFT
R2045                                   .BBXXXXX (MILLIRAD/SEC) / (CM/SEC SEC)
R2046   00110                           PIPA BIAS X.XXXX CM/SEC SEC
R2047   00111                           PIPA SCALE FACTOR ERROR
R2048                                       XXXXX. PARTS/MILLION
R2049   01000                           POSITION(XXXX.X KILOMETERS) USE ARITHDP3
R2050   01001                           VELOCITY(XXXX.X METERS/SEC) USE ARITHDP2
R2051   01010                           TIME HOURS(XXX.XX)WEEKS INSIDE(ARITHDP2)
R20511  01011                           ELEVATION DEGREES(89.999MAX) USE ARITH
R20512 4END OF SF CONSTANT CODE NUMBERS
R2052   FOR GREATER THAN SINGLE PRECISION SCALES, PUT ADDRESS OF MAJOR PART INTO
R2053   NOUN TABLES.
R2054   OCTAL LOADS PLACE +0 INTO MAJOR PART, DATA INTO MINOR PART.
R2055   OCTAL DISPLAYS SHOW MINOR PART ONLY.
R2056   TO GET AT BOTH MAJOR AND MINOR PARTS (IN OCTAL), USE NOUN 01.
P2057   THE FOLLOWING ROUTINES ARE FOR READING THE NOUN TABLES AND THE SF TABLES
R2058   (WHICH ARE IN A SEPARATE BANK FROM THE REST OF PINBALL). THESE READING
R2059  4ROUTINES ARE IN THE SAME BANK AS THE TABLES. THEY ARE CALLED BY DXCH Z.
R2060   LODNNTAB LOADS NNADTEM WITH THE NNADTAB ENTRY, NNTYPTEM WITH THE
R2061   NNTYPTAB ENTRY. IF THE NOUN IS MIXED, IDAD1TEM IS LOADED WITH THE FIRST
R2062   IDADDTAB ENTRY, IDAD2TEM THE SECOND IDADDTAB ENTRY, IDAD3TEM THE THIRD
R2063   IDADDTAB ENTRY, RUTMXTEM WITH THE RUTMXTAB ENTRY. MIXBR IS SET FOR
R2064  2MIXED OR NORMAL NOUN.
 2065  2         SETLOC 24000
 2066   LODNNTAB DXCH   IDAD2TEM        SAVE RETURN INFO IN IDAD2TEM, IDAD3TEM.
 2067            INDEX  NOUNREG
 2068            CAF    NNADTAB
 2069            TS     NNADTEM
 2070            INDEX  NOUNREG
 2071            CAF    NNTYPTAB
 2072            TS     NNTYPTEM
 2073            CS     NOUNREG
 2074            AD     MIXCON
 2075            EXTEND
 2076            BZMF   LODMIXNN        NOUN NUMBER G/E FIRST MIXED NOUN
 2077            CAF    ONE             NOUN NUMBER L/ FIRST MIXED NOUN
 2078            TS     MIXBR           NORMAL.  +1 INTO MIXBR.
 2079            TC     LODNLV
 2080   LODMIXNN CAF    TWO             MIXED.  +2 INTO MIXBR.
 2081            TS     MIXBR
 2082            INDEX  NOUNREG
 2083            CAF    RUTMXTAB -55
 2084            TS     RUTMXTEM
 2085            CAF    LOW10
 2086            MASK   NNADTEM
 2087            TS     Q               TEMP
 2088            INDEX  A
 2089            CAF    IDADDTAB
 2090            TS     IDAD1TEM        LOAD IDAD1TEM WITH FIRST IDADDTAB ENTRY
 2091            EXTEND
 2092            INDEX  Q               LOAD IDAD2TEM WITH 2ND IDADDTAB ENTRY
 2093            DCA    IDADDTAB +1     LOAD IDAD3TEM WITH 3RD IDADDTAB ENTRY.
 2094   LODNLV   DXCH   IDAD2TEM        PUT RETURN INFO INTO A, L.
 2095  2         DXCH   Z
 2096  4MIXCON   OCT    55              FIRST MIXED NOUN = 55.
R2097  2GTSFOUT LOADS SFTEMP1, SFTEMP2 WITH THE DP SFOUTAB ENTRIES.
 2098   GTSFOUT  DXCH   SFTEMP1         2X(SFCONUM) ARRIVES IN SFTEMP1.
 2099            EXTEND
 2100            INDEX  A
 2101            DCA    SFOUTAB
 2102   SFCOM    DXCH   SFTEMP1
 2103  4         DXCH   Z
R2104  2GTSFIN LOADS SFTEMP1, SFTEMP2 WITH THE DP SFINTAB ENTRIES.
 2105   GTSFIN   DXCH   SFTEMP1         2X(SFCONUM) ARRIVES IN SFTEMP1.
 2106            EXTEND
 2107            INDEX  A
 2108            DCA    SFINTAB
 2109  4         TCF    SFCOM
A2110                                   NN  NORMAL NOUNS
 2111   NNADTAB  OCT    00000           00 NOT IN USE
 2112            OCT    40000           01 SPECIFY MACHINE ADDRESS (FRACTIONAL)
 2113            OCT    40000           02 SPECIFY MACHINE ADDRESS (WHOLE)
 2114            OCT    40000           03 SPECIFY MACHINE ADDRESS (DEGREES)
 2115            OCT    40000           04 SPECIFY MACHINE ADDRESS (HOURS)
 2116            OCT    40000           05 SPECIFY MACHINE ADDRESS (SECONDS)
 2117            OCT    40000           06 SPECIFY MACHINE ADDRESS (GYRO DEG)
 2118            OCT    40000           07 SPECIFY MACHINE ADDRESS (Y OPT DEG.)
 2119            OCT    77776           10 CHANNEL TO BE SPECIFIED
 2120            OCT    00000           11 SPARE
 2121            OCT    00000           12 SPARE
 2122            OCT    00000           13 SPARE
 2123            OCT    00000           14 SPARE
 2124            OCT    77777           15 INCREMENT MACHINE ADDRESS
 2125            ECADR  TIME2           16 TIME SECONDS
 2126            ECADR  TIME2           17 TIME HOURS
 2127            ECADR  CDUX            20 ICDU
 2128            ECADR  PIPAX           21 PIPAS
 2129            ECADR  THETAD          22 NEW ANGLES I
 2130            ECADR  DSPTEM2         23 DELTA ANGLES I
 2131            ECADR  DSPTEM1         24 DELTA TIME (SEC)
 2132            ECADR  DSPTEM1         25 CHECKLIST
 2133            ECADR  DSPTEM1         26 PRIO/DELAY, ADRES, BBCON
 2134            ECADR  SMODE           27 SELF TEST ON/OFF SWITCH
 2135            ECADR  DSPTEM1         30 STAR NUMBERS
 2136            ECADR  FAILREG         31 FAILREG
 2137            ECADR  TDEC            32 DECISION TIME (MIDCOURSE)
 2138            ECADR  TET             33 EPHEMERIS TIME (MIDCOURSE)
 2139            ECADR  MEASQ           34 MEASURED QUANTITY (MIDCOURSE)
 2140            ECADR  ROLL            35 ROLL, PITCH, YAW
 2141            ECADR  LANDMARK        36 LANDMARK DATA 1
 2142            ECADR  LANDMARK +3     37 LANDMARK DATA 2
 2143            OCT    00000           40 SPARE
 2144            OCT    00000           41 SPARE
 2145            OCT    00000           42 SPARE
 2146            OCT    00000           43 SPARE
 2147            OCT    00000           44 SPARE
 2148            OCT    00000           45 SPARE
 2149            OCT    00000           46 SPARE
 2150            OCT    00000           47 SPARE
 2151            OCT    00000           50 SPARE
 2152            OCT    00000           51 SPARE
 2153            ECADR  GBIASX          52 GYRO BIAS DRIFT
 2154            ECADR  ADIAX           53 GYRO INPUT AXIS ACCELERATION DRIFT
 2155  2         ECADR  ADSRAX          54 GYRO SPIN AXIS ACCELERATION DRIFT
A2156                                   NN  MIXED NOUNS
 2157            OCT    02000           55 OCDU
 2158            OCT    04002           56 UNCALLED MARK DATA (OCDU & TIME(SEC))
 2159            OCT    02005           57 NEW ANGLES OCDU
 2160            OCT    04007           60 IMU MODE STATUS
 2161            OCT    02012           61 TARGET AZIMUTH AND ELEVATION
 2162            OCT    02014           62 ICDUZ AND TIME(SEC)
 2163            OCT    02016           63 OCDUX AND TIME(SEC)
 2164            OCT    02020           64 OCDUY AND TIME(SEC)
 2165            OCT    02022           65 SAMPLED TIME (HOURS AND SECONDS)
A2166                                        (FETCHED IN INTERRUPT)
 2167            OCT    04024           66 SYSTEM TEST RESULTS
 2168            OCT    04027           67 DELTA GYRO ANGLES
 2169            OCT    04032           70 PIPA BIAS
 2170            OCT    04035           71 PIPA SCALE FACTOR ERROR
 2171            OCT    04040           72 DELTA POSITION
 2172            OCT    04043           73 DELTA VELOCITY
 2173            OCT    04046           74 MEASUREMENT DATA (MIDCOURSE)
 2174            OCT    04051           75 MEASUREMENT DEVIATIONS (MIDCOURSE)
 2175            OCT    04054           76 POSITION VECTOR
 2176  4         OCT    04057           77 VELOCITY VECTOR
A2177                                   NN        NORMAL NOUNS
 2178   NNTYPTAB OCT    00000           00 NOT IN USE
 2179            OCT    00040           01 1COMP  FRACTIONAL
 2180            OCT    00140           02 1COMP  WHOLE
 2181            OCT    00102           03 1COMP  DEGREES
 2182            OCT    00241           04 1COMP  HOURS
 2183            OCT    00200           05 1COMP  SECONDS
 2184            OCT    00203           06 1COMP  GYRO DEGREES
 2185            OCT    00302           07 1COMP  Y OPT DEGREES
 2186            OCT    00000           10 1COMP  OCTAL ONLY
 2187            OCT    00000           11        SPARE
 2188            OCT    00000           12        SPARE
 2189            OCT    00000           13        SPARE
 2190            OCT    00000           14        SPARE
 2191            OCT    00000           15 1COMP  OCTAL ONLY
 2192            OCT    00200           16 1COMP  SECONDS
 2193            OCT    00241           17 1COMP  HOURS
 2194            OCT    04102           20 3COMP  DEGREES
 2195            OCT    04140           21 3COMP  WHOLE
 2196            OCT    04102           22 3COMP  DEGREES
 2197            OCT    04102           23 3COMP  DEGREES
 2198            OCT    00200           24 1COMP  SECONDS
 2199            OCT    00140           25 1COMP  WHOLE
 2200            OCT    04000           26 3COMP  OCTAL ONLY
 2201            OCT    00140           27 1COMP  WHOLE
 2202            OCT    04140           30 3COMP  WHOLE
 2203            OCT    02000           31 2COMP  OCTAL ONLY
 2204            OCT    00252           32 1COMP  TIME WEEKS
 2205            OCT    00252           33 1COMP  TIME WEEKS
 2206            OCT    00350           34 1COMP  POSITION
 2207            OCT    04102           35 3COMP  DEGREES
 2208            OCT    04000           36 3COMP  OCTAL ONLY
 2209            OCT    04000           37 3COMP  OCTAL ONLY
 2210            OCT    00000           40        SPARE
 2211            OCT    00000           41        SPARE
 2212            OCT    00000           42        SPARE
 2213            OCT    00000           43        SPARE
 2214            OCT    00000           44        SPARE
 2215            OCT    00000           45        SPARE
 2216            OCT    00000           46        SPARE
 2217            OCT    00000           47        SPARE
 2218            OCT    00000           50        SPARE
 2219            OCT    00000           51        SPARE
 2220            OCT    04144           52 3COMP  GYRO BIAS DRIFT
 2221            OCT    04145           53 3COMP  GYRO AXIS ACCEL. DRIFT
 2222  2         OCT    04145           54 3COMP  GYRO AXIS ACCEL. DRIFT
A2223                                   NN        MIXED NOUNS
 2224            OCT    00102           55 2COMP  DEGREES, Y OPT DEGREES
 2225            OCT    00102           56 3COMP  DEGREES, Y OPT DEGREES, SECS
 2226            OCT    00102           57 2COMP  DEGREES, Y OPT DEGREES
 2227            OCT    00000           60 3COMP  OCTAL ONLY
 2228            OCT    00542           61 2COMP  DEGREES, ELEVATION DEGREES
 2229            OCT    00002           62 2COMP  DEGREES, SECS
 2230            OCT    00002           63 2COMP  DEGREES, SECS
 2231            OCT    00002           64 2COMP  Y OPT DEGREES, SECS
 2232            OCT    00001           65 2COMP  HOURS, SECONDS
 2233            OCT    00000           66 3COMP  WHOLE, FRACTIONAL, WHOLE
 2234            OCT    06143           67 3COMP  GYRO DEGREES FOR EACH
 2235            OCT    14306           70 3COMP  PIPA BIAS FOR EACH
 2236            OCT    16347           71 3COMP  PIPA SCALE FACTOR ERR.FOR EACH
 2237            OCT    20410           72 3COMP  POSITION FOR EACH
 2238            OCT    22451           73 3COMP  VELOCITY FOR EACH
 2239            OCT    00412           74 3COMP  TIME WEEKS, POSITION, WHOLE
 2240            OCT    20450           75 3COMP  POSITION, VELOCITY, POSITION
 2241            OCT    20410           76 3COMP  POSITION FOR EACH
 2242  4         OCT    22451           77 3COMP  VELOCITY FOR EACH
 2243   SFINTAB  OCT    00006           WHOLE,TIME(SEC)
 2244            OCT    03240
 2245            OCT    00253           TIME HOURS ( = 1.3..... )
 2246            OCT    25124             (POINT BETWEEN BITS 7-8 )
 2247            OCT    0               DEGREES (SFCON IN DEGINSF )
 2248            OCT    0
 2249            OCT    00021           GYRO DEGREES
 2250            OCT    30707
 2251            OCT    00001           GYRO BIAS DRIFT
 2252            OCT    02133
 2253            OCT    00011           GYRO AXIS ACCEL. DRIFT
 2254            OCT    30322
 2255            OCT    00004           PIPA BIAS
 2256            OCT    14021
 2257            OCT    00314           PIPA SCALE ERROR.
 2258            OCT    31463
 2259            OCT    23420           POSITION
 2260            OCT    00000
 2261            OCT    00201           VELOCITY
 2262            OCT    30327           ( POINT BETWEEN BITS 7-8 )
 2263            OCT    01371           TIME WEEKS
 2264            OCT    34750           ( POINT BETWEEN BITS 7-8 )
 22641           OCT    00001           ELEVATION DEGREES
 22642           OCT    03434
A2265  4                                END OF SFINTAB
 2266   SFOUTAB  OCT    05174           WHOLE, TIME(SEC)
 2267            OCT    13261
 2268            OCT    27670           TIME HOURS
 2269            OCT    31357
 2270            OCT    0               DEGREES
 2271            OCT    0
 2272            OCT    01631           GYRO DEGREES
 2273            OCT    23146
 2274            OCT    35753           GYRO BIAS DRIFT
 2275            OCT    32323
 2276            OCT    03216           GYRO AXIS ACCEL. DRIFT
 2277            OCT    06400
 2278            OCT    07237           PIPA BIAS
 2279            OCT    37776
 2280            OCT    00120           PIPA SCALE ERROR
 2281            OCT    00000
 2282            OCT    00321           POSITION
 2283            OCT    26706           ( POINT BETWEEN BITS 7-8 )
 2284            OCT    37441           VELOCITY
 2285            OCT    14247
 2286            OCT    05300           TIME WEEKS
 2287            OCT    20305
 22871           OCT    34631           ELEVATION DEGREES
 22872           OCT    23146
A2288  4                                END OF SFOUTAB
A2289                                   MIXNOUN  SF ROUT
 2290   IDADDTAB ECADR  OPTX            01       DEGREES
 2291            ECADR  OPTY            01       Y OPT DEGREES
 2292            ECADR  DSPTEM1         02       DEGREES
 2293            ECADR  DSPTEM1 +1      02       Y OPT DEGREES
 2294            ECADR  DSPTEM1 +2      02       SEC
 2295            ECADR  DESOPTX         03       DEGREES
 2296            ECADR  DESOPTX +1      03       Y OPT DEGREES
 2297            ECADR  WASKSET         04       OCTAL ONLY****CHANGE TO IN3****
 2298            ECADR  WASKSET         04       OCTAL ONLY
 22981           ECADR  OLDERR          04       OCTAL ONLY
 2299            ECADR  DSPTEM1         05       DEGREES
 2300            ECADR  DSPTEM1 +1      05       ELEVATION DEGREES
 2301            ECADR  CDUZ            06       DEGREES
 2302            ECADR  TIME2           06       SEC
 2303            ECADR  OPTX            07       DEGREES
 2304            ECADR  TIME2           07       SEC
 2305            ECADR  OPTY            10       Y OPT DEGREES
 2306            ECADR  TIME2           10       SEC
 2307            ECADR  SAMPTIME        11       HOURS
 2308            ECADR  SAMPTIME        11       SECONDS
 2309            ECADR  DSPTEM2         12       WHOLE
 2310            ECADR  DSPTEM2 +1      12       FRACTIONAL
 2311            ECADR  DSPTEM2 +2      12       WHOLE
 2312            ECADR  DELVX           13       GYRO DEGREES
 2313            ECADR  DELVX   +2      13       GYRO DEGREES
 2314            ECADR  DELVX   +4      13       GYRO DEGREES
 2315            ECADR  PBIASX          14       PIPA BIAS
 2316            ECADR  PBIASY          14       PIPA BIAS
 2317            ECADR  PBIASZ          14       PIPA BIAS
 2318            ECADR  PIPASCFX        15       PIPA SCALE FACTOR ERROR
 2319            ECADR  PIPASCFY        15       PIPA SCALE FACTOR ERROR
 2320            ECADR  PIPASCFZ        15       PIPA SCALE FACTOR ERROR
 2321            ECADR  DELR            16       POSITION
 2322            ECADR  DELR    +2      16       POSITION
 2323            ECADR  DELR    +4      16       POSITION
 2324            ECADR  DELVEL          17       VELOCITY
 2325            ECADR  DELVEL  +2      17       VELOCITY
 2326            ECADR  DELVEL  +4      17       VELOCITY
 2327            ECADR  TDEC            20       TIME WEEKS
 2328            ECADR  MEASQ           20       POSITION
 2329            ECADR  MEASMODE        20       WHOLE
 2330            ECADR  DSPTEM1         21       POSITION
 2331            ECADR  DSPTEM1 +2      21       VELOCITY
 2332            ECADR  DELTAQ          21       POSITION
 2333            ECADR  DSPTEM1         22       POSITION
 2334            ECADR  DSPTEM1 +2      22       POSITION
 2335            ECADR  DSPTEM1 +4      22       POSITION
 2336            ECADR  DSPTEM1         23       VELOCITY
 2337            ECADR  DSPTEM1 +2      23       VELOCITY
 2338            ECADR  DSPTEM1 +4      23       VELOCITY
 2339            OCT    00000                    SPARE
 2340            OCT    00000                    SPARE
 2341            OCT    00000                    SPARE
 2342            OCT    00000                    SPARE
 2343            OCT    00000                    SPARE
 2344            OCT    00000                    SPARE
A2345  4                                END OF IDADDTAB
A2346                                   MIXNOUN  SF ROUT
 2347   RUTMXTAB OCT    00302           01  DEGREES, Y OPT DEGREES
 2348            OCT    10302           02  DEGREES, Y OPT DEGREES, SECONDS
 2349            OCT    00302           03  DEGREES, Y OPT DEGREES
 2350            OCT    00000           04  OCTAL ONLY
 2351            OCT    00142           05  DEGREES, ELEVATION DEGREES
 2352            OCT    00202           06  DEGREES, SECONDS
 2353            OCT    00202           07  DEGREES, SECONDS
 2354            OCT    00206           10  Y OPT DEGREES, SECONDS
 2355            OCT    00205           11  HOURS, SECONDS
 2356            OCT    06043           12  WHOLE, FRACTIONAL, WHOLE
 2357            OCT    10204           13  GYRO DEGREES (FOR EACH)
 2358            OCT    06143           14  PIPA BIAS (FOR EACH)
 2359            OCT    06143           15  PIPA SCALE FACTOR ERROR (FOR EACH)
 2360            OCT    16347           16  POSITION (FOR EACH)
 2361            OCT    12245           17  VELOCITY (FOR EACH)
 2362            OCT    06345           20  TIME WEEKS, POSITION, WHOLE
 2363            OCT    16247           21  POSITION, VELOCITY, POSITION
 2364            OCT    16347           22  POSITION (FOR EACH)
 2365            OCT    12245           23  VELOCITY (FOR EACH)
A2366                                   END OF RUTMXTAB
P2367  4MISCELLANEOUS SERVICE ROUTINES IN FIXED/FIXED
 2368  2         SETLOC DATWAIT1 +2
R2369   SETNCADR       E CADR ARRIVES IN A. IT IS STORED IN NOUNCADR. EBANK BITS
R2370  2               ARE SET. E ADRES IS DERIVED AND PUT INTO NOUNADD.
 2371   SETNCADR TS     NOUNCADR        STORE ECADR
 2372            TS     EBANK           SET EBANK BITS
 2373            MASK   LOW8
 2374            AD     OCT1400
 2375            TS     NOUNADD         PUT E ADRES INTO NOUNADD
 2376  4         TC     Q
R2377   SETNADD        GETS E CADR FROM NOUNCADR, SETS EBANK BITS, DERIVES
R2378  2               E ADRES AND PUTS IT INTO NOUNADD.
 2379   SETNADD  CA     NOUNCADR
 2380  4         TCF    SETNCADR +1
R2381   SETEBANK       E CADR ARRIVES IN A. EBANK BITS ARE SET. E ADRES IS
R2382  2               DERIVED AND LEFT IN A.
 2383   SETEBANK TS     EBANK           SET EBANK BITS
 2384            MASK   LOW8
 2385            AD     OCT1400         E ADRES LEFT IN A
 2386  4         TC     Q
 2387   R1D1     OCT    16
 2388   R2D1     OCT    11
 2389  2R3D1     OCT    4
 2390   RIGHT5   TS     CYR
 2391            CS     CYR
 2392            CS     CYR
 2393            CS     CYR
 2394            CS     CYR
 2395            XCH    CYR
 2396  2         TC     Q
 2397   LEFT5    TS     CYL
 2398            CS     CYL
 2399            CS     CYL
 2400            CS     CYL
 2401            CS     CYL
 2402            XCH    CYL
 2403  2         TC     Q
 2404   SLEFT5   DOUBLE
 2405            DOUBLE
 2406            DOUBLE
 2407            DOUBLE
 2408            DOUBLE
 2409  4         TC     Q
 2410   LOW5     OCT    37
 2411   MID5     OCT    1740
 2412  2HI5      OCT    76000           MUST STAY HERE
 2413   TCNOVAC  TC     NOVAC
 2414   TCWAIT   TC     WAITLIST
 2415   TCTSKOVR TC     TASKOVER
 2416  4TCFINDVC TC     FINDVAC
 2417  4CHRPRIO  OCT    30000           EXEC PRIORITY OF CHARIN
 2418   LOW11    OCT    3777
 2419   LOW8     OCT    377
 2420  4OCT1400  OCT    1400
 2421   VD1      OCT    23
 2422   ND1      OCT    21
 2423  2MD1      OCT    25
 2424  2BINCON   DEC    10
 2425   FALTON   CA     BIT7            TURN ON OPERATOR ERROR LIGHT
 2426            EXTEND
 2427            WOR    DSALMOUT        BIT 7 OF CHANNEL 11
 2428  2         TC     Q
 2429   FALTOF   CS     BIT7            TURN OFF OPERATOR ERROR LIGHT
 2430            EXTEND
 2431            WAND   DSALMOUT        BIT 7 OF CHANNEL 11
 2432  2         TC     Q
 2433   RELDSPON CAF    BIT5            TURN ON KEY RELEASE LIGHT
 2434            EXTEND
 2435            WOR    DSALMOUT        BIT 5 OF CHANNEL 11
 2436  2         TC     Q
 2437   LODSAMPT EXTEND
 2438            DCA    TIME2
 2439            DXCH   SAMPTIME
 2440  4         TC     Q
 2441   TPSL1    EXTEND                 SHIFTS MPAC, +1, +2 LEFT 1
 2442            DCA    MPAC    +1      LEAVES OVFIND SET TO +/- 1 FOR OF/UF
 2443            DAS    MPAC    +1
 2444            AD     MPAC
 2445            ADS    MPAC
 2446            TS     7               TS A DOES NOT CHANGE A ON OF/UF.
 2447            TC     Q               NO NET OF/UF
 2448            TS     OVFIND          OVFIND SET TO +/- 1 FOR OF/UF
 2449  4         TC     Q
 2450   FLASHON  CAF    BIT6            TURN ON V/N FLASH
 2451            EXTEND                 BIT 6 OF CHANNEL 11
 2452            WOR    DSALMOUT
 2453  4         TC     Q
 2454   FLASHOFF CS     BIT6            TURN OFF V/N FLASH
 2455            EXTEND
 2456            WAND   DSALMOUT        BIT 6 OF CHANNEL 11
 2457            TC     Q
P2458   INTERNAL ROUTINES THAT USE THE KEYBOARD AND DISPLAY SYSTEM(THRU
R2459   NVSUB) MUST  TC GRABDSP  BEFOREHAND , TO GRAB THE DISPLAY SYSTEM AND
R2460  2MAKE IT BUSY TO OTHER INTERNAL USERS.
R2461         WHEN FINISHED , THERE MUST BE A TC FREEDSP , TO RELEASE THE
R2462  2SYSTEM FOR OTHER INTERNAL USERS.
R2463         THE CALLING SEQUENCES ARE
R2464   L        TC     GRABDSP
R2465   L+1      RETURN HERE WHEN SYSTEM IS ALREADY GRABBED
R2466  2L+2      RETURN HERE MEANS YOU HAVE IT
R2467   L        TC     NVSUB
R2468   L+1      RETURN HERE IF OPERATOR HAS INTERVENED
R2469  4L+2      RETURN HERE AFTER EXECUTION
R2470         A ROUTINE CALLED GRABUSY IS PROVIDED (USE IS OPTIONAL) TO PUT YOUR
R2471   JOB TO SLEEP UNTIL  THE SYSTEM IS FREED BY THE JOB HOLDING IT.
R2472   GRABUSY CANNOT BE CALLED FROM E MEMORY, SINCE JOBSLEEP AND JOBWAKE
R2473   HANDLE ONLY FIXED MEMORY.
R2474  2YOUR CADR IS PUT AT FIRST AVAILABLE SLOT IN A WAITING LIST (FIFO).
R2475         THE CALLING SEQUENCE IS
R2476            CAF    WAKEFCADR
R2477  2         TC     GRABUSY
R2478         A ROUTINE CALLED  NVSUBUSY IS PROVIDED (USE IS OPTIONAL)  TO PUT
R2479   YOUR JOB TO SLEEP UNTIL THE OPERATOR RELEASES IT.
R2480   NVSUBUSY CANNOT BE CALLED FROM E MEMORY, SINCE JOBSLEEP AND JOBWAKE
R2481   HANDLE ONLY FIXED MEMORY.
R2482                                               YOUR CADR IS PUT
R2483  2ON TOP OF A WAITING LIST (FIFO). IT ALSO TURNS ON KEY RELEASE LIGHT.
R2484          THE CALLING SEQUENCE IS
R2485            CAF    WAKEFCADR
R2486  4         TC     NVSUBUSY
R2487   AFTER A TC FREEDSP, THE INTERNAL INTERLOCK IS KEPT BUSY FOR 10 SECONDS,
R2488   AFTER WHICH A CADR IS CALLED FROM THE LIST. THIS INSURES THAT ALL
R2489  4DISPLAYS WAITING WILL BE VISIBLE.
R2490   GRABLOCK IS THE INTERNAL INTERLOCK FOR THE USE OF THE KEYBOARD
R2491   AND DISPLAY SYSTEM.
R2492   +0  FREE
R2493   +1  SOME INTERNAL ROUTINE HAS GRABBED DSP SYST
R2494  4+2  SOME INTERNAL ROUTINE HAS GONE TO NVSUBUSY
 2495   GRABDSP  CCS    GRABLOCK
 2496            TC     Q               ALREADY GRABBED, RETURN TO L+1
 2497            CAF    ONE             NOT GRABBED, SET TO +1
 2498            TS     GRABLOCK        AND RETURN TO L+2
 2499            INDEX  Q
 2500  4         TC     1
 2501   PREGBSY  CAF    LOW10           SPECIAL ENTRANCE FOR ROUTINES IN FIXED
 2502            MASK   Q               BANKS ONLY DESIRING THE FCADR OF
 2503            AD     FBANK           1 + (LOC FROM WHICH TC PREGBSY WAS DONE)
 2504   GRABUSY  TC     POSTJUMP        TO BE ENTERED.
 2505            CADR   GRABUSYB
 2506            SETLOC DOPROC  +2
 2507   GRABUSY1 TS     L
 2508            CCS    GRABLOCK
 2509            TC     +3              STILL GRABBED
 2510            CA     L               NOT GRABBED SO DO DIRECT CALL
 2511            TC     BANKJUMP
 2512            CAF    TWO
 2513            TS     LSTPTR
 2514            INDEX  LSTPTR          SEARCH LIST FOR FIRST AVAILABLE SPACE
 2515            CCS    DSPLIST         FROM BOTTOM.
 2516            TC     +2
 2517            TC     PUTINLST        SPACE FOUND
 2518            CCS    LSTPTR          DECREMENT POINTER
 2519            TC     -6
 2520            TC     LSTFULL
 2521   PUTINLST CA     L
 2522            INDEX  LSTPTR
 2523            TS     DSPLIST
 2524  4         TC     JOBSLEEP
R25241  GRABWAIT IS A SPECIAL ENTRANCE FOR ROUTINES IN FIXED BANKS ONLY. IF
R25242  SYSTEM IS NOT GRABBED, IT GRABS IT AND RETURNS TO L+1 ( L = LOC FROM
R25243  WHICH THE TC GRABWAIT WAS DONE). IF SYSTEM IS GRABBED, IT PUTS CALLING
R25244  JOB TO SLEEP WITH L+1 GOING INTO LIST FOR EVENTUAL WAKING UP WHEN
R25245 2SYSTEM IS FREED.
 2525            SETLOC GRABUSY  +2
 25251  GRABWAIT CCS    GRABLOCK
 25252           TCF    PREGBSY         GRABBED. PUT L+1 INTO LIST. GO TO SLEEP.
 25253           CAF    ONE             NOT GRABBED. GRAB AND RETURN TO L+1.
 25254           TS     GRABLOCK
 25255 4         TC     Q
 2526   PRENVBSY CS     2K+3            SPECIAL ENTRANCE FOR ROUTINES IN FIXED
 2527            AD     Q               BANKS ONLY DESIRING THE FCADR OF(LOC
 2528            AD     FBANK           FROM WHICH THE TC PRENVBSY WAS DONE) -2
 2529   NVSUBUSY TC     POSTJUMP        TO BE ENTERED.
 2530            CADR   NVSUBSYB
 2531  22K+3     OCT    2003
 2532            SETLOC PUTINLST  +4
 2533   NVSUBSY1 TS     L
 2534            CCS    DSPLOCK         TEST IF REALLY LOCKED OUT
 2535            TC     +3              STILL BUSY
 2536            CA     L               DSPLOCK = +0 SO RETURN DIRECTLY
 2537            TC     BANKJUMP
 2538            CAF    TWO             SET FOR GRABBED STATE AND NVSUBUSY USE
 2539            TS     GRABLOCK
 2540            CA     L
 2541            XCH    DSPLIST +2      ENTER CADR INTO FIRST POSITION OF LIST
 2542            XCH    DSPLIST +1              (BOTTOM)
 2543            XCH    DSPLIST
 2544            CCS    A
 2545            TC     LSTFULL
 2546            TC     +2
 2547            TC     LSTFULL
 2548            TC     RELDSPON
 2549            CA     L
 2550  4ENDNVBSY TC     JOBSLEEP
R25501  NVSBWAIT IS A SPECIAL ENTRANCE FOR ROUTINES IN FIXED BANKS ONLY. IF
R25502  SYSTEM IS NOT BUSY, IT EXECUTES V/N AND RETURNS TO L+1 (L= LOC FROM
R25503  WHICH THE TC NVSBWAIT WAS DONE). IF SYSTEM IS BUSY, IT PUTS CALLING JOB
R25504  TO SLEEP WITH L-1 GOING INTO LIST FOR EVENTUAL WAKING UP WHEN SYSTEM
R25505 2IS NOT BUSY.
 2551            SETLOC NVSUBUSY +3
 25511  NVSBWAIT TS     NVTEMP
 25512           CCS    DSPLOCK
 25513           TCF    NVSBWT1         BUSY
 25514           CA     Q               FREE. NVSUB WILL SAVE L+1 FOR RETURN
 25515           TCF    NVSUB   +5      AFTER EXECUTION.
 25516  NVSBWT1  INCR   Q               L+2. PRENVBSY WILL PUT L-1 INTO LIST AND
 25517 4         TCF    PRENVBSY        GO TO SLEEP.
 2552   RELDSP   XCH    Q               SET DSPLOCK TO +0, TURN RELDSP LIGHT
 2553            TS     RELRET          OFF,  SEARCH DSPLIST
 2554            CAF    NEG1
 2555            AD     GRABLOCK
 2556            EXTEND                 SEARCH LIST ONLY IF GRABLOCK = +2
 2557            BZMF   RELDSP2           (SOMEONE USED NVSUBUSY)
 2558            TC     WKSEARCH
 2559            TC     RELDSP2         LIST EMPTY
 2560            TC     JOBWAKE         LIST NOT EMPTY
 2561            CAF    ONE
 2562            TS     GRABLOCK
 25625  RELDSP2  INHINT
 2563            CS     BIT5            TURN OFF KEY RELEASE LIGHT
 2564            EXTEND                 (BIT 5 OF CHANNEL 11)
 2565            WAND   DSALMOUT
 2566            CAF    ZERO
 2567            TS     DSPLOCK
 2568            RELINT
 2569            TC     RELRET
 2570   RELDSP1  XCH    Q               SET DSPLOCK TO +0, RELDSP LIGHT OFF,
 2571            TS     RELRET          NO LIST SEARCH
 2573  4         TC     RELDSP2
 2574   WKSEARCH CAF    ZERO            SEARCHES LIST. LEAVES RESULT IN A.
 2575            XCH    DSPLIST         IF EMPTY, RETURN TO L+1.
 2576            XCH    DSPLIST +1      IF NOT EMPTY, INHINT AND RETURN TO L+2.
 2577            XCH    DSPLIST +2
 2578            EXTEND
 2579            BZF    +4              EMPTY
 2580            INHINT                 NOT EMPTY
 2581            INDEX  Q               RETURN TO L+2
 2582            TC     1
 2583  4         TC     Q               RETURN TO L+1
 2584   FREEDSP  XCH    Q
 2585            TS     FREERET
 2586            INHINT
 2587            CAF    SHOTIME
 2588            TC     WAITLIST
 2589            EBANK= DSPCOUNT
 2590            2CADR  FREEWAIT
 2591            RELINT
 2592  2         TC     FREERET
 2593   SHOTIME  OCT    1750
 2594  2         SETLOC ENDNVBSY +1
 2595   FREEWAIT CAF    CHRPRIO         CALLED BY T3RUPT
 2596            TC     NOVAC
 2597            EBANK= DSPCOUNT
 2598            2CADR  FREDSPDO
 2599  4         TC     TASKOVER
 2600   FREDSPDO TC     WKSEARCH        CALLED BY EXECUTIVE
 2601            TC     LSTEMPTY        LIST EMPTY
 2602            TC     JOBWAKE         LIST NOT EMPTY
 2603            RELINT
 2604            CAF    ONE             SET FOR GRABBED CONDITION
 2605            TS     GRABLOCK
 2606            TC     ENDOFJOB
 2607   LSTEMPTY CAF    ZERO            SET FOR FREE CONDITION
 2608  4         TC     -3
 2609   LSTFULL  TC     ABORT
 2610  2         OCT    01206           PINBALL WAITING LINE FULL.
 2611            SETLOC SHOTIME +1
 2612   ABORT    TC     ABORT           ****FIX LATER*****
P2613   VBTSTLTS TURNS ON ALL DISPLAY PANEL LIGHTS. AFTER 5 SEC, IT TURNS
R2614  2OFF THE CAUTION AND STATUS LIGHTS.
 2615  2         SETLOC DSPMMEND +1
 2616   VBTSTLTS CAF    TSTCON1         TURN ON UPLINK ACTIVITY, TEMP, KEY RLSE,
 2617            EXTEND                 V/N FLASH, OPERATOR ERROR.
 2618            WOR    DSALMOUT
 2619            CAF    TSTCON2         TURN ON AUTO, HOLD, NO ATT, SPARE,
 2620            TS     DSPTAB  +11D    GIMBAL LOCK, SPARE, TRACKER, PROG ALM.
 2621            CAF    BIT10           TURN ON TEST ALARM OUTBIT
 2622            EXTEND
 2623            WOR    CHAN13
 2624            INHINT
 2625            CAF    TEN
 2626   TSTLTS1  TS     ERCNT
 2627            CS     FULLDSP
 2628            INDEX  ERCNT
 2629            TS     DSPTAB
 2630            CCS    ERCNT
 2631            TC     TSTLTS1
 2632            CS     FULLDSP1
 2633            TS     DSPTAB  +1      TURN ON 3 PLUS SIGNS
 2634            TS     DSPTAB  +4
 2635            TS     DSPTAB  +6
 2636            CAF    ELEVEN
 2637            TS     NOUT
 26371           RELINT
 2638            CAF    SHOLTS
 26381           INHINT
 2639            TC     WAITLIST
 2640            EBANK= DSPTAB
 2641            2CADR  TSTLTS2
 2642            TC     ENDOFJOB        DSPLOCK IS LEFT BUSY (FROM KEYBOARD
A26421                                  ACTION) UNTIL TSTLTS3 TO INSURE THAT
A26422 4                                LIGHTS TEST WILL BE SEEN.
 2643   FULLDSP  OCT    05675           DISPLAY ALL 8:S
 2644   FULLDSP1 OCT    07675           DISPLAY ALL 8:S AND +
 2645   TSTCON1  OCT    00174           CHAN 11 BITS 3-7
A2646                                   UPLINK ACTIVITY, TEMP, KEY RLSE,
A2647                                   V/N FLASH, OPERATOR ERROR.
 2650   TSTCON2  OCT    40777           DSPTAB+11D BITS 1-9
A2651                                   AUTO, HOLD, FREE, NO ATT, SPARE,
A2652                                   GIMBAL LOCK, SPARE, TRACKER, PROG ALM.
 26525  TSTCON3  OCT    00114           CHAN 11  BITS 3,4,7
A26526                                  UPLINK ACTIVITY, TEMP, OPERATOR ERROR.
 2653  4SHOLTS   OCT    764             5 SEC
 26531  TSTLTS2  CAF    CHRPRIO         CALLED BY WAITLIST
 26532           TC     NOVAC
 26533           EBANK= DSPTAB
 26534           2CADR  TSTLTS3
 26535 4         TC     TASKOVER
 2654   TSTLTS3  CS     TSTCON3         CALLED BY EXECUTIVE
 2655            EXTEND                 TURN OFF  UPLINK ACTIVITY, TEMP,
 2657            WAND   DSALMOUT        OPERATOR ERROR.
 2658            CS     BIT10           TURN OFF TEST ALARM OUTBIT
 2659            EXTEND
 2660            WAND   CHAN13
 2661            CAF    BIT15           TURN OFF AUTO, HOLD, FREE, NO ATT, SPARE
 2662            TS     DSPTAB  +11D    GIMBAL LOCK, SPARE, TRACKER, PROG ALM
 2663            TC     DSPMM           REDISPLAY C(MODREG)
 2664            TC     POSTJUMP        TURN OFF KEY RLSE LIGHT (AND SEARCH LIST
 2665            CADR   VBTERM          IF APPROPRIATE).
A2666                                   TURN OFF V/N FLASH, SET LOADSTAT FOR
A2667                                   FOR TERMINATE CONDITION, AND GO TO
A2668                                   RECALTST. FINALLY DO TC ENDOFJOB.
LINS    AGC BLK2 INSTRUCTION CHECK
 0009  2         SETLOC ABORT +1
R0010   ADDRESSES OF ERASABLE REGISTERS
 0011   ADRS1    ADRES  KEEP1
 0012   ADRS2    ADRES  KEEP2
 0013   ADRS3    ADRES  KEEP3
 0014   ADRS4    ADRES  SELF1
 0015   ADRS5    ADRES  SELF2
 0016   ADRS6    ADRES  S+MAX
 0017  2ADRS7    ADRES  SELF3
R00171  CONSTANTS USED THROUGHOUT THE INSTRUCTIONS CHECK
 0018   SBIT1    OCTAL  00001
 0019   SBIT2    OCTAL  00002
 0020   SBIT3    OCTAL  00004
 0021   SBIT4    OCTAL  00010
 0022   SBIT5    OCTAL  00020
 0023   SBIT6    OCTAL  00040
 0024   SBIT7    OCTAL  00100
 0025   SBIT8    OCTAL  00200
 0026   SBIT9    OCTAL  00400
 0027   SBIT10   OCTAL  01000
 0028   SBIT11   OCTAL  02000
 0029   SBIT12   OCTAL  04000
 0030   SBIT13   OCTAL  10000
 0031   SBIT14   OCTAL  20000
 0032  2SBIT15   OCTAL  40000
 0033   S+ZERO   OCTAL  00000
 0034   S+1      OCTAL  00001
 0035   S+2      OCTAL  00002
 0036   S+3      OCTAL  00003
 0037   S+4      OCTAL  00004
 0038   S+5      OCTAL  00005
 0039   S+6      OCTAL  00006
 0040   S+7      OCTAL  00007
 0041   S6BITS   OCTAL  00077
 0042   S7BITS   OCTAL  00177
 0043   S13BITS  OCTAL  17777
 0044   SODD     OCTAL  25252           SEVEN ONE BITS
 0045   S+MAX    OCTAL  37777
 0046   S-MAX    OCTAL  40000
 0047   ALARMCON OCTAL  40400
 0048   SINOUT1  OCTAL  52500
 0049   SEVENS   OCTAL  52525           EIGHT ONE BITS
 0050   SINOUT2  OCTAL  52552
 0051   CYRCON   OCTAL  57761
 0052   SINOUT3  OCTAL  77725
 0053   S-15     OCTAL  77760
 0054   S-14     OCTAL  77761
 0055   S-7      OCTAL  77770
 0056   S-6      OCTAL  77771
 0057   S-5      OCTAL  77772
 0058   S-4      OCTAL  77773
 0059   S-3      OCTAL  77774
 0060   S-2      OCTAL  77775
 0061   S-1      OCTAL  77776
 0062  2S-ZERO   OCTAL  77777
R0063   NEXT TWO CONSTANTS ARE USED IN THE DEVIDE SUBROUTINE
 0064   DV1CON   OCTAL  14000
 0065  2DV2CON   OCTAL  37776
R0066   NEXT TWO CONSTANTS ARE ADDRESSESS USED BY EXTRACODE INDEX INSTRUCTIONS
 0067   ADRS+1   ADRES  S+1
 0068  2ADRSDV1  ADRES  DV1CON
 0069            CS     A
 0070   -0CHK    CCS    A
 0071            TCF    ERRORS
 0072            TCF    ERRORS
 0073            TCF    ERRORS
 0074  2         TC     Q
 0075            CS     A
 0076   -1CHK    CCS    A
 0077            TCF    ERRORS
 0078            TCF    ERRORS
 0079            CCS    A
 0080            TCF    ERRORS
 0081  3         TC     Q
 0082   ERRORS   XCH    Q
 0083            TS     SFAIL           SAVE Q FOR FAILURE LOCATION
 00831           CA     FBANK
 00832           TS     SFAIL +1
 0084            INCR   ERCOUNT         KEEP TRACK OF NUMBER OF MALFUNCTIONS
 0085            INHINT                 TURN ON PROGRAM ALARM LIGHT
 0086            CS     ALARMCON
 0087            MASK   DSPTAB +11D
 0088            AD     ALARMCON
 0089            TS     DSPTAB +11D
 0090  2         RELINT
R0091   IF C(SMODE) IS +NON-ZERO START CHECKING AGAIN AT TCCHK
R0092   IF C(SMODE) IS + PUT +0 IN SMODE AND IDLE
 0093            CA     SMODE
 0094            EXTEND
 0095            BZMF   STOPCHK
 0096            TC     SMODECHK
 0097   STOPCHK  CA     S+ZERO
 0098            TS     SMODE
 0099            TC     CHECKNJ
 0100   SMODECHK CCS    SMODE
 0101            TC     +3
 0102            TC     SMODECHK -1
 0103            TC     +1
 0104            TC     CHECKNJ
 0105            CAF    STRTCHK
 0106            TC     BANKJUMP        TO START OF CHECKING ROUTINES
 0107  2STRTCHK  CADR   TCCHK
 0136  2         SETLOC 26000
 01361           CA     S+ZERO          INITIALIZE COUNT REGISTER
 01362           TS     ERCOUNT
 01363 2         TS     SCOUNT
R0137   NORMAL USE OF TC AND TCF
 0138   TCCHK    TC     +2
 0139            TC     CCSCHK
 0140            TCF    +2
 0141            TC     ERRORS
 0142            TC     Q
 0143  2         TC     ERRORS
R0144   NORMAL USE OF CA, CS, AND CCS
 01441  CCSCHK   CA     S-3
 0145            TS     KEEP1
 0146            CCS    KEEP1
 0147            TC     ERRORS
 0148            TC     ERRORS
 0149            TC     +2
 0150            TC     ERRORS
 0151            CCS    A               C(A) =+2, RESULT OF CCS -NUMBER
 0152            TC     +4
 0153            TC     ERRORS
 0154            TC     ERRORS
 0155            TC     ERRORS
 0156            CCS    A               C(A) = +1, RESULT OF CCS + NUMBER
 0157            TC     +4
 0158            TC     ERRORS
 0159            TC     ERRORS
 0160            TC     ERRORS
 0161            CCS    A               C(A) = +0, RESULT OF CCS + NUMBER
 0162            TC     ERRORS
 0163            TC     +3
 0164            TC     ERRORS
 0165            TC     ERRORS
 0166            CS     A
 0167            CCS    A               C(A) = -0, RESULT OF CCS +0
 0168            TC     ERRORS
 0169            TC     ERRORS
 0170            TC     ERRORS
 0171            CCS    A               RESULT OF CCS -0
 0172            TC     ERRORS
 0173            TC     +3
 0174            TC     ERRORS
 0175  2         TC     ERRORS
R0176   NORMAL USE OF MASK
 0177   MSKCHK   CS     S-ZERO
 0178            MASK   S-ZERO          00000, 77777
 0179            TC     -0CHK -1
 0180            CS     S+ZERO
 0181            MASK   S+ZERO          77777, 00000
 0182            TC     -0CHK -1
 0183            CA     S+ZERO
 0184            MASK   S+ZERO          00000, 00000
 0185            TC     -0CHK -1
 0186            CA     S-ZERO
 0187            MASK   S-ZERO          77777, 77777
 0188            TC     -0CHK
R0189   NO EDIT FEATURE OF MASK IS CHECKED
R0190   BITS 9-14 OF WRITE LINES GO TO BITS 1-7 OF EDOP
 0191            CA     S-ZERO          77777
 0192            TS     EDOP            00177
 0193            MASK   EDOP            00177
 0194            TS     KEEP1           00177
 0195            MASK   EDOP            00177
 0196            CS     A               77600
 0197            AD     KEEP1           77777
 0198            TC     -0CHK
R01981  CHECK MASK OF AN SC REGISTER
 01982           CA     S+1
 01983           TS     L
 01984           CA     S-ZERO
 01985           MASK   L
 01986 2         TC     -1CHK -1
R0199   NORMAL USE OF XCH, AD, AND TS
 0200            CA     S+MAX           37777
 0201            TS     KEEP1
 0202            AD     KEEP1           01 - 37776
 0203            TS     KEEP2           37776
 0204            TC     ERRORS
 0205            TC     -1CHK -1
 0206            XCH    KEEP1           SKEEP1 NOW +0
 0207            CS     A               40000
 0208            AD     A               10 - 00001
 0209            TS     KEEP3           40001, C(A) = -1
 0210            TC     ERRORS
 0211            AD     KEEP3           C(A) = 40000
 0212            AD     KEEP2           C(A) = -1
 0213            AD     KEEP1           C(A) = -1
 0214            TS     KEEP4           -1
 0215            CS     KEEP4           +1
 0216  2         TC     -1CHK -1
R0217   NORMAL USE OF INCR
R0218   NOT CHECKING COUNTER INTERRUPT
 0219            CA     S+MAX           37777
 0220            TS     KEEP1
 0221            INCR   KEEP1           +0
 0222            INCR   KEEP1           +1
 0223            INCR   KEEP1           +2
 0224            AD     S-MAX
 0225            TC     -0CHK           CHECK C(A) HAS NOT CHANGED
 0226            CS     KEEP1
 0227            TS     KEEP1           -2
 0228            INCR   KEEP1           -1
 0229            CA     KEEP1
 0230            TC     -1CHK
R02301  CHECK    INCREMENT OF AN SC REGISTER
 02302           CA     S-2
 02303           TS     L
 02304           INCR   L
 02305           CA     L
 02306 2         TC     -1CHK
R0231   NORMAL USE OF ADS
 0232            CA     SBIT13
 0233            TS     KEEP1           10000
 0234            ADS    KEEP1           20000
 0235            ADS    KEEP1           OV WITH +0
 0236            TS     KEEP2
 0237            TC     ERRORS
 0238            CS     KEEP1
 0239            TC     -0CHK
R02391  CHECKS ADS OF AN SC REGISTER
 02392           CA     S13BITS         17777
 02393           TS     L
 02394           AD     S+1             C(A) = 20000
 02395           ADS    L
 02396           AD     S-MAX
 02397           TC     -0CHK
 02398           CS     L
 023981          AD     S+MAX
 02399 2         TC     -0CHK
R0240   NORMAL USE OF LXCH
 0241            CA     S+1
 0242            TS     KEEP1           +1
 0243            LXCH   KEEP1           +1 IN L
 0244            CS     A
 0245            TS     KEEP2           -1 IN KEEP2
 0246            LXCH   KEEP2           L = -1, KEEP2 = +1
 0247            CS     KEEP2
 0248            TC     -1CHK
 0249            CA     L
 0250  2         TC     -1CHK
R0251   UNDERFLOW AND OVERFLOW IS LOST IN L REGISTER
 0252            CA     S+MAX
 0253            AD     A
 0254            TS     L               OV WITH 37776
 0255            TC     ERRORS
 0256            CS     S+MAX
 0257            AD     A               UV WITH 40001
 0258            LXCH   A               C(A) = 37776, C(L) = 40001
 0259            TS     KEEP1           37776
 0260            TC     +2
 0261            TC     ERRORS
 0262            CA     L
 0263            TS     KEEP2           40001
 0264            TC     +2
 0265            TC     ERRORS
 0266            AD     KEEP1           -0
 0267  2         TC     -0CHK
R0268   NORMAL USE OF DXCH
 0269            CA     S+MAX
 0270            TS     KEEP2           37777, K+1
 0271            CS     A
 0272            TS     L               40000
 0273            AD     S+1
 0274            TS     KEEP1           40001, K
 0275            CS     A               37776
 0276            DXCH   KEEP1
R0277   A = 40001, L = 37777 .......  KEEP1 = 37776, KEEP2 = 40000
 0278            AD     L
 0279            TC     -1CHK -1
 0280            CA     KEEP1
 0281            AD     KEEP2
 0282  2         TC     -1CHK
R0283   NORMAL USE OF DAS (6 CHECKS)
R0284   IF ADDRESS OF K DOES NOT = ZERO, C(L) = +0 AND C(A) = NET OVERFLOW
R0285   C(A) = +0 IF NO OVERFLOW OR UNDERFLOW
R0286   DAD++ WITH NO OVERFLOW
 0287   DAS++    CAF    S13BITS
 0288            TS     KEEP1           17777
 0289            TS     KEEP2           17777
 0290            TS     L               17777
 0291            AD     S+1             20000
 0292            DAS    KEEP1
R0293   C(KEEP1) = 37777, C(KEEP2) = 377776
 0294            TC     -0CHK -1
 0295            XCH    L
 0296            TC     -0CHK -1
 0297            CS     KEEP1
 0298            AD     KEEP2
 0299            TC     -1CHK
R0300   DAS++ WITH OVERFLOW
 0301   DAS++OV  CA     S+MAX
 0302            TS     KEEP1           37777
 0303            TS     KEEP2           37777
 0304            TS     L               37777
 0305            CA     S+1             +1
 0306            DAS    KEEP1
R0307   C(KEEP1) = +1, C(KEEP2) = 37776, C(A) = +1,
 0308            TC     -1CHK -1
 0309            XCH    L
 0310            TC     -0CHK -1
 0311            CS     KEEP1
 0312            TC     -1CHK
 0313            CA     S-MAX
 0314            AD     KEEP2
 0315            TC     -1CHK
R0316   DAS MIXED SIGNS
 0317   DAS+--+  CA     S+MAX
 0318            TS     KEEP1           37777
 0319            CS     A
 0320            TS     KEEP2           40000
 0321            CS     A
 0322            AD     S-1
 0323            TS     L               37776
 0324            CS     A               40001
 0325            DAS    KEEP1
R0326   C(KEEP1) = +1, C(KEEP2) = -1
 0327            TC     -0CHK -1
 0328            XCH    L
 0329            TC     -0CHK -1
 0330            CA     KEEP1
 0331            TC     -1CHK -1
 0332            CA     KEEP2
 0333            TC     -1CHK
R0334   DAS-- WITH NO UNDERFLOW
 0335   DAS--    CS     S13BITS
 0336            TS     KEEP1           60000
 0337            TS     KEEP2           60000
 0338            TS     L               60000
 0339            AD     S-1             57777
 0340            DAS    KEEP1
R0341   C(KEEP1) = 40000, C(KEEP2) = 40001
 0342            TC     -0CHK -1
 0343            XCH    L
 0344            TC     -0CHK -1
 0345            CS     KEEP2
 0346            AD     KEEP1
 0347            TC     -1CHK
R0348   DAS-- WITH UNDERFLOW
 0349   DAS--UV  CA     S-MAX
 0350            TS     KEEP1           40000
 0351            TS     KEEP2           40000
 0352            TS     L               40000
 0353            CA     S-1             -1
 0354            DAS    KEEP1
R0355   C:KEEP1) = -1, C(KEEP2) = 40001, C(A) = -1
 0356            TC     -1CHK
 0357            XCH    L
 0358            TC     -0CHK -1
 0359            CA     KEEP1
 0360            TC     -1CHK
 0361            CA     S+MAX
 0362            AD     KEEP2
 0363            TC     -1CHK -1
R0364   DAS A.  DOUBLES THE CONTENTS OF THE A REGISTER AND THE L REGISTER.
 0365            CA     S-MAX
 0366            TS     KEEP2           40000
 0367            TS     L               40000
 0368            CS     A
 0369            TS     KEEP1           37777
 0370            DAS    A
R0371   C(A) = OV 37775, C(L) = 40001
 0372            TS     KEEP3
 0373            TC     ERRORS
 0374            CA     L
 0375            AD     KEEP3
 0376  2         TC     -1CHK
R0377   NORMAL USE OF INDEX WITHOUT EXTRACODE.
R0378   INSTRUCTIONS CHECKED WITH INDEX UP TO FIRST SPACE SKIPPED
R0379   ARE CA, TS, XCH, CCS, AD, TC, TCF, TS WITH OVERFLOW, AND MASK
R0380   FIRST INITIALIZE ERASABLE REGISTERS USED FOR INDEX INSTRUCTION
 0381            CA     S+ZERO
 0382            TS     NDX+0
 0383            CA     ADRS6           ADDRESS OF S+MAX
 0384            TS     NDX+MAX
 0385            CA     ADRS1
 0386            TS     NDXKEEP1
 0387            CA     ADRS2
 0388            TS     NDXKEEP2
 0389            CA     ADRS3
 0390            TS     NDXKEEP3
 0391            CA     ADRS4
 0392            TS     NDXSELF1
 0393            CA     ADRS5
 0394            TS     NDXSELF2
 0395   NDXCHK   NDX    NDX+MAX         CA S+MAX
 0396            CA     0000            A = 37777
 0397            NDX    NDXKEEP1        TS KEEP1
 0398            TS     0000            TS WITH NO OV, UV
 0399            NDX    NDX+0           CS   A
 0400            CS     0000            A = 40000
 0401            NDX    NDXKEEP1        XCH KEEP1
 0402            XCH    0000            A = +MAX, KEEP1 = - MAX
 0403            NDX    NDX+0           CCS A
 0404            CCS    0000            A = 37776
 0405            TC     +4
 0406            TC     ERRORS
 0407            TC     ERRORS
 0408            TC     ERRORS
 0409            NDX    NDXKEEP1        AD KEEP1
 0410            AD     0000            A = -1
 0411   SELF1    NDX    NDXSELF1        TC +2
 0412            TC     0003
 0413            TC     ERRORS          DID NOT PERFORM A TC
 0414            NDX    NDXSELF1        TC +2
 0415            TC     0006
 0416            TC     CNTINU          CHECK C(Q)
 0417   SELF2    NDX    NDXSELF2        TCF +2
 0418            TCF    003
 0419            TC     ERRORS
 0420            TC     Q               SHOULD GO TO SELF1 +2
 0421   CNTINU   TC     -1CHK
 0422            CA     S+MAX
 0423            AD     S+1
 0424            NDX    NDXKEEP1        TS KEEP1 WITH OV
 0425            TS     0000            A = +1, KEEP1 = +0
 0426            TC     ERRORS
 0427            AD     KEEP1           A = +1
 0428            NDX    NDX+MAX         MASK S+MAX
 0429            MASK   0000            A = +1
 0430  2         TC     -1CHK -1
R0431   INDEX USED WITH ADS, NDX, AND INCR
 0432            CA     S13BITS
 0433            TS     KEEP1
 0434            NDX    NDX+0           INDEX +0
 0435            NDX    NDXKEEP1        ADS KEEP1
 0436            ADS    0000            C(A) AND C(KEEP1) = 377776
 0437            NDX    NDXKEEP1        INCR KEEP1
 0438            INCR   0000            C(KEEP1) = 37777
 0439            CS     A               40001
 0440            AD     KEEP1           A = +1
 0441            TC     -1CHK -1
R0442   INDEX USED WITH LXCH, DAS, AND DXCH
 0443            CA     S-MAX
 0444            TS     KEEP2           KEEP2 HOLDS 40000, KEEP1 HOLDS 37777
 0445            CA     S+1
 0446            TS     KEEP3           +1
 0447            NDX    NDXKEEP3        LXCH KEEP3
 0448            LXCH   0000            C(L) = +1
 0449            CA     S-2
 0450            NDX    NDXKEEP1        DAS KEEP1
 0451            DAS    0000
R0452   BEFORE DAS, K = 37777   K+1 = 40000
R0453               A = -2      L   = +1
R0454   AFTER  DAS, K = 37775   K+1 = 40001
R0455              A = +0    L  = +0
 0456            NDX    NDXKEEP1        DXCH KEEP1
 0457            DXCH   0000
 0458            AD     L
 0459            TC     -1CHK
 0460            CS     KEEP1
 0461            TC     -0CHK
 0462            CA     KEEP2
 0463            TC     -0CHK -1
R0464   INDEX INSTRUCTION USED WITH OVERFLOW
 0465            CA     ADRS7           ADDRESS OF SELF3
 0466            AD     SBIT14
 0467            TS     KEEP7
 0468   SELF3    NDX    KEEP7
 0469            2      0002
 0470            TC     ERRORS
R04701  CHECK INDEX OF AN SC REGISTER
 04702           CA     ADRS1           01371, ADDRESS OF KEEP1
 04703           NDX    A
 04704           TS     0000            PUT 01371 IN KEEP1
 04705           CS     A
 04706           AD     KEEP1
 04707           TC     -0CHK
P0471   START CHECKING EXTRACODE INSTRUCTIONS
R0472   NORMAL USE OF DCA, DCS, AND SU
 0473   STRTXTRA EXTEND
 0474            DCA    SBIT1
R0475   C(A) = +1, C(L) = +2
 0476            TS     KEEP2           +1
 0477            XCH    L
 0478            TS     KEEP1           +2
 0479            EXTEND
 0480            SU     KEEP2           C(KEEP2) = +1
 0481            TC     -1CHK -1
 0482            EXTEND
 0483            DCS    KEEP1
R0484   C(A) = -2, C(L) = -1
 0485            EXTEND
 0486            SU     L
 0487            TC     -1CHK
R0488   COMPLEMENTING OF THE DOUBLE PRECISION ACCUMULATOR
 0489            CA     S+MAX
 0490            TS     L               37777
 0491            AD     A               OV37776
 0492            EXTEND
 0493            DCS    A
 0494            TS     KEEP1
 0495            TC     ERRORS
 0496            CA     KEEP1
 0497            EXTEND
 0498            SU     L
 0499            TC     -1CHK -1
R04991  CHECKS DCA OF AN SC REGISTER
 04992           CA     S+MAX           37777
 04993           TS     L
 04994           CA     S-1             -1
 04995           TS     Q
 04996           COM
 04997           EXTEND
 04998           DCA    L
 04999           TC     -1CHK
 049991          CA     L
 0499922         TC     -1CHK
R0500   NORMAL USE OF QXCH
 0501            CA     QXCHCON1
 0502            TS     KEEP1           STORE ADDRESS OF AUGCHK IN KEEP1
 0503            TC     +2              Q NOW HOLDS ADDRESS OF QNMBR
 0504   QNMBR    TC     ERRORS
 0505            EXTEND
 0506            QXCH   KEEP1           Q NOW HOLDS ADDRESS OF AUGCHK
 0507            TC     Q               SHOULD GO TO QXCHCON2 +1, NOT QNMBR
 0508            TC     ERRORS
 0509   QXCHCON1 ADRES  QXCHCON2 +1
 0510   QXCHCON2 ADRES  QNMBR
 0511            CS     KEEP1           CHECK THAT KEEP1 HOLDS B(Q)
 0512            AD     QXCHCON2
 0513            TC     -0CHK
R05131  CHECKS QXCH OF AN SC REGISTER
 05132           CA     S+ZERO
 05133           TC     +2
 05134           TCF    +5
 05135           EXTEND
 05136           QXCH   A
 051361          LXCH   Q
 05137           TC     A
 05138           CA     L
 05139 2         TC     -0CHK -1
R0514   NORMAL USE OF AUG
 0515   AUGCHK   CA     S+ZERO
 0516            TS     KEEP1           +0
 0517            CS     A
 0518            TS     KEEP2           -0
 0519            EXTEND
 0520            AUG    KEEP1           +1
 0521            EXTEND
 0522            AUG    KEEP1           +2
 0523            TC     -0CHK           CHECK C(A) HAS NOT CHANGED
 0524            EXTEND
 0525            AUG    KEEP2           -1
 0526            EXTEND
 0527            AUG    KEEP2           -2
 0528            EXTEND
 0529            AUG    KEEP2           -3
 0530            TC     -0CHK -1
 0531            CA     KEEP2
 0532            AD     KEEP1
 0533            TC     -1CHK
R05331  CHECKS AUG OF AN SC REGISTER
 05332           CA     S-ZERO
 05333           EXTEND
 05334           AUG    A
 05335 2         TC     -1CHK
R0534   NORMAL USE OF DIM
 0535   DIMCHK   CA     S+ZERO
 0536            TS     KEEP1           +0
 0537            EXTEND
 0538            DIM    KEEP1
 0539            CA     KEEP1
 0540            TC     -0CHK -1
 0541            CS     A
 0542            TS     KEEP1           -0
 0543            EXTEND
 0544            DIM    KEEP1
 0545            CA     KEEP1
 0546            TC     -0CHK
 0547            CA     S+2
 0548            TS     KEEP1           +2
 0549            EXTEND
 0550            DIM    KEEP1           +1
 0551            AD     S-1
 0552            TC     -1CHK -1        CHECK C(A) HAS NOT CHANGED
 0553            CA     KEEP1
 0554            TC     -1CHK -1
 0555            EXTEND
 0556            DIM    KEEP1
 0557            TC     -0CHK -1
 0558            CA     KEEP1
 0559            TC     -0CHK
 0560            CS     S+2
 0561            TS     KEEP2           -2
 0562            EXTEND
 0563            DIM    KEEP2           -1
 0564            CA     KEEP2
 0565            TC     -1CHK
 0566            EXTEND
 0567            DIM    KEEP2           -0
 0568            TC     -0CHK -1
 0569            CA     KEEP2
 0570            TC     -0CHK
R05701  CHECKS DIM OF AN SC REGISTER
 05702           CA     S-2
 05703           EXTEND
 05704           DIM    A
 05705 2         TC     -1CHK
R0571   NORMAL USE OF MSU
R0572   MSU SAME (S+MAX AND S+MAX), RESULT +0
 0573            CA     S+MAX
 0574            TS     KEEP1
 0575            EXTEND
 0576            MSU    KEEP1
 0577            TC     -0CHK -1
R0578   MSU SAME (+0 AND +0), RESULT +0
 0579            TS     KEEP2
 0580            EXTEND
 0581            MSU    KEEP2
 0582            TC     -0CHK -1
R0583   MSU SAME (-0 AND -0), RESULT +0
 0584            CA     S-ZERO
 0585            TS     KEEP3
 0586            EXTEND
 0587            MSU    KEEP3
 0588            TC     -0CHK -1
R0589   MSU +0 AND 77777, RESULT = +1
 0590            EXTEND
 0591            MSU    KEEP3
 0592            TC     -1CHK -1
R0593   MSU 77777 AND +0, RESULT = -1
 0594            CS     A
 0595            EXTEND
 0596            MSU    KEEP2
 0597            TC     -1CHK
R0598   MSU +6 AND +7, RESULT = -1
 0599            CA     S+7
 0600            TS     KEEP4
 0601            CA     S+6
 0602            TS     KEEP5
 0603            EXTEND
 0604            MSU    KEEP4
 0605            TC     -1CHK
R0606   MSU +7 AND +6, RESULT = +1
 0607            CA     S+7
 0608            EXTEND
 0609            MSU    KEEP5
 0610            TC     -1CHK -1
R0611   MSU 77770 AND 77771, RESULT = -1
 0612            CA     S-6
 0613            TS     KEEP6
 0614            CA     S-7
 0615            TS     KEEP7
 0616            EXTEND
 0617            MSU    KEEP6
 0618            TC     -1CHK
R0619   MSU 77771 AND 77770, RESULT = +1
 0620            CA     S-6
 0621            EXTEND
 0622            MSU      KEEP7
 0623            TC     -1CHK -1
R06231  CHECKS MSU OF AN SC REGISTER ( -0 AND -0 = +0)
 06232           CA     S-ZERO
 06233           TS     L
 06234           EXTEND
 06235           MSU    L
 06236 2         TC     -0CHK -1
R0624   NORMAL USE OF BZF
 0625   BZFCHK   TC     +2
 0626            TC     BZMFCHK         CORRECT ADDRESS IN Q
 0627            CAF    S+5
 0628            EXTEND
 0629            BZF    ERRORS
 0630            CS     A
 0631            EXTEND
 0632            BZF    ERRORS
 0633            CAF    S+ZERO
 0634            EXTEND
 0635            BZF    +2
 0636            TC     ERRORS
 0637            CS     A
 0638            EXTEND
 0639            BZF    +2
 0640            TC     ERRORS
 0641            TC     Q               SHOULD GO TO BZFCHK +1
 0642  2         TC     ERRORS
 0643   BZMFCHK  TC     +2
 0644            TC     MP1++           CORRECT ADDRESS IN Q
 0645            CAF    SBIT9
 0646            EXTEND
 0647            BZMF   ERRORS
 0648            CS     A
 0649            EXTEND
 0650            BZMF   +2
 0651            TC     ERRORS
 0652            CA     S+ZERO
 0653            EXTEND
 0654            BZMF   +2
 0655            TC     ERRORS
 0656            CS     A
 0657            EXTEND
 0658            BZMF   +2
 0659            TC     ERRORS
 0660            TC     Q               SHOULD GO TO BZMFCHK +1
 0661  2         TC     ERRORS
R0662   NORMAL USE OF MP
R0663   37777 X 2
 0664   MP1++    CA     S+MAX           37777
 0665            EXTEND
 0666            MP     S+2             C(A) = +1, C(L. = 37776
 0667            AD     L
 0668            TS     KEEP1           37777
 0669   MP1+-    EXTEND
 0670            MP     S-2             C(A) = -1, C(L) = 40001
 0671            AD     L
 0672            TS     KEEP2           40000
 0673   MP1-+    EXTEND
 0674            MP     S+2             C(A) = -1, C(L) = 40001
 0675            AD     L
 0676            TS     KEEP3           40000
 0677   MP1--    EXTEND
 0678            MP     S-2             C(A) = +1, C(L) = 37776
 0679            AD     L               37777
 0680            AD     KEEP3           77777
 0681            AD     KEEP2           40000
 0682            AD     KEEP1           77777
 0683            TC     -0CHK
R0684   37777 X 37777
 0685   MP2++    CA     S+MAX           37777
 0686            EXTEND                 CHECKS RSC PULSE
 0687            MP     A               C(A) = 37776, C(L) = +1
 0688            AD     L
 0689            TS     KEEP1           37777
 0690   MP2+-    EXTEND
 0691            MP     S-MAX           C(A) = 40001, C(L) = -1
 0692            AD     L
 0693            TS     KEEP2           40000
 0694   MP2-+    EXTEND
 0695            MP     S+MAX           C(A) = 40001, C(L) = -1
 0696            AD     L
 0697            TS     KEEP3           40000
 0698   MP2--    EXTEND
 0699            MP     S-MAX           C(A) = 37776, C(L) = +1
 0700            AD     L               37777
 0701            AD     KEEP3           77777
 0702            AD     KEEP2           40000
 0703            AD     KEEP1           77777
 0704            TC     -0CHK
R0705   C(A) = NON-ZERO, C(K) = ZERO
R0706   RESULT IS ALWAYS POSITIVE ZERO
 0707   MP3++    CA     S+MAX           37777
 0708            EXTEND
 0709            MP     S+ZERO
 0710            AD     L
 0711            TC     -0CHK -1
 0712   MP3+-    CA     S+1
 0713            EXTEND
 0714            MP     S-ZERO
 0715            AD     L
 0716            TC     -0CHK -1
 0717   MP3-+    CA     S-1
 0718            EXTEND
 0719            MP     S+ZERO
 0720            AD     L
 0721            TC     -0CHK -1
 0722   MP3--    CA     S-ZERO
 0723            EXTEND
 0724            MP     S-ZERO
 0725            AD     L
 0726            TC     -0CHK -1
R0727   C(A) = ZERO, C(K) = NON-ZERO,
R0728   RESULT IS + ZERO FOR A POSITIVE SIGN AND NEGATIVE
R0729   ZERO FOR Z NEGATIVE SIGN
 0730   MP4++    CA     S+ZERO
 0731            EXTEND
 0732            MP     S+MAX
 0733            AD     L
 0734            TC     -0CHK -1
 0735   MP4+-    EXTEND
 0736            MP     S-1
 0737            AD     L
 0738            TC     -0CHK
 0739   MP4-+    CS     A
 0740            EXTEND
 0741            MP     S+5
 0742            AD     L
 0743            TC     -0CHK
 0744   MP4--    CS     A
 0745            EXTEND
 0746            MP     S-ZERO
 0747            AD     L
 0748            TC     -0CHK -1
R0749   MULTIPLY ZERO X ZERO
R0750   RESULT IS ALWAYS PLUS ZERO
 0751   MP5++    CA     S+ZERO
 0752            TS     KEEP1
 0753            EXTEND
 0754            MP     KEEP1
 0755            AD     L
 0756            TC     -0CHK -1
 0757   MP5+-    EXTEND
 0758            MP     S-ZERO
 0759            AD     L
 0760            TC     -0CHK -1
 0761   MP5-+    CA     S-ZERO
 0762            EXTEND
 0763            MP     S+ZERO
 0764            AD     L
 0765            TC     -0CHK -1
 0766   MP5--    CA     S-ZERO
 0767            EXTEND
 0768            MP     S-ZERO
 0769  2         TC     -0CHK -1
 07691           CA     CONTINU
 07692           TC     BANKJUMP
 07693 2CONTINU  CADR   DV1++ -1        CONTINUE WITH INSTRUCTION CHECK
 07694 2         SETLOC 30000
 07695 2         TC     CHECKNJ         CHECK FOR NEW JOB
R0770   NORMAL USE OF DV ... REMAINDER HAS SIGN OF DIVIDEND
R0771   1/4 DIVIDED BY 3/8
R0772   C(A) = 25252 WITH A + QUOTIENT AND 52525 WITH A - QUOTIENT.
R0773   C(L) = REMAINDER = /100000/ WITH SIGN OF DIVIDEND.
 0774   DV1++    CA     DV1CON          14000
 0775            TS     KEEP7           14000, +3/8
 07751           TS     Q
 0776            CS     A
 0777            TS     KEEP6           63000, -3/8
 0778            CA     S+ZERO
 0779            TS     L
 0780            CA     SBIT13          10000
 0781            EXTEND
 0782            DV     Q               CHECKS RSC PULSE
 0783            TS     KEEP1           25252
 0784            CA     S+ZERO
 0785   DV1+-    LXCH   A
 0786            EXTEND
 0787            DV     KEEP6
 0788            AD     KEEP1
 0789            TC     -0CHK
 0790            CA     S-ZERO
 0791            LXCH   A
 0792   DV1-+    CS     A
 0793            EXTEND
 0794            DV     KEEP7
 0795            TS     KEEP1           52525
 0796            CA     S-ZERO
 0797   DV1--    LXCH   A
 0798            EXTEND
 0799            DV     KEEP6
 0800            AD     KEEP1
 0801            TC     -0CHK
 0802            CA     L
 0803            AD     SBIT13
 0804            TC     -0CHK
R0805   1/2 TO 15TH DIVIDED BY 1/2 TO 14TH
R0806   C(A) SHOULD BE 1/2 AND CONTENTS OF L SHOULD BE ZERO
 0807   DV2++    CA     S+1
 0808            TS     KEEP7           00001, DIVISOR
 0809            CS     A
 0810            TS     KEEP6           77776, DIVISOR
 0811            CA     S+ZERO
 0812            CA     SBIT14          20000
 0813            TS     L
 0814            CA     S+ZERO
 0815            EXTEND
 0816            DV     KEEP7           C(A) = 1/2, C(L) = +0
 0817            TS     KEEP1
 0818   DV2+-    LXCH   A
 0819            EXTEND
 0820            DV     KEEP6
 0821            TS     KEEP2            -1/2
 0822            AD     KEEP1
 0823            TC     -0CHK
 0824            CA     KEEP2
 0825            LXCH   A
 0826   DV2-+    CS     A
 0827            EXTEND
 0828            DV     KEEP7
 0829            TS     KEEP2
 0830   DV2--    LXCH   A
 0831            EXTEND
 0832            DV     KEEP6
 0833            TS     KEEP1
 0834            AD     KEEP2
 0835            TC     -0CHK
 0836            CS     KEEP1           MAKE SURE QUOTIENT IS 1/2
 0837            AD     SBIT14
 0838            TC     -0CHK
 0839            CA     L
 0840            TC     -0CHK
R0841   SAME AS PREVIOUS DIVISION EXCEPT A AND L WILL HAVE OPPOSITE SIGNS
R0842   BEFORE DIVISION.  SINCE A WILL ALWAYS BE ZERO, THE SIGN OF THE QUOTIENT
R0843   WILL DEPEND ON THE SIGN OF L AND THE SIGN OF THE DIVISOR.
 0844   DV3++    CA     SBIT14          20000
 0845            TS     L
 0846            CA     S-ZERO
 0847            EXTEND
 0848            DV     KEEP7
 0849            TS     KEEP1           20000
 0850   DV3+-    LXCH   A
 0851            CS     A               A = -0
 0852            EXTEND
 0853            DV     KEEP6
 0854            AD     KEEP1
 0855            TC     -0CHK
 0856            CS     SBIT14          -1/2
 0857   DV3-+    LXCH   A
 0858            EXTEND
 0859            DV     KEEP7
 0860            TS     KEEP1
 0861   DV3--    LXCH   A
 0862            CS     A               A = +0
 0863            EXTEND
 0864            DV     KEEP6
 0865            AD     KEEP1
 0866            TC     -0CHK
 0867            CS     L
 0868            TC     -0CHK -1
R0869   C(A) = 17777 AND C(L) = 37777.  THIS IS DIVIDED BY 20000.  THE RESULT
R0870   SHOULD BE +-/37777/ AND THE REMAINDER +-/17777/
 0871   DV4++    CA     S+MAX
 0872            TS     L
 0873            CA     SBIT14
 0874            TS     KEEP7           20000
 0875            CS     A
 0876            TS     KEEP6           57777
 0877            CA     S13BITS         17777
 0878            EXTEND
 0879            DV     KEEP7
 0880            TS     KEEP1
 0881   DV4+-    LXCH   A
 0882            EXTEND
 0883            DV     KEEP6
 0884            TS     KEEP2
 0885            AD     KEEP1
 0886            TC     -0CHK
 0887            CA     KEEP2
 0888            LXCH   A
 0889   DV4-+    CS     A
 0890            EXTEND
 0891            DV     KEEP7
 0892            AD     KEEP1
 0893            TC     -0CHK
 0894            CA     KEEP2
 0895   DV4--    LXCH   A
 0896            EXTEND
 0897            DV     KEEP6
 0898            TS     KEEP3
 0899            AD     KEEP2
 0900            TC     -0CHK
 0901            CS     KEEP3
 0902            AD     S+MAX
 0903            TC     -0CHK
 0904            CA     L
 0905            AD     S13BITS
 0906            TC     -0CHK
R0907   C(A) = +-/17777/ AND C(L) = +-/37777/ WITH OPPOSITE SIGN BEFORE DEVISION
R0908   THE QUOTIENT SHOULD BE +-/37774/ WITH THE SIGN DEPENDING ON THE SIGN OF
R0909   A AND THE SIGN OF THE DEVISOR. THE C(L) = +-/1/ DEPENDING ON THE SIGN
R0910   OF A.
 0911   DV5++    CS     S+MAX
 0912            TS     L               40000
 0913            CA     S13BITS         17777
 0914            EXTEND
 0915            DV     KEEP7
 0916            TS     KEEP1           37774
 0917            XCH    L
 0918            TC     -1CHK -1
 0919   DV5+-    CA     S-MAX
 0920            TS     L               40000
 0921            CA     S13BITS         17777
 0922            EXTEND
 0923            DV     KEEP6           C(A) = -37774, C(L) = +1
 0924            AD     KEEP1
 0925            TC     -0CHK
 0926            XCH    L
 0927            TC     -1CHK -1
 0928   DV5-+    CA     S+MAX
 0929            TS     L               37777
 0930            CS     S13BITS         60000
 0931            EXTEND
 0932            DV     KEEP7           C(A) = -37774, C(L) = -1
 0933            TS     KEEP2
 0934            AD     KEEP1
 0935            TC     -0CHK
 0936            XCH    L
 0937            TC     -1CHK
 0938   DV5--    CA     S+MAX
 0939            TS     L               37777
 0940            CS     S13BITS         60000
 0941            EXTEND
 0942            DV     KEEP6           C(A) = 37774, C(L) = -1
 0943            AD     KEEP2
 0944            TC     -0CHK
 0945            XCH    L
 0946            TC     -1CHK
 0947            CA     KEEP2           -37774
 0948            AD     S-2             -37776
 0949            AD     S+MAX           +1
 0950  2         TC     -1CHK -1        CHECK THAT QUOTIENT IS +-/37774/
R0951   DIVIDE SAME (37776).  THE RESULT SHOULD BE MAXIMUM AND THE REMAINDER
R0952   SHOULD BE THE SAME VALUE AS THE DIVISOR WITH THE SAME SIGN AS THE
R0953   DIVIDEND
 0954   DV6++    CA     S+ZERO
 0955            TS     L
 0956            CS     DV2CON          37776
 0957            TS     KEEP6           40001
 0958            CS     A
 0959            TS     KEEP7           37776
 0960            EXTEND
 0961            DV     KEEP7
 0962            CS     A
 0963            AD     L
 0964            TC     -1CHK
 0965            CA     S+ZERO
 0966   DV6+-    LXCH   A
 0967            EXTEND
 0968            DV     KEEP6
 0969            AD     L
 0970            TC     -1CHK
 0971            CA     S-ZERO
 0972   DV6-+    LXCH   A
 0973            CS     A
 0974            EXTEND
 0975            DV     KEEP7
 0976            CS     A
 0977            AD     L
 0978            TC     -1CHK -1
 0979            CA     S-ZERO
 0980   DV6--    LXCH   A
 0981            EXTEND
 0982            DV     KEEP6
 0983            AD     L
 0984            TC     -1CHK -1
 0985            CS     L
 0986            AD     KEEP6
 0987            TC     -0CHK
R0988   DIVIDE SAME (ZERO).  THE RESULT SHOULD BE MAXIMUM AND THE REMAINDER
R0989   SHOULD BE THE SAME VALUE AS THE DIVISOR WITH THE SAME SIGN AS THE
R0990   DIVIDEND.
 0991   DV7++    CS     S+ZERO
 0992            TS     KEEP6           -0
 0993            CS     A
 0994            TS     KEEP7           +0
 0995            TS     L
 0996            EXTEND
 0997            DV     KEEP7
 0998            AD     S-MAX
 0999            TC     -0CHK
 1000   DV7+-    LXCH   A               C(A) = C(L) = +0
 1001            EXTEND
 1002            DV     KEEP6
 1003            AD     S+MAX
 1004            TC     -0CHK
 1005            CS     A
 1006   DV7-+    LXCH   A
 1007            CS     A               C(A) = C(L) = -0
 1008            EXTEND
 1009            DV     KEEP7
 1010            AD     S+MAX
 1011            TC     -0CHK
 1012            CS     A
 1013   DV7--    LXCH   A               C(A) = C(L) = -0
 1014            EXTEND
 1015            DV     KEEP6
 1016            AD     S-MAX
 1017            TC     -0CHK
 1018            CS     L
 1019  2         TC     -0CHK -1
R1020   DEVIDE SAME (ZERO). THE CONTENTS OF THE A REGISTER AND L REGISTER WILL
R1021   HAVE OPPOSITE SIGNS BEFORE DEVISION. THE SIGN OF THE QUOTIENT WILL
R1022   DEPEND ON THE SIGN OF THE L REGISTER BEFORE DEVISION AND THE SIGN OF
R1023   THE DEVISOR. THE SIGN OF THE REMAINDER IS THE SAME SIGN AS THE SIGN OF
R1024   THE L REGISTER BEFORE DEVISION. C(L)  REMAINS SAME
 1025   DV8++    CA     S+ZERO
 1026            TS     KEEP7           +0
 1027            TS     L
 1028            CS     A
 1029            TS     KEEP6           -0
 1030            EXTEND                 A = -0, L = +0
 1031            DV     KEEP7           A = L = +0
 1032            TS     KEEP1
 1033            CA     L               C(A) = C(L) = +0
 1034            TC     -0CHK -1
 1035   DV8+-    CS     A
 1036            EXTEND                 A = -0, L = +0
 1037            DV     KEEP6           A = -0, L = +0
 1038            AD     KEEP1
 1039            TC     -0CHK
 1040            CS     A
 1041            XCH    L               PUT -0 IN L
 1042            TC     -0CHK -1        CHECK C(L)
 1043   DV8-+    EXTEND                 A = +0, L = -0
 1044            DV     KEEP7           A = L = -0
 1045            TS     KEEP2
 1046            AD     KEEP1
 1047            TC     -0CHK
 1048            CS     A
 1049            XCH    L               PUT -0 IN L
 1050            TC     -0CHK           CHECK C(L)
 1051   DV8--    EXTEND                 A = +0, L = -0
 1052            DV     KEEP6           A = +0, L = -0
 1053            AD     KEEP2
 1054            TC     -0CHK
 1055            CA     S+MAX           CHECK QUOTIENT IS CORRECT
 1056            AD     KEEP2
 1057            TC     -0CHK
 1058            XCH    L
 1059  2         TC     -0CHK           CHECK C(L)
R1060   INPUT-OUTPUT INSTRUCTIONS
R1061   NORMAL USE OF READ AND WRITE
 1062   IN-OUT1  CA     S-1
 10621           INHINT
 1063            EXTEND
 1064            WRITE  L                77776
 1065            CS     A                00001
 1066            EXTEND
 1067            READ   L                77776
 1068            TC     -1CHK
 1069            CA     S-MAX
 1070            AD     S-MAX            C(A) = 10 - 00001
 1071            EXTEND
 1072            WRITE  Q
 1073            CS     A               01 - 37776
 1074            EXTEND
 1075            READ   Q                10 - 00001
 1076            TS     KEEP1
 1077            TC     ERRORS
 1078            CA     KEEP1
 1079            AD     S+MAX
 1080  2         TC     -1CHK -1
R1081   NORMAL USE OF RAND, RAND = READ AND MASK
 1082   RANDCHK  CA     S+ZERO
 1083            TS     L
 1084            EXTEND
 1085            RAND   L               00000, 00000
 1086            TC     -0CHK -1
 1087            CA     S-ZERO
 1088            EXTEND
 1089            RAND   L                77777, 00000
 1090            TC     -0CHK -1
 1091            CS     A
 1092            TS     L
 1093            CS     A
 1094            EXTEND
 1095            RAND   L               00000, 77777
 1096            TC     -0CHK -1
 1097            CA     S-ZERO
 1098            EXTEND
 1099            RAND   L               77777, 77777
 1100            TC     -0CHK
 1101   RANDOV   CA      S+MAX
 1102            AD     S+2              01 - 00001
 1103            XCH    Q
 1104            CA     S-ZERO           77777
 1105            EXTEND
 1106            RAND   Q                01 - 00001
 1107            TS     KEEP1
 1108            TC     ERRORS
 1109            TC     -1CHK -1
 1110            CS     KEEP1
 1111  2         TC     -1CHK
R1112   NORMAL USE OF WAND, WAND = WRITE AND MASK
 1113   WANDCHK  CA     S+ZERO
 1114            TS     L
 1115            EXTEND
 1116            WAND   L               00000, 00000
 1117            AD     L
 1118            TC     -0CHK -1
 1119            CA     S-ZERO
 1120            EXTEND
 1121            WAND   L               77777, 00000
 1122            AD     L
 1123            TC     -0CHK -1
 1124            CS     A
 1125            TS     L
 1126            CS     A
 1127            EXTEND
 1128            WAND   L               00000, 77777
 1129            AD     L
 1130            TC     -0CHK -1
 1131            CA     S-ZERO
 1132            TS     L
 1133            EXTEND
 1134            WAND   L               77777, 77777
 1135            AD     L
 1136            TC     -0CHK
 1137   WANDUF   CA     S+MAX
 1138            AD     S+2             01 - 00001
 1139            XCH    Q
 1140            CA     S-ZERO          77777
 1141            EXTEND
 1142            WAND   Q
 1143            TS     KEEP2
 1144            TC     ERRORS
 1145            CA     Q
 1146            TS     KEEP1
 1147            TC     ERRORS
 1148            CS     KEEP1
 1149            TC     -1CHK
 1150            CS     KEEP2
 1151  2         TC     -1CHK
R1152   NORMAL USE OF ROR, READ AND SUPERIMPOSE
 1153   RORCHK   CA     S+ZERO
 1154            TS     L
 1155            EXTEND
 1156            ROR    L               00000, 00000
 1157            TC     -0CHK -1
 1158            CA     L
 1159            TC     -0CHK -1
 1160            CA     S-ZERO
 1161            EXTEND
 1162            ROR    L               77777, 00000
 1163            TC     -0CHK
 1164            CA     L
 1165            TC     -0CHK -1
 1166            CS     A
 1167            TS     L
 1168            CS     A
 1169            EXTEND
 1170            ROR    L               00000, 77777
 1171            TC     -0CHK
 1172            CA     L
 1173            TC     -0CHK
 1174            CA     S-ZERO
 1175            EXTEND
 1176            ROR    L               77777, 77777
 1177            TC     -0CHK
 1178   ROROV    CA     S-MAX
 1179            AD     S-2             10 - 37776
 1180            XCH    Q
 1181            CA     S+MAX
 1182            AD     S+1             01 - 00000
 1183            EXTEND
 1184            ROR    Q               11 - 37776
 1185            TS     KEEP1
 1186            TC     +2
 1187            TC     ERRORS
 1188            CA     KEEP1
 1189  2         TC     -1CHK
R1190   NORMAL USE OF WOR, WOR = WRITE AND SUPERIMPOSE
 1191   WORCHK   CA     S+ZERO
 1192            TS     L
 1193            EXTEND
 1194            WOR    L               00000, 00000
 1195            TC     -0CHK -1
 1196            CA     L
 1197            TC     -0CHK -1
 1198            CA     S-ZERO
 1199            EXTEND
 1200            WOR    L               77777, 00000
 1201            TC     -0CHK
 1202            CA     L
 1203            TC     -0CHK
 1204            CS     A
 1205            TS     L
 1206            CS     A
 1207            EXTEND
 1208            WOR    L               00000, 77777
 1209            TC     -0CHK
 1210            CA     L
 1211            TC     -0CHK
 1212            CA     S-MAX
 1213            EXTEND
 1214            WOR    L               77777, 77777
 1215            TC     -0CHK
 1216            CA     L
 1217            TC     -0CHK
 1218   WOROV    CA     S-MAX
 1219            AD     S-2             10 - 37776
 1220            XCH    Q
 1221            CA     S+MAX
 1222            AD     S+1             01 - 00000
 1223            EXTEND
 1224            WOR    Q               11 - 37776
 1225            TS     KEEP2           SHOULD NOT SKIP
 1226            TCF    +2
 1227            TC     ERRORS
 1228            XCH    Q
 1229            TS     KEEP3
 1230            TC     +2
 1231            TC     ERRORS
 1232            CA     KEEP3           CHECK C(Q)
 1233            TC     -1CHK
 1234            CA     KEEP2
 1235  2         TC     -1CHK           CHECK C(A)
R1236   NORMAL USE OF RXOR
 1237   RXORCHK  CA     S+ZERO
 1238            TS     L
 1239            EXTEND
 1240            RXOR   L               00000, 00000
 1241            TC     -0CHK -1
 1242            CA     S-ZERO
 1243            EXTEND
 1244            RXOR   L               77777, 00000
 1245            TC     -0CHK
 1246            CA     L
 1247            TC     -0CHK -1
 1248            CS     A
 1249            TS     L
 1250            CS     A
 1251            EXTEND
 1252            RXOR   L               00000, 77777
 1253            TC     -0CHK
 1254            CA     S-ZERO
 1255            EXTEND
 1256            RXOR   L               77777, 77777
 1257            TC     -0CHK -1
 1258            CA     L
 1259            TC     -0CHK
 1260            CS     A
 1261            TS     Q
 1262   RXORUV   CA     S+MAX
 1263            AD     S+2             01 - 00001
 1264            EXTEND
 1265            RXOR   Q               10 - 37776, C(Q) = -0
 1266            TS     KEEP1
 1267            TC     ERRORS
 1268            CA     KEEP1
 12681 2         TC     -1CHK
 12682           RELINT
 1269            TC     CHECKNJ         CHECK FOR NEW JOB
 12691 2         TC     XTRANDX
R1270   NEXT THREE CONSTANTS ARE ADDRESSESS USED BY EXTRACODE INSTRUCTIONS
 1271   ADRSBZMF ADRES  NDXBZMF
 1272   ADRSDCA  ADRES  NDXDCA
 1273  2ADRSQXCH ADRES  NDXAUG
R1274   NORMAL USE OF INDEX WITH EXTRACODE INSTRUCTIONS
R1275   INDEX INSTRUCTION USED WITH INDEX AND BZF
 1276   XTRANDX  CA     S+ZERO
 1277            EXTEND
 1278            NDX    S+ZERO
 1279            NDX    ADRSBZMF
 1280            BZF    00000           BZF +2
 1281            TC     ERRORS
R1282   INDEX INSTRUCTION USED WITH BZMF
 1283   NDXBZMF  EXTEND
 1284            NDX    ADRSDCA
 1285            BZMF   0000            BZMF+2
 1286            TC     ERRORS
R1287   INDEX INSTRUCTION USED WITH DCA
 1288   NDXDCA   EXTEND
 1289            INDEX  ADRS+1          DCA S+1
 1290            DCA    0000            C(A) = +1, C(L) = +2
 1291            CS     A
 1292            AD     L
 1293            TC     -1CHK -1
R1294   INDEX INSTRUCTION USED WITH DCS
 1295            EXTEND
 1296            INDEX  ADRS+1          DCS S+1
 1297            DCS    0000            C(A) = -1, C(L) = -2
 1298            CS     A
 1299            AD     L
 1300            TC     -1CHK
R1301   INDEX INSTRUCTION USED WITH MP AND SU
 1302            CA     S+MAX           37777
 1303            EXTEND
 1304            NDX    ADRS+1
 1305            MP     0001            C(A) = 1, C(L) = 37776
 1306            TC     -1CHK -1
 1307            CA     S+MAX           37777
 1308            EXTEND
 1309            NDX    S+1
 1310            SU     0000
 1311            TC     -1CHK -1
R1312   INDEX INSTRUCTION USED WITH DV
 1313   NDXDV    CA     DV1CON          PUT 14000 (3/8) IN KEEP3
 1314            TS     KEEP3
 1315            CA     S+ZERO
 1316            TS     L
 1317            CA     SBIT13          10000
 1318            EXTEND
 1319            NDX    ADRS3
 1320            DV     0000            C(A) = 25252, C(L) = 10000
 1321            TS     KEEP1
 1322            CA     S-ZERO
 1323            XCH    L
 1324            CS     A
 1325            EXTEND
 1326            NDX    ADRS3
 1327            DV     0000
 1328            AD     KEEP1
 1329            TC     -0CHK
R1330   INDEX USED WITH MSU (C(A) = +0, C(K) = -0) (RESULT = -1)
 1331   NDXMSU   CA     S+ZERO
 1332            TS     KEEP1
 1333            CS     A
 1334            EXTEND
 1335            NDX    ADRS1           MSU KEEP1
 1336            MSU    0000            C(A) = -1
 1337            TC     -1CHK
R1338   INDEX USED WITH QXCH
 1339   NDXQXCH  CA     ADRSQXCH
 1340            TS     KEEP1
 1341            TC     +2
 1342            TC     ERRORS
 1343            EXTEND
 1344            NDX    ADRS1           QXCH KEEP1
 1345            QXCH   0000
 1346            TC     Q
 1347            TC     ERRORS
R1348   INDEX USED WITH AUG
 1349   NDXAUG   CS     S+ZERO
 1350            TS     KEEP1           00000
 1351            EXTEND
 1352            NDX    ADRS1           AUG KEEP1
 1353            AUG    0000
 1354            CA     KEEP1
 1355            TC     -1CHK
R1356   INDEX USED WITH DIM
 1357   NDXDIM   CA     S+2
 1358            TS     KEEP1
 1359            EXTEND
 1360            NDX    ADRS1           DIM KEEP1
 1361            DIM    0000
 1362            CS     KEEP1
 1363  2         TC     -1CHK
R1364   NORMAL USE OF INDEX WITH IN-OUT INSTRUCTIONS
R1365   INDEX USED WITH WRITE AND READ
 1366   NDXINOUT CA     S-1
 1367            EXTEND
 1368            NDX    S+1             WRITE L
 1369            WRITE  0000
 1370            CS     A
 1371            EXTEND
 1372            NDX    S+1             READ L
 1373            READ   0000
 1374            TC     -1CHK
R1375   INDEX USED WITH RAND
 1376            CA     S+1             00001
 1377            TS     L
 1378            CA     S-ZERO          77777
 1379            EXTEND
 1380            NDX    S+1             RAND L
 1381            RAND   00000
 1382            TC     -1CHK -1
R1383   INDEX USED WITH WAND
 1384            CA     S-MAX           40000
 1385            AD     S+1             40001
 1386            TS     L
 1387            CA     S+MAX           37777
 1388            EXTEND
 1389            NDX    S+1             WAND L
 1390            WAND   0000            C(A) = C(L) = +1
 1391            TC     -1CHK -1
 1392            CS     L
 1393            TC     -1CHK
R1394   INDEX USED WITH ROR
 1395            CA     S+1
 1396            TS     Q
 1397            CA     S+ZERO
 1398            EXTEND
 1399            NDX    S+2             ROR Q
 1400            ROR    0000
 1401            TC     -1CHK -1
R1402   INDEX USED WITH WOR
 1403            CA     S-7
 1404            TS     L               77770
 1405            CA     S+MAX
 1406            AD     S-1             37776
 1407            EXTEND
 1408            NDX    S+1             WOR L
 1409            WOR    0000            C(A) = C(L) = -1
 1410            TC     -1CHK
 1411            CA     L
 1412            TC     -1CHK
R1413   INDEX USED WITH RXOR
 1414            CA     S-1
 1415            TS     L               77776
 1416            CA     S+MAX           37777
 1417            EXTEND
 1418            NDX    S+1             RXOR L
 1419            RXOR   0000            C(A) = 40001
 1420            AD     S+MAX
 1421            TC     -1CHK -1
R14211  CHECKS EXTRACODE INDEX OF AN SC REGISTER
 14212           CA     S+2
 14213           TS     KEEP1
 14214           CA     ADRS1           ADDRESS OF KEEP1
 14215           TS     L
 14216           CA     S+1
 14217           EXTEND
 14218           NDX    L
 142181          SU     0000
 14219 2         TC     -1CHK
R1422   CHECK OF SPECIAL AND CENTRAL REGISTERS
R1423   CHANGE OF SIGN BY ADDING SAME NUMBER (ADDER)
 1424   ADDCHK   CA     SBIT14          20000
 1425            AD     A               01 -00000
 1426            TS     A
 1427            TC     ERRORS
 1428            AD     A               10 - 00000
 1429            TS     A
 1430            TC     ERRORS
 1431            AD     A               00001
 1432            TS     A
 1433            TC     +2
 1434            TC     ERRORS
 1435  2         TC     -1CHK -1
R1436   NORMAL OPERATION OF CYCLE RIGHT REGISTER
 1437   CYRCHK   CA     CYRCON          57761
 1438            TS     KEEP5           COUNTDOWN REGISTER
 1439            CA     S-MAX           40000
 1440            TS     CYR
 1441   CYRLOOP  CCS    CYR
 1442            TC     CYRCNTDN
 1443            TC     ERRORS
 1444            TC     ENDCYR
 1445            TC     ERRORS
 1446   CYRCNTDN INCR   KEEP5
 1447            TC     CYRLOOP
 1448   ENDCYR   CA     KEEP5           57777
 1449            AD     CYR             C(CYR) = 20000
 1450            CCS    A               -0 = END OF CYCLE RIGHT CHECK
 1451            TC     ERRORS
 1452            TC     ERRORS
 1453  2         TC     ERRORS
R1454   NORMAL OPERATION OF CYCLE LEFT REGISTER
 1455   CYLCHK   CA     S-15            77760, -15
 1456            TS     KEEP5           COUNT REGISTER
 1457            CA     S-MAX           40000
 1458            TS     CYL
 1459   CYLLOOP  CCS    CYL
 1460            TC     CYLCNTDN
 1461            TC     ERRORS
 1462            TC     ENDCYL
 1463            TC     ERRORS
 1464   CYLCNTDN INCR   KEEP5
 1465            TC     CYLLOOP
 1466   ENDCYL   CA     CYL             C(CYL) SHOULD = +1
 1467            TC     -1CHK -1
 1468            CA     KEEP5
 1469  2         TC     -1CHK
R1470   NORMAL OPERATION OF SHIFT RIGHT REGISTER
 1471   SRCHK    CA     S-14            77761, -14
 1472            TS     KEEP5           COUNT REGISTER
 1473            CA     S-MAX           40000
 1474            TS     SR
 1475   SRLOOP   CCS    SR
 1476            TC     ERRORS
 1477            TC     ERRORS
 1478            TC     SRCNTDN
 1479            CA     KEEP5           HAS SHIFTED 14 TIMES
 1480            TC     -1CHK
 1481            TC     EDOPCHK         NEXT SUBROUTINE
 1482   SRCNTDN  INCR   KEEP5           INCREMENT COUNT REGISTER
 1483  2         TC     SRLOOP
R1484   NORMAL OPERATION OF EDOP REGISTER.  BITS 8 - 14 OF G REGISTER GO TO
R1485   BITS 1 - 7 OF EDOP.
 1486   EDOPCHK  CA     S-15            77760, -15
 1487            TS     KEEP5           COUNT REGISTER
 1488            CA     S7BITS          00177
 1489            TS     CYL
 1490   EDOPLOOP CA     CYL
 1491            TS     EDOP
 1492            TS     CYR             SHIFT LEFT 7 TIMES
 1493            CA     CYR
 1494            CA     CYR
 1495            CA     CYR
 1496            CA     CYR
 1497            CA     CYR
 1498            CA     CYR
 1499            CA     CYR
 1500            MASK   S7BITS
 1501            CS     A
 1502            TS     KEEP1           COMPLEMEMT OF C(EDOP)
 1503            CA     S-ZERO
 1504            MASK   EDOP
 1505            AD     KEEP1
 1506            TC     -0CHK
 1507            INCR   KEEP5           INCREMEMT COUNT REGISTER
 1508            CCS    EDOP
 1509            TC     EDOPLOOP
 1510            TC     ENDEDOP
 1511            TC     ERRORS
 1512            TC     ERRORS
 1513   ENDEDOP  CA     KEEP5           SHOULD HAVE PERFORMED EDOPLOOP 14 TIMES
 1514  2         TC     -1CHK
 1515  2         INCR   SCOUNT          INCREMENT UPON SUCCESSFUL COMLETION
 1516            TC     SMODECHK
L      2EXTENDED VERBS FOR MODING
 0001            SETLOC 32000
 0002   VBZERO   CA     BIT5            ROUTINE TO ZERO ICDUS.
 0003            EXTEND
 0004  2         WOR    12
 0005            CA     20MSEC          WAIT 20 MS.
 0006            INHINT
 0007            TC     WAITLIST
 0008            EBANK= COMMAND
 0009            2CADR  ZEROICDU
 0010  2         TC     ENDOFJOB
 0011   ZEROICDU CAF    ZERO            ZERO ICDU COUNTERS.
 0012            TS     CDUX
 0013            TS     CDUY
 0014  2         TS     CDUZ
 0015            CS     BIT5            REMOVE ZERO DISCRETE.
 0016            EXTEND
 0017  2         WAND   12
 0018  2         TC     TASKOVER
R0019  2IMU COARSE ALIGN MODE.
 0020   IMUCOARS CAF    BIT4            SEND COARSE ALIGN ENABLE DISCRETE
 0021            EXTEND
 0022  2         WOR    12
 0023            CAF    50MSEC
 0024            INHINT
 0025            TC     WAITLIST
 0026            EBANK= COMMAND
 0027            2CADR  COARS
 0028  2         TC     ENDOFJOB
 0029   COARS    CAF    BIT6            ENABLE ALL THREE ISS CDU ERROR COUNTERS
 0030            EXTEND
 0031  2         WOR    12
 0032            CAF    TWO             SET CDU INDICATOR
 0033  2COARS1   TS     CDUIND
 0034            INDEX  CDUIND          COMPUTE THETAD - THETAA IN 1:S
 0035            CA     THETAD            COMPLEMENT FORM
 0036            EXTEND
 0037            INDEX  CDUIND
 0038            MSU    CDUX
 0039            EXTEND
 0040            MP     BIT13           SHIFT RIGHT 2
 0041            XCH    L               ROUND
 0042            DOUBLE
 0043            TS     ITEMP1
 0044            TCF    +2
 0045  2         ADS    L
 0046            INDEX  CDUIND          DIFFERENCE TO BE COMPUTED
 0047            LXCH   COMMAND
 0048            CCS    CDUIND
 0049  2         TC     COARS1
 0050            CA     20MSEC
 0051            TC     WAITLIST
 0052            EBANK= COMMAND
 0053            2CADR  COARS2
 0054  2         TC     TASKOVER
 0055   COARS2   CAF    ZERO
 0056            TS     ITEMP1          SETS TO +0.
 0057            CAF    TWO             SET CDU INDICATOR
 0058  2 +3      TS     CDUIND
 0059            INDEX  CDUIND
 0060            CCS    COMMAND         NUMBER OF PULSES REQUIRED
 0061            TC     COMPOS          GREATER THAN MAX ALLOWED
 0062            TC     NEXTCDU  +1
 0063            TC     COMNEG
 0064  2         TC     NEXTCDU  +1
 0065   COMPOS   AD     -COMMAX         COMMAX = MAX NUMBER OF PULSES ALLOWED
 0066            EXTEND                   MINUS ONE
 0067            BZMF   COMZERO
 0068            INDEX  CDUIND
 0069            TS     COMMAND         REDUCE COMMAND BY MAX NUMBER OF PULSES
 0070  2         CS     -COMMAX-          ALLOWED
 0071   NEXTCDU  INCR   ITEMP1
 0072            INDEX  CDUIND
 0073  2         TS     CDUXCMD         SET UP COMMAND REGISTER.
 0074            CCS    CDUIND
 0075  2         TC     COARS2   +3
 0076            CCS    ITEMP1          SEE IF ANY PULSES TO GO OUT.
 0077            TC     SENDPULS
 0078            TC     COARS1   -1
 0079            EXTEND
 0080  2         WAND   12
 0081  2         TC     TASKOVER
 0082   COMNEG   AD     -COMMAX
 0083            EXTEND
 0084            BZMF   COMZERO
 0085            COM
 0086            INDEX  CDUIND
 0087            TS     COMMAND
 0088            CA     -COMMAX-
 0089  2         TC     NEXTCDU
 0090   COMZERO  CAF    ZERO
 0091            INDEX  CDUIND
 0092            XCH    COMMAND
 0093  2         TC     NEXTCDU
 0094   SENDPULS CAF    13,14,15
 0095            EXTEND
 0096            WOR    14
 0097            CAF    600MS
 0098            TC     WAITLIST
 0099            EBANK= COMMAND
 0100            2CADR  COARS2
 0101  2         TC     TASKOVER
R0102  2KEYBOARD REQUEST TO PULSE TORQUE IRIGA
 0103   TORQGYRS CS     BITS4-6         RESET ZERO, COARSE, AND ECTR ENABLE.
 0104            EXTEND
 0105  2         WAND   12
 0106            CAF    TWO             INITIALIZE THE GYRO INDEX ERASABLES.
 0107            TS     GYRONUM
 0108            DOUBLE
 0109            TS     GYCMDIDX
 0110            AD     ONE
 0111  2         TS     GYCMDIDX +1
 0112            CAF    BIT6            ENABLE THE POWER SUPPLY.
 0113            EXTEND
 0114  2         WOR    14
 0115            CAF    30MSEC
 0116            INHINT
 0117            TC     WAITLIST
 0118            EBANK= COMMAND
 0119            2CADR  IMUPULSE
 0120  2         TC     ENDOFJOB
R0121            THE FOLLOWING ROUTINE TORQUES THE IRIGS ACCORDING TO DOUBLE PRE
 0122  9CISION INPUTS IN THE SIX REGISTERS
R0123   BEGINNING AT LOCATION OGC. THE MINIMUM SIZE OF ANY PULSE TRAIN IS 16 PUL
 0124  9SES (.25 CDU COUNTS). THE
R0125  2UNSENT PORTION OF THE COMMAND IS LEFT INTACT IN THE INPUT COMMAND REGIST
 0126  9ERS.
 0127   IMUPULSE INDEX  GYCMDIDX
 0128            CCS    OGC             SEE IF MORE THAN ONE PULSE TRAIN NEEDED
 0129            TC     LONGGYRO        (MORE THAN 16383 PULSES).
 0130            TC     LASTSEG
 0131            TC     LONGGYRO
 0132  2         TC     LASTSEG
 0133   LONGGYRO INDEX  GYCMDIDX        SEND MAXIMUM 16383 PULSES.
 0134  2         TS     OGC
 0135            INDEX  GYCMDIDX +1
 0136  2         INCR   OGC
 0137            CAF    POSMAX
 0138            TS     GYROCTR
 0139            CA     5.13SEC         WAIT FOR FULL PULSE TRAIN TO GO OUT.
 0140            TC     +1
 0141            TC     WAITLIST
 0142            EBANK= COMMAND
 0143  2         2CADR  IMUPULSE
 0144   STRTGYRO INDEX  GYCMDIDX +1     DETERMINE POLARITY OF COMMAND.
 0145            CCS    OGC
 0146            CAF    ZERO
 0147            TCF    +2
 0148  2         CAF    BIT9
 0149            INDEX  GYRONUM         SEND PULSE COMMAND TO GYRO.
 0150            AD     GYBITTAB
 0151            EXTEND
 0152  2         WRITE  14
 0153  2         TC     TASKOVER
 0154   LASTSEG  INDEX  GYCMDIDX +1     ENTIRE COMMAND.
 0155            CCS    OGC
 0156            TC     +4
 0157            TC     GYROEXIT
 0158            TC     +2
 0159  2         TC     GYROEXIT
 0160            AD     ONE
 0161  2         TS     GYROCTR
 0162            AD     -GYROMIN        SMALL GYRO COMMAND. SEE IF AT LEAST
 0163            EXTEND                 16 GYRO PULSES.
 0164  2         BZMF   GYROEXIT
 0165            CAF    BIT10           GET WAITLIST DT TO TIME WHEN TRAIN IS
 0166            EXTEND                 ALMOST OUT.
 0167            MP     GYROCTR
 0168            AD     TWO
 0169            TC     +1
 0170            TC     WAITLIST
 0171            EBANK= COMMAND
 0172            2CADR  GYROEXIT
 0173  2         TC     STRTGYRO
 0174   GYROEXIT CCS    GYRONUM
 0175  2         TCF    NEXTGYRO
 0176            CS     BIT6            RESET GYRO ENABLE.
 0177            EXTEND
 0178  2         WAND   14
 0179  2         TC     TASKOVER
 0180   NEXTGYRO TS     GYRONUM
 0181            DOUBLE
 0182            TS     GYCMDIDX
 0183            AD     ONE
 0184            TS     GYCMDIDX +1
 0185  2         TC     IMUPULSE
R0186  2KEYBOARD REQUEST TO TURN ON INERTIAL SUBSYSTEM
 0187   ISSUP    CS     BIT15           REMOVE IMU DELAY COMPLETE DISCRETE.
 0188            EXTEND
 0189  2         WAND   12
 0190            CAF    BIT14           SEE IF ISS HAS TURNED ON.
 0191            EXTEND
 0192  2         RAND   30
 0193            CCS    A
 0194            TC     +2
 0195  2         TC     CAGESUB
 0196            CAF    1SEC            CHECK AGAIN IN ONE SECOND.
 0197            TC     WAITLIST
 0198            EBANK= COMMAND
 0199            2CADR  ISSUP
 0200  2         TC     TASKOVER
 0201   CAGESUB  CA     BITS4&5         SEND ZERO AND COARSE.
 0202            EXTEND
 0203            WOR    12
 0204            CA     90SECS
 0205            TC     +1
 0206            TC     WAITLIST
 0207            EBANK= COMMAND
 0208            2CADR  ENDTNON
 0209  2         TC     TASKOVER
 0210   ENDTNON  CAF    BIT15           SEND ISS DELAY COMPLETE.
 0211            EXTEND
 0212  2         WOR    12
 0213   ENDTNON2 CAF    BIT14
 0214            EXTEND
 0215  2         RAND   30
 0216            CCS    A               IS TURN-ON COMPLETE?
 0217            TC     +2              YES.
 0218  2         TC     ENDTNON3        NO. TRY AGAIN IN 10 MS.
 0219            CS     BITS5&15        REMOVE IMU ZERO AND DELAY COMPLETE.
 0220            EXTEND
 0221  2         WAND   12
 0222            CAF    BIT6            ENABLE ERROR COUNTERS.
 0223            EXTEND
 0224  2         WOR    12
 0225  2         TC     TASKOVER
 0226   ENDTNON3 CAF    10MSEC
 0227            TC     +1
 0228            TC     WAITLIST
 0229            EBANK= COMMAND
 0230            2CADR  ENDTNON2
 0231  2         TC     TASKOVER
R0232  2IMU FINE ALIGN MODE SWITCH.
 0233   IMUFINE  CS     BITS4-6         RESET ZERO, COARSE, AND ECTR ENABLE.
 0234            EXTEND
 0235            WAND   12
 0236  4         TC     ENDOFJOB
R0237  2WAITLIST DELAY TIME CONSTANTS
 0238   10MSEC   DEC    1
 0239   20MSEC   DEC    2
 0240   30MSEC   DEC    3
 0241   50MSEC   DEC    5
 0242   600MS    DEC    60
 0243   1SEC     DEC    100
 0244  290SECS   DEC    9000
R0245  2CONSTANTS FOR MODE SWITCHING ROUTINES
 0246   -COMMAX  DEC    -191
 0247  2-COMMAX- DEC    -192
 0248   5.13SEC  DEC    513
 0249  2-GYROMIN DEC    -16             MAY BE ADJUSTED TO SPECIFY MINIMUM CMD.
 0250   BITS4&6  OCT    00050
 0251   BITS4-6  OCT    00070
 0252   BITS4&5  OCT    00030
 0253   BITS5&15 OCT    40020
 0254  213,14,15 OCT    70000
 0255   GYBITTAB OCT    1140            POWER SUPPLY ENABLE, GYRO SELECT,
 0256            OCT    1340            GYRO COMMAND OUT.
 0257  2         OCT    1240
P0258  2FAN-OUT
 0259   LST2FAN  TC     VBZERO          VB40 ZERO ISS CDU
 0260            TC     IMUCOARS        VB41 COARSE ALIGN IMU
 0261            TC     IMUFINE         VB42 FINE ALIGN IMU
 0262            TC     TORQGYRS        VB43 PULSE TORQUE GYROS
 0263   ITURNON  INHINT                 VB44 ISS TURN ON
 0264            CAF    ONE
 0265            TC     WAITLIST
 0266            EBANK= COMMAND
 0267            2CADR  ISSUP
 0268            TC     ENDOFJOB
*       ENDOFJOB
